
bin\Debug\StateEstimator_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  00002b6a  00002bfe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000028  00800096  00002ba0  00002c34  2**0
                  ALLOC
  3 .fuse         00000002  00820000  00820000  00002c34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000120  00000000  00000000  00002c36  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000465  00000000  00000000  00002d56  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014ae  00000000  00000000  000031bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d4  00000000  00000000  00004669  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b2c  00000000  00000000  00004e3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000330  00000000  00000000  0000696c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a74  00000000  00000000  00006c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 29 09 	jmp	0x1252	; 0x1252 <__vector_1>
       8:	0c 94 68 09 	jmp	0x12d0	; 0x12d0 <__vector_2>
       c:	0c 94 a7 09 	jmp	0x134e	; 0x134e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 6e 12 	jmp	0x24dc	; 0x24dc <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 3b 12 	jmp	0x2476	; 0x2476 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 08 12 	jmp	0x2410	; 0x2410 <__vector_11>
      30:	0c 94 b0 0d 	jmp	0x1b60	; 0x1b60 <__vector_12>
      34:	0c 94 d4 12 	jmp	0x25a8	; 0x25a8 <__vector_13>
      38:	0c 94 07 13 	jmp	0x260e	; 0x260e <__vector_14>
      3c:	0c 94 a1 12 	jmp	0x2542	; 0x2542 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e6       	ldi	r30, 0x6A	; 106
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 39       	cpi	r26, 0x96	; 150
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e9       	ldi	r26, 0x96	; 150
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3b       	cpi	r26, 0xBE	; 190
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ce 02 	call	0x59c	; 0x59c <main>
      8a:	0c 94 b3 15 	jmp	0x2b66	; 0x2b66 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ExInt_CBK_StartTimer>:
/**********************************************************************/
/*                          CAllback functions                        */
/**********************************************************************/

ERROR_STATUS ExInt_CBK_StartTimer (void)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
    gb_FetchReceived = TRUE;
      9a:	81 e0       	ldi	r24, 0x01	; 1
      9c:	80 93 97 00 	sts	0x0097, r24
    UART_SendByte('D');
      a0:	84 e4       	ldi	r24, 0x44	; 68
      a2:	0e 94 08 15 	call	0x2a10	; 0x2a10 <UART_SendByte>
    return E_OK;
      a6:	80 e0       	ldi	r24, 0x00	; 0
}
      a8:	cf 91       	pop	r28
      aa:	df 91       	pop	r29
      ac:	08 95       	ret

000000ae <Timer_CBK_OverflowCount>:

}
*/

ERROR_STATUS Timer_CBK_OverflowCount (void)
{
      ae:	df 93       	push	r29
      b0:	cf 93       	push	r28
      b2:	cd b7       	in	r28, 0x3d	; 61
      b4:	de b7       	in	r29, 0x3e	; 62
    UART_SendByte('F');
      b6:	86 e4       	ldi	r24, 0x46	; 70
      b8:	0e 94 08 15 	call	0x2a10	; 0x2a10 <UART_SendByte>
    SPI_SendByte(gu8_Speed);
      bc:	80 91 96 00 	lds	r24, 0x0096
      c0:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <SPI_SendByte>
    SwDelay_ms(100);
      c4:	64 e6       	ldi	r22, 0x64	; 100
      c6:	70 e0       	ldi	r23, 0x00	; 0
      c8:	80 e0       	ldi	r24, 0x00	; 0
      ca:	90 e0       	ldi	r25, 0x00	; 0
      cc:	0e 94 a8 01 	call	0x350	; 0x350 <SwDelay_ms>
    SPI_SendByte(gu8_Time);
      d0:	80 91 99 00 	lds	r24, 0x0099
      d4:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <SPI_SendByte>
    UART_SendByte('G');
      d8:	87 e4       	ldi	r24, 0x47	; 71
      da:	0e 94 08 15 	call	0x2a10	; 0x2a10 <UART_SendByte>
    Timer_Start(TIMER_CH1, COUNTS_FOR_ONE_SECOND);
      de:	69 e0       	ldi	r22, 0x09	; 9
      e0:	7d e3       	ldi	r23, 0x3D	; 61
      e2:	81 e0       	ldi	r24, 0x01	; 1
      e4:	0e 94 50 10 	call	0x20a0	; 0x20a0 <Timer_Start>
    gu8_Time++;
      e8:	80 91 99 00 	lds	r24, 0x0099
      ec:	8f 5f       	subi	r24, 0xFF	; 255
      ee:	80 93 99 00 	sts	0x0099, r24
    UART_SendByte(gu8_Speed);
      f2:	80 91 96 00 	lds	r24, 0x0096
      f6:	0e 94 08 15 	call	0x2a10	; 0x2a10 <UART_SendByte>
    UART_SendByte(gu8_Time);
      fa:	80 91 99 00 	lds	r24, 0x0099
      fe:	0e 94 08 15 	call	0x2a10	; 0x2a10 <UART_SendByte>
    return E_OK;
     102:	80 e0       	ldi	r24, 0x00	; 0
}
     104:	cf 91       	pop	r28
     106:	df 91       	pop	r29
     108:	08 95       	ret

0000010a <StateMachine_init>:
*                       E_OK -> Functions finished successfully
*                       E_NOK-> Function terminated unsuccessfully
*   @Description:    The function initiates Timer module, External interrupt, UART, SPI, Push button
********************************************************************************************************/
ERROR_STATUS StateMachine_init (void)
{
     10a:	df 93       	push	r29
     10c:	cf 93       	push	r28
     10e:	cd b7       	in	r28, 0x3d	; 61
     110:	de b7       	in	r29, 0x3e	; 62
     112:	e1 97       	sbiw	r28, 0x31	; 49
     114:	0f b6       	in	r0, 0x3f	; 63
     116:	f8 94       	cli
     118:	de bf       	out	0x3e, r29	; 62
     11a:	0f be       	out	0x3f, r0	; 63
     11c:	cd bf       	out	0x3d, r28	; 61
    ExternInt_Cfg_s ExInt_Object = {EXTRN_INT_1, RISING_EDGE, ExInt_CBK_StartTimer};
     11e:	81 e0       	ldi	r24, 0x01	; 1
     120:	89 83       	std	Y+1, r24	; 0x01
     122:	83 e0       	ldi	r24, 0x03	; 3
     124:	8a 83       	std	Y+2, r24	; 0x02
     126:	89 e4       	ldi	r24, 0x49	; 73
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	9c 83       	std	Y+4, r25	; 0x04
     12c:	8b 83       	std	Y+3, r24	; 0x03
    if (ExternInt_Init ( &ExInt_Object) == E_NOK)
     12e:	ce 01       	movw	r24, r28
     130:	01 96       	adiw	r24, 0x01	; 1
     132:	0e 94 4d 05 	call	0xa9a	; 0xa9a <ExternInt_Init>
     136:	81 30       	cpi	r24, 0x01	; 1
     138:	19 f4       	brne	.+6      	; 0x140 <StateMachine_init+0x36>
    {
        return E_NOK;
     13a:	81 e0       	ldi	r24, 0x01	; 1
     13c:	8a a3       	std	Y+34, r24	; 0x22
     13e:	94 c0       	rjmp	.+296    	; 0x268 <StateMachine_init+0x15e>
    }

    if (ExternInt_Enable(EXTRN_INT_1) == E_NOK)
     140:	81 e0       	ldi	r24, 0x01	; 1
     142:	0e 94 ab 06 	call	0xd56	; 0xd56 <ExternInt_Enable>
     146:	81 30       	cpi	r24, 0x01	; 1
     148:	19 f4       	brne	.+6      	; 0x150 <StateMachine_init+0x46>
    {
        return E_NOK;
     14a:	91 e0       	ldi	r25, 0x01	; 1
     14c:	9a a3       	std	Y+34, r25	; 0x22
     14e:	8c c0       	rjmp	.+280    	; 0x268 <StateMachine_init+0x15e>
    }

    SPI_Cfg_s SPI_Object = {MASTER, MODE_0, LSB, POLLING, SPI_PRESCALER_128, NULL};
     150:	fe 01       	movw	r30, r28
     152:	35 96       	adiw	r30, 0x05	; 5
     154:	fc a3       	std	Y+36, r31	; 0x24
     156:	eb a3       	std	Y+35, r30	; 0x23
     158:	87 e7       	ldi	r24, 0x77	; 119
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	9e a3       	std	Y+38, r25	; 0x26
     15e:	8d a3       	std	Y+37, r24	; 0x25
     160:	97 e0       	ldi	r25, 0x07	; 7
     162:	9f a3       	std	Y+39, r25	; 0x27
     164:	ed a1       	ldd	r30, Y+37	; 0x25
     166:	fe a1       	ldd	r31, Y+38	; 0x26
     168:	00 80       	ld	r0, Z
     16a:	8d a1       	ldd	r24, Y+37	; 0x25
     16c:	9e a1       	ldd	r25, Y+38	; 0x26
     16e:	01 96       	adiw	r24, 0x01	; 1
     170:	9e a3       	std	Y+38, r25	; 0x26
     172:	8d a3       	std	Y+37, r24	; 0x25
     174:	eb a1       	ldd	r30, Y+35	; 0x23
     176:	fc a1       	ldd	r31, Y+36	; 0x24
     178:	00 82       	st	Z, r0
     17a:	8b a1       	ldd	r24, Y+35	; 0x23
     17c:	9c a1       	ldd	r25, Y+36	; 0x24
     17e:	01 96       	adiw	r24, 0x01	; 1
     180:	9c a3       	std	Y+36, r25	; 0x24
     182:	8b a3       	std	Y+35, r24	; 0x23
     184:	9f a1       	ldd	r25, Y+39	; 0x27
     186:	91 50       	subi	r25, 0x01	; 1
     188:	9f a3       	std	Y+39, r25	; 0x27
     18a:	ef a1       	ldd	r30, Y+39	; 0x27
     18c:	ee 23       	and	r30, r30
     18e:	51 f7       	brne	.-44     	; 0x164 <StateMachine_init+0x5a>
    if (SPI_Init( &SPI_Object) == E_NOK)
     190:	ce 01       	movw	r24, r28
     192:	05 96       	adiw	r24, 0x05	; 5
     194:	0e 94 e6 09 	call	0x13cc	; 0x13cc <SPI_Init>
     198:	81 30       	cpi	r24, 0x01	; 1
     19a:	19 f4       	brne	.+6      	; 0x1a2 <StateMachine_init+0x98>
    {
        return E_NOK;
     19c:	f1 e0       	ldi	r31, 0x01	; 1
     19e:	fa a3       	std	Y+34, r31	; 0x22
     1a0:	63 c0       	rjmp	.+198    	; 0x268 <StateMachine_init+0x15e>
    }

    Timer_cfg_s TimerObject ={TIMER_CH1, TIMER_MODE,
     TIMER_INTERRUPT_MODE, TIMER_PRESCALER_1024, Timer_CBK_OverflowCount};
     1a2:	ce 01       	movw	r24, r28
     1a4:	0c 96       	adiw	r24, 0x0c	; 12
     1a6:	99 a7       	std	Y+41, r25	; 0x29
     1a8:	88 a7       	std	Y+40, r24	; 0x28
     1aa:	e1 e7       	ldi	r30, 0x71	; 113
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	fb a7       	std	Y+43, r31	; 0x2b
     1b0:	ea a7       	std	Y+42, r30	; 0x2a
     1b2:	f6 e0       	ldi	r31, 0x06	; 6
     1b4:	fc a7       	std	Y+44, r31	; 0x2c
     1b6:	ea a5       	ldd	r30, Y+42	; 0x2a
     1b8:	fb a5       	ldd	r31, Y+43	; 0x2b
     1ba:	00 80       	ld	r0, Z
     1bc:	8a a5       	ldd	r24, Y+42	; 0x2a
     1be:	9b a5       	ldd	r25, Y+43	; 0x2b
     1c0:	01 96       	adiw	r24, 0x01	; 1
     1c2:	9b a7       	std	Y+43, r25	; 0x2b
     1c4:	8a a7       	std	Y+42, r24	; 0x2a
     1c6:	e8 a5       	ldd	r30, Y+40	; 0x28
     1c8:	f9 a5       	ldd	r31, Y+41	; 0x29
     1ca:	00 82       	st	Z, r0
     1cc:	88 a5       	ldd	r24, Y+40	; 0x28
     1ce:	99 a5       	ldd	r25, Y+41	; 0x29
     1d0:	01 96       	adiw	r24, 0x01	; 1
     1d2:	99 a7       	std	Y+41, r25	; 0x29
     1d4:	88 a7       	std	Y+40, r24	; 0x28
     1d6:	9c a5       	ldd	r25, Y+44	; 0x2c
     1d8:	91 50       	subi	r25, 0x01	; 1
     1da:	9c a7       	std	Y+44, r25	; 0x2c
     1dc:	ec a5       	ldd	r30, Y+44	; 0x2c
     1de:	ee 23       	and	r30, r30
     1e0:	51 f7       	brne	.-44     	; 0x1b6 <StateMachine_init+0xac>
    if (Timer_Init( &TimerObject) == E_NOK)
     1e2:	ce 01       	movw	r24, r28
     1e4:	0c 96       	adiw	r24, 0x0c	; 12
     1e6:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <Timer_Init>
     1ea:	81 30       	cpi	r24, 0x01	; 1
     1ec:	19 f4       	brne	.+6      	; 0x1f4 <StateMachine_init+0xea>
    {
        return E_NOK;
     1ee:	f1 e0       	ldi	r31, 0x01	; 1
     1f0:	fa a3       	std	Y+34, r31	; 0x22
     1f2:	3a c0       	rjmp	.+116    	; 0x268 <StateMachine_init+0x15e>
    }

    UART_cfg_s UARTObject = {UART_POLLING, TRANSCEIVER,
    UART_NO_DOUBLE_SPEED, UART_ONE_STOP_BIT, UART_NO_PARITY,
    UART_8_BIT, 9600, NULL, NULL, NULL};
     1f4:	ce 01       	movw	r24, r28
     1f6:	42 96       	adiw	r24, 0x12	; 18
     1f8:	9e a7       	std	Y+46, r25	; 0x2e
     1fa:	8d a7       	std	Y+45, r24	; 0x2d
     1fc:	e1 e6       	ldi	r30, 0x61	; 97
     1fe:	f0 e0       	ldi	r31, 0x00	; 0
     200:	f8 ab       	std	Y+48, r31	; 0x30
     202:	ef a7       	std	Y+47, r30	; 0x2f
     204:	f0 e1       	ldi	r31, 0x10	; 16
     206:	f9 ab       	std	Y+49, r31	; 0x31
     208:	ef a5       	ldd	r30, Y+47	; 0x2f
     20a:	f8 a9       	ldd	r31, Y+48	; 0x30
     20c:	00 80       	ld	r0, Z
     20e:	8f a5       	ldd	r24, Y+47	; 0x2f
     210:	98 a9       	ldd	r25, Y+48	; 0x30
     212:	01 96       	adiw	r24, 0x01	; 1
     214:	98 ab       	std	Y+48, r25	; 0x30
     216:	8f a7       	std	Y+47, r24	; 0x2f
     218:	ed a5       	ldd	r30, Y+45	; 0x2d
     21a:	fe a5       	ldd	r31, Y+46	; 0x2e
     21c:	00 82       	st	Z, r0
     21e:	8d a5       	ldd	r24, Y+45	; 0x2d
     220:	9e a5       	ldd	r25, Y+46	; 0x2e
     222:	01 96       	adiw	r24, 0x01	; 1
     224:	9e a7       	std	Y+46, r25	; 0x2e
     226:	8d a7       	std	Y+45, r24	; 0x2d
     228:	99 a9       	ldd	r25, Y+49	; 0x31
     22a:	91 50       	subi	r25, 0x01	; 1
     22c:	99 ab       	std	Y+49, r25	; 0x31
     22e:	e9 a9       	ldd	r30, Y+49	; 0x31
     230:	ee 23       	and	r30, r30
     232:	51 f7       	brne	.-44     	; 0x208 <StateMachine_init+0xfe>

    if (UART_Init( &UARTObject) == E_NOK)
     234:	ce 01       	movw	r24, r28
     236:	42 96       	adiw	r24, 0x12	; 18
     238:	0e 94 3a 13 	call	0x2674	; 0x2674 <UART_Init>
     23c:	81 30       	cpi	r24, 0x01	; 1
     23e:	19 f4       	brne	.+6      	; 0x246 <StateMachine_init+0x13c>
    {
        return E_NOK;
     240:	f1 e0       	ldi	r31, 0x01	; 1
     242:	fa a3       	std	Y+34, r31	; 0x22
     244:	11 c0       	rjmp	.+34     	; 0x268 <StateMachine_init+0x15e>
    }

    if (BTN_Init(BTN_0) == E_NOK)
     246:	80 e0       	ldi	r24, 0x00	; 0
     248:	0e 94 12 02 	call	0x424	; 0x424 <BTN_Init>
     24c:	81 30       	cpi	r24, 0x01	; 1
     24e:	19 f4       	brne	.+6      	; 0x256 <StateMachine_init+0x14c>
    {
        return E_NOK;
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	8a a3       	std	Y+34, r24	; 0x22
     254:	09 c0       	rjmp	.+18     	; 0x268 <StateMachine_init+0x15e>
    }
    if (BTN_Init(BTN_1) == E_NOK)
     256:	81 e0       	ldi	r24, 0x01	; 1
     258:	0e 94 12 02 	call	0x424	; 0x424 <BTN_Init>
     25c:	81 30       	cpi	r24, 0x01	; 1
     25e:	19 f4       	brne	.+6      	; 0x266 <StateMachine_init+0x15c>
    {
        return E_NOK;
     260:	91 e0       	ldi	r25, 0x01	; 1
     262:	9a a3       	std	Y+34, r25	; 0x22
     264:	01 c0       	rjmp	.+2      	; 0x268 <StateMachine_init+0x15e>
    }
    return E_OK;
     266:	1a a2       	std	Y+34, r1	; 0x22
     268:	8a a1       	ldd	r24, Y+34	; 0x22
}
     26a:	e1 96       	adiw	r28, 0x31	; 49
     26c:	0f b6       	in	r0, 0x3f	; 63
     26e:	f8 94       	cli
     270:	de bf       	out	0x3e, r29	; 62
     272:	0f be       	out	0x3f, r0	; 63
     274:	cd bf       	out	0x3d, r28	; 61
     276:	cf 91       	pop	r28
     278:	df 91       	pop	r29
     27a:	08 95       	ret

0000027c <WaitForSpeedInit>:
*                       E_OK -> Functions finished successfully
*                       E_NOK-> Function terminated unsuccessfully
*   @Description:    The function waits until speed is received from the PC to start communication
**************************************************************************************************/
ERROR_STATUS WaitForSpeedInit(void)
{
     27c:	df 93       	push	r29
     27e:	cf 93       	push	r28
     280:	cd b7       	in	r28, 0x3d	; 61
     282:	de b7       	in	r29, 0x3e	; 62

    UART_ReceiveByte(&gu8_Speed);
     284:	86 e9       	ldi	r24, 0x96	; 150
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	0e 94 22 15 	call	0x2a44	; 0x2a44 <UART_ReceiveByte>
    UART_SendByte('E');
     28c:	85 e4       	ldi	r24, 0x45	; 69
     28e:	0e 94 08 15 	call	0x2a10	; 0x2a10 <UART_SendByte>
    return E_OK;
     292:	80 e0       	ldi	r24, 0x00	; 0
}
     294:	cf 91       	pop	r28
     296:	df 91       	pop	r29
     298:	08 95       	ret

0000029a <WaitForTimeInit>:
*                       E_OK -> Functions finished successfully
*                       E_NOK-> Function terminated unsuccessfully
*   @Description:    The function waits until speed is received from the PC to start communication
**************************************************************************************************/
ERROR_STATUS WaitForTimeInit(void)
{
     29a:	df 93       	push	r29
     29c:	cf 93       	push	r28
     29e:	cd b7       	in	r28, 0x3d	; 61
     2a0:	de b7       	in	r29, 0x3e	; 62

    UART_ReceiveByte(&gu8_Time);
     2a2:	89 e9       	ldi	r24, 0x99	; 153
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	0e 94 22 15 	call	0x2a44	; 0x2a44 <UART_ReceiveByte>
    UART_SendByte('E');
     2aa:	85 e4       	ldi	r24, 0x45	; 69
     2ac:	0e 94 08 15 	call	0x2a10	; 0x2a10 <UART_SendByte>
    Timer_Start(TIMER_CH1, COUNTS_FOR_ONE_SECOND);
     2b0:	69 e0       	ldi	r22, 0x09	; 9
     2b2:	7d e3       	ldi	r23, 0x3D	; 61
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	0e 94 50 10 	call	0x20a0	; 0x20a0 <Timer_Start>
    return E_OK;
     2ba:	80 e0       	ldi	r24, 0x00	; 0
}
     2bc:	cf 91       	pop	r28
     2be:	df 91       	pop	r29
     2c0:	08 95       	ret

000002c2 <SpeedChange>:
*                       E_OK -> Functions finished successfully
*                       E_NOK-> Function terminated unsuccessfully
*   @Description:    The function Checks for speed change
**************************************************************************************************/
ERROR_STATUS SpeedChange(void)
{
     2c2:	df 93       	push	r29
     2c4:	cf 93       	push	r28
     2c6:	00 d0       	rcall	.+0      	; 0x2c8 <SpeedChange+0x6>
     2c8:	cd b7       	in	r28, 0x3d	; 61
     2ca:	de b7       	in	r29, 0x3e	; 62
    bool b_btnStatus = FALSE;
     2cc:	19 82       	std	Y+1, r1	; 0x01
    if (BTN_GetStatus(INC_BTN, &b_btnStatus) == E_NOK)
     2ce:	ce 01       	movw	r24, r28
     2d0:	01 96       	adiw	r24, 0x01	; 1
     2d2:	bc 01       	movw	r22, r24
     2d4:	80 e0       	ldi	r24, 0x00	; 0
     2d6:	0e 94 44 02 	call	0x488	; 0x488 <BTN_GetStatus>
     2da:	81 30       	cpi	r24, 0x01	; 1
     2dc:	19 f4       	brne	.+6      	; 0x2e4 <SpeedChange+0x22>
    {
        return E_NOK;
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	8a 83       	std	Y+2, r24	; 0x02
     2e2:	30 c0       	rjmp	.+96     	; 0x344 <SpeedChange+0x82>
    }
    if (b_btnStatus == PRESSED)
     2e4:	89 81       	ldd	r24, Y+1	; 0x01
     2e6:	8f 3f       	cpi	r24, 0xFF	; 255
     2e8:	49 f4       	brne	.+18     	; 0x2fc <SpeedChange+0x3a>
    {
            /* To handle overflow */
        if (gu8_Speed < 255)
     2ea:	80 91 96 00 	lds	r24, 0x0096
     2ee:	8f 3f       	cpi	r24, 0xFF	; 255
     2f0:	29 f0       	breq	.+10     	; 0x2fc <SpeedChange+0x3a>
        {
            gu8_Speed ++;
     2f2:	80 91 96 00 	lds	r24, 0x0096
     2f6:	8f 5f       	subi	r24, 0xFF	; 255
     2f8:	80 93 96 00 	sts	0x0096, r24
        }
        }
    SwDelay_ms(100);
     2fc:	64 e6       	ldi	r22, 0x64	; 100
     2fe:	70 e0       	ldi	r23, 0x00	; 0
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	0e 94 a8 01 	call	0x350	; 0x350 <SwDelay_ms>
    if (BTN_GetStatus(DEC_BTN, &b_btnStatus) == E_NOK)
     308:	ce 01       	movw	r24, r28
     30a:	01 96       	adiw	r24, 0x01	; 1
     30c:	bc 01       	movw	r22, r24
     30e:	81 e0       	ldi	r24, 0x01	; 1
     310:	0e 94 44 02 	call	0x488	; 0x488 <BTN_GetStatus>
     314:	81 30       	cpi	r24, 0x01	; 1
     316:	19 f4       	brne	.+6      	; 0x31e <SpeedChange+0x5c>
    {
        return E_NOK;
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	8a 83       	std	Y+2, r24	; 0x02
     31c:	13 c0       	rjmp	.+38     	; 0x344 <SpeedChange+0x82>
    }
    if (b_btnStatus == PRESSED)
     31e:	89 81       	ldd	r24, Y+1	; 0x01
     320:	8f 3f       	cpi	r24, 0xFF	; 255
     322:	49 f4       	brne	.+18     	; 0x336 <SpeedChange+0x74>
    {
            /* To handle underflow */
        if (gu8_Speed > 1)
     324:	80 91 96 00 	lds	r24, 0x0096
     328:	82 30       	cpi	r24, 0x02	; 2
     32a:	28 f0       	brcs	.+10     	; 0x336 <SpeedChange+0x74>
        {
            gu8_Speed --;
     32c:	80 91 96 00 	lds	r24, 0x0096
     330:	81 50       	subi	r24, 0x01	; 1
     332:	80 93 96 00 	sts	0x0096, r24
        }
    }
    SwDelay_ms(100);
     336:	64 e6       	ldi	r22, 0x64	; 100
     338:	70 e0       	ldi	r23, 0x00	; 0
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	0e 94 a8 01 	call	0x350	; 0x350 <SwDelay_ms>
    return E_OK;
     342:	1a 82       	std	Y+2, r1	; 0x02
     344:	8a 81       	ldd	r24, Y+2	; 0x02
}
     346:	0f 90       	pop	r0
     348:	0f 90       	pop	r0
     34a:	cf 91       	pop	r28
     34c:	df 91       	pop	r29
     34e:	08 95       	ret

00000350 <SwDelay_ms>:
/**
 * Description: this delay function operate in a polling manner
 * 				don't use it with RTOSs
 * @param n: the milli-seconds
 */
void SwDelay_ms(uint32 n) {
     350:	df 93       	push	r29
     352:	cf 93       	push	r28
     354:	cd b7       	in	r28, 0x3d	; 61
     356:	de b7       	in	r29, 0x3e	; 62
     358:	28 97       	sbiw	r28, 0x08	; 8
     35a:	0f b6       	in	r0, 0x3f	; 63
     35c:	f8 94       	cli
     35e:	de bf       	out	0x3e, r29	; 62
     360:	0f be       	out	0x3f, r0	; 63
     362:	cd bf       	out	0x3d, r28	; 61
     364:	6d 83       	std	Y+5, r22	; 0x05
     366:	7e 83       	std	Y+6, r23	; 0x06
     368:	8f 83       	std	Y+7, r24	; 0x07
     36a:	98 87       	std	Y+8, r25	; 0x08
	 }
	 }
	 }
	 */

	for (i = 0; i < n * 220; i++) {
     36c:	19 82       	std	Y+1, r1	; 0x01
     36e:	1a 82       	std	Y+2, r1	; 0x02
     370:	1b 82       	std	Y+3, r1	; 0x03
     372:	1c 82       	std	Y+4, r1	; 0x04
     374:	0b c0       	rjmp	.+22     	; 0x38c <SwDelay_ms+0x3c>
     376:	89 81       	ldd	r24, Y+1	; 0x01
     378:	9a 81       	ldd	r25, Y+2	; 0x02
     37a:	ab 81       	ldd	r26, Y+3	; 0x03
     37c:	bc 81       	ldd	r27, Y+4	; 0x04
     37e:	01 96       	adiw	r24, 0x01	; 1
     380:	a1 1d       	adc	r26, r1
     382:	b1 1d       	adc	r27, r1
     384:	89 83       	std	Y+1, r24	; 0x01
     386:	9a 83       	std	Y+2, r25	; 0x02
     388:	ab 83       	std	Y+3, r26	; 0x03
     38a:	bc 83       	std	Y+4, r27	; 0x04
     38c:	8d 81       	ldd	r24, Y+5	; 0x05
     38e:	9e 81       	ldd	r25, Y+6	; 0x06
     390:	af 81       	ldd	r26, Y+7	; 0x07
     392:	b8 85       	ldd	r27, Y+8	; 0x08
     394:	2c ed       	ldi	r18, 0xDC	; 220
     396:	30 e0       	ldi	r19, 0x00	; 0
     398:	40 e0       	ldi	r20, 0x00	; 0
     39a:	50 e0       	ldi	r21, 0x00	; 0
     39c:	bc 01       	movw	r22, r24
     39e:	cd 01       	movw	r24, r26
     3a0:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <__mulsi3>
     3a4:	9b 01       	movw	r18, r22
     3a6:	ac 01       	movw	r20, r24
     3a8:	89 81       	ldd	r24, Y+1	; 0x01
     3aa:	9a 81       	ldd	r25, Y+2	; 0x02
     3ac:	ab 81       	ldd	r26, Y+3	; 0x03
     3ae:	bc 81       	ldd	r27, Y+4	; 0x04
     3b0:	82 17       	cp	r24, r18
     3b2:	93 07       	cpc	r25, r19
     3b4:	a4 07       	cpc	r26, r20
     3b6:	b5 07       	cpc	r27, r21
     3b8:	f0 f2       	brcs	.-68     	; 0x376 <SwDelay_ms+0x26>
		/*for (j = 0; j < (n * 1000); j++) {

		 }*/
	}
}
     3ba:	28 96       	adiw	r28, 0x08	; 8
     3bc:	0f b6       	in	r0, 0x3f	; 63
     3be:	f8 94       	cli
     3c0:	de bf       	out	0x3e, r29	; 62
     3c2:	0f be       	out	0x3f, r0	; 63
     3c4:	cd bf       	out	0x3d, r28	; 61
     3c6:	cf 91       	pop	r28
     3c8:	df 91       	pop	r29
     3ca:	08 95       	ret

000003cc <SwDelay_us>:
/**
 * Description: this delay function operate in a polling manner
 * 				don't use it with RTOSs
 * @param n: the micro-seconds
 */
void SwDelay_us(uint32 n){
     3cc:	df 93       	push	r29
     3ce:	cf 93       	push	r28
     3d0:	00 d0       	rcall	.+0      	; 0x3d2 <SwDelay_us+0x6>
     3d2:	00 d0       	rcall	.+0      	; 0x3d4 <SwDelay_us+0x8>
     3d4:	0f 92       	push	r0
     3d6:	cd b7       	in	r28, 0x3d	; 61
     3d8:	de b7       	in	r29, 0x3e	; 62
     3da:	69 83       	std	Y+1, r22	; 0x01
     3dc:	7a 83       	std	Y+2, r23	; 0x02
     3de:	8b 83       	std	Y+3, r24	; 0x03
     3e0:	9c 83       	std	Y+4, r25	; 0x04
	while(n--);
     3e2:	1d 82       	std	Y+5, r1	; 0x05
     3e4:	89 81       	ldd	r24, Y+1	; 0x01
     3e6:	9a 81       	ldd	r25, Y+2	; 0x02
     3e8:	ab 81       	ldd	r26, Y+3	; 0x03
     3ea:	bc 81       	ldd	r27, Y+4	; 0x04
     3ec:	00 97       	sbiw	r24, 0x00	; 0
     3ee:	a1 05       	cpc	r26, r1
     3f0:	b1 05       	cpc	r27, r1
     3f2:	11 f0       	breq	.+4      	; 0x3f8 <SwDelay_us+0x2c>
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	8d 83       	std	Y+5, r24	; 0x05
     3f8:	89 81       	ldd	r24, Y+1	; 0x01
     3fa:	9a 81       	ldd	r25, Y+2	; 0x02
     3fc:	ab 81       	ldd	r26, Y+3	; 0x03
     3fe:	bc 81       	ldd	r27, Y+4	; 0x04
     400:	01 97       	sbiw	r24, 0x01	; 1
     402:	a1 09       	sbc	r26, r1
     404:	b1 09       	sbc	r27, r1
     406:	89 83       	std	Y+1, r24	; 0x01
     408:	9a 83       	std	Y+2, r25	; 0x02
     40a:	ab 83       	std	Y+3, r26	; 0x03
     40c:	bc 83       	std	Y+4, r27	; 0x04
     40e:	8d 81       	ldd	r24, Y+5	; 0x05
     410:	88 23       	and	r24, r24
     412:	39 f7       	brne	.-50     	; 0x3e2 <SwDelay_us+0x16>
}
     414:	0f 90       	pop	r0
     416:	0f 90       	pop	r0
     418:	0f 90       	pop	r0
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
     41e:	cf 91       	pop	r28
     420:	df 91       	pop	r29
     422:	08 95       	ret

00000424 <BTN_Init>:
 * @Return: ERROR_STATUS -> check if there any error occurs, would return E_NOK else it would return E_OK.
 * @Description: Initiate the pin of button as input.
 *	event of interrupt.
 ****************************************************************************/
ERROR_STATUS BTN_Init(uint8 u8_buttonId)
{
     424:	df 93       	push	r29
     426:	cf 93       	push	r28
     428:	00 d0       	rcall	.+0      	; 0x42a <BTN_Init+0x6>
     42a:	00 d0       	rcall	.+0      	; 0x42c <BTN_Init+0x8>
     42c:	00 d0       	rcall	.+0      	; 0x42e <BTN_Init+0xa>
     42e:	cd b7       	in	r28, 0x3d	; 61
     430:	de b7       	in	r29, 0x3e	; 62
     432:	8c 83       	std	Y+4, r24	; 0x04
	DIO_Cfg_s ST_btnDio = {0};
     434:	83 e0       	ldi	r24, 0x03	; 3
     436:	fe 01       	movw	r30, r28
     438:	31 96       	adiw	r30, 0x01	; 1
     43a:	df 01       	movw	r26, r30
     43c:	98 2f       	mov	r25, r24
     43e:	1d 92       	st	X+, r1
     440:	9a 95       	dec	r25
     442:	e9 f7       	brne	.-6      	; 0x43e <BTN_Init+0x1a>
	ST_btnDio.GPIO = BTN_GPIO(u8_buttonId);
     444:	8c 81       	ldd	r24, Y+4	; 0x04
     446:	88 23       	and	r24, r24
     448:	19 f0       	breq	.+6      	; 0x450 <BTN_Init+0x2c>
     44a:	a1 e0       	ldi	r26, 0x01	; 1
     44c:	ae 83       	std	Y+6, r26	; 0x06
     44e:	02 c0       	rjmp	.+4      	; 0x454 <BTN_Init+0x30>
     450:	b2 e0       	ldi	r27, 0x02	; 2
     452:	be 83       	std	Y+6, r27	; 0x06
     454:	8e 81       	ldd	r24, Y+6	; 0x06
     456:	89 83       	std	Y+1, r24	; 0x01
	ST_btnDio.pins = BTN_BIT(u8_buttonId);
     458:	8c 81       	ldd	r24, Y+4	; 0x04
     45a:	88 23       	and	r24, r24
     45c:	19 f0       	breq	.+6      	; 0x464 <BTN_Init+0x40>
     45e:	94 e0       	ldi	r25, 0x04	; 4
     460:	9d 83       	std	Y+5, r25	; 0x05
     462:	02 c0       	rjmp	.+4      	; 0x468 <BTN_Init+0x44>
     464:	a0 e1       	ldi	r26, 0x10	; 16
     466:	ad 83       	std	Y+5, r26	; 0x05
     468:	bd 81       	ldd	r27, Y+5	; 0x05
     46a:	ba 83       	std	Y+2, r27	; 0x02
	ST_btnDio.dir = INPUT;
     46c:	1b 82       	std	Y+3, r1	; 0x03
	return DIO_init(&ST_btnDio);
     46e:	ce 01       	movw	r24, r28
     470:	01 96       	adiw	r24, 0x01	; 1
     472:	0e 94 06 03 	call	0x60c	; 0x60c <DIO_init>
}
     476:	26 96       	adiw	r28, 0x06	; 6
     478:	0f b6       	in	r0, 0x3f	; 63
     47a:	f8 94       	cli
     47c:	de bf       	out	0x3e, r29	; 62
     47e:	0f be       	out	0x3f, r0	; 63
     480:	cd bf       	out	0x3d, r28	; 61
     482:	cf 91       	pop	r28
     484:	df 91       	pop	r29
     486:	08 95       	ret

00000488 <BTN_GetStatus>:
 * In Out:
 * Return: ERROR_STATUS -> check if there any error occurs, would return E_NOK else it would return E_OK.
 * Description: read ten stable status of the button and then return that status to avoid bouncing.
 */
ERROR_STATUS BTN_GetStatus(uint8 u8_buttonId,bool *ptru8_status)
{
     488:	df 93       	push	r29
     48a:	cf 93       	push	r28
     48c:	cd b7       	in	r28, 0x3d	; 61
     48e:	de b7       	in	r29, 0x3e	; 62
     490:	2c 97       	sbiw	r28, 0x0c	; 12
     492:	0f b6       	in	r0, 0x3f	; 63
     494:	f8 94       	cli
     496:	de bf       	out	0x3e, r29	; 62
     498:	0f be       	out	0x3f, r0	; 63
     49a:	cd bf       	out	0x3d, r28	; 61
     49c:	8d 83       	std	Y+5, r24	; 0x05
     49e:	7f 83       	std	Y+7, r23	; 0x07
     4a0:	6e 83       	std	Y+6, r22	; 0x06
    if (ptru8_status == NULL)
     4a2:	8e 81       	ldd	r24, Y+6	; 0x06
     4a4:	9f 81       	ldd	r25, Y+7	; 0x07
     4a6:	00 97       	sbiw	r24, 0x00	; 0
     4a8:	19 f4       	brne	.+6      	; 0x4b0 <BTN_GetStatus+0x28>
    {
        return E_NOK;
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	8c 87       	std	Y+12, r24	; 0x0c
     4ae:	6c c0       	rjmp	.+216    	; 0x588 <BTN_GetStatus+0x100>
    }
	 // The function reads the button continuously until it reads 10 similar readings in a row
	    uint8  u8_counts = 0;
     4b0:	1a 82       	std	Y+2, r1	; 0x02
	    bool bool_stableReading = FALSE;
     4b2:	19 82       	std	Y+1, r1	; 0x01
	    uint8 u8_initialStatus = RELEASED, u8_currentStatus = RELEASED;
     4b4:	1b 82       	std	Y+3, r1	; 0x03
     4b6:	1c 82       	std	Y+4, r1	; 0x04

	    /* read the button pin	*/
	    if( E_OK == DIO_Read(BTN_GPIO(u8_buttonId), BTN_BIT(u8_buttonId),  &u8_initialStatus))
     4b8:	8d 81       	ldd	r24, Y+5	; 0x05
     4ba:	88 23       	and	r24, r24
     4bc:	19 f0       	breq	.+6      	; 0x4c4 <BTN_GetStatus+0x3c>
     4be:	84 e0       	ldi	r24, 0x04	; 4
     4c0:	8b 87       	std	Y+11, r24	; 0x0b
     4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <BTN_GetStatus+0x40>
     4c4:	80 e1       	ldi	r24, 0x10	; 16
     4c6:	8b 87       	std	Y+11, r24	; 0x0b
     4c8:	8d 81       	ldd	r24, Y+5	; 0x05
     4ca:	88 23       	and	r24, r24
     4cc:	19 f0       	breq	.+6      	; 0x4d4 <BTN_GetStatus+0x4c>
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	8a 87       	std	Y+10, r24	; 0x0a
     4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <BTN_GetStatus+0x50>
     4d4:	82 e0       	ldi	r24, 0x02	; 2
     4d6:	8a 87       	std	Y+10, r24	; 0x0a
     4d8:	ce 01       	movw	r24, r28
     4da:	03 96       	adiw	r24, 0x03	; 3
     4dc:	ac 01       	movw	r20, r24
     4de:	6b 85       	ldd	r22, Y+11	; 0x0b
     4e0:	8a 85       	ldd	r24, Y+10	; 0x0a
     4e2:	0e 94 63 04 	call	0x8c6	; 0x8c6 <DIO_Read>
     4e6:	88 23       	and	r24, r24
     4e8:	09 f0       	breq	.+2      	; 0x4ec <BTN_GetStatus+0x64>
     4ea:	4c c0       	rjmp	.+152    	; 0x584 <BTN_GetStatus+0xfc>
     4ec:	45 c0       	rjmp	.+138    	; 0x578 <BTN_GetStatus+0xf0>
	    {
	    	while (bool_stableReading == FALSE)
	    	{
	    		/* check for ten reads that are the same*/
	    		if(E_OK ==DIO_Read(BTN_GPIO(u8_buttonId), BTN_BIT(u8_buttonId),  &u8_currentStatus))
     4ee:	8d 81       	ldd	r24, Y+5	; 0x05
     4f0:	88 23       	and	r24, r24
     4f2:	19 f0       	breq	.+6      	; 0x4fa <BTN_GetStatus+0x72>
     4f4:	84 e0       	ldi	r24, 0x04	; 4
     4f6:	89 87       	std	Y+9, r24	; 0x09
     4f8:	02 c0       	rjmp	.+4      	; 0x4fe <BTN_GetStatus+0x76>
     4fa:	80 e1       	ldi	r24, 0x10	; 16
     4fc:	89 87       	std	Y+9, r24	; 0x09
     4fe:	8d 81       	ldd	r24, Y+5	; 0x05
     500:	88 23       	and	r24, r24
     502:	19 f0       	breq	.+6      	; 0x50a <BTN_GetStatus+0x82>
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	88 87       	std	Y+8, r24	; 0x08
     508:	02 c0       	rjmp	.+4      	; 0x50e <BTN_GetStatus+0x86>
     50a:	82 e0       	ldi	r24, 0x02	; 2
     50c:	88 87       	std	Y+8, r24	; 0x08
     50e:	ce 01       	movw	r24, r28
     510:	04 96       	adiw	r24, 0x04	; 4
     512:	ac 01       	movw	r20, r24
     514:	69 85       	ldd	r22, Y+9	; 0x09
     516:	88 85       	ldd	r24, Y+8	; 0x08
     518:	0e 94 63 04 	call	0x8c6	; 0x8c6 <DIO_Read>
     51c:	88 23       	and	r24, r24
     51e:	61 f5       	brne	.+88     	; 0x578 <BTN_GetStatus+0xf0>
	    		{

	    			if (u8_initialStatus == u8_currentStatus)
     520:	9b 81       	ldd	r25, Y+3	; 0x03
     522:	8c 81       	ldd	r24, Y+4	; 0x04
     524:	98 17       	cp	r25, r24
     526:	29 f5       	brne	.+74     	; 0x572 <BTN_GetStatus+0xea>
	    			{
	    				u8_counts++;
     528:	8a 81       	ldd	r24, Y+2	; 0x02
     52a:	8f 5f       	subi	r24, 0xFF	; 255
     52c:	8a 83       	std	Y+2, r24	; 0x02
	    				if (u8_counts >= MAX_COUNTS)
     52e:	8a 81       	ldd	r24, Y+2	; 0x02
     530:	8a 30       	cpi	r24, 0x0A	; 10
     532:	10 f1       	brcs	.+68     	; 0x578 <BTN_GetStatus+0xf0>
	    				{
	    					gsau8_btnStatus[u8_buttonId] = u8_currentStatus;
     534:	8d 81       	ldd	r24, Y+5	; 0x05
     536:	88 2f       	mov	r24, r24
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	2c 81       	ldd	r18, Y+4	; 0x04
     53c:	fc 01       	movw	r30, r24
     53e:	e5 56       	subi	r30, 0x65	; 101
     540:	ff 4f       	sbci	r31, 0xFF	; 255
     542:	20 83       	st	Z, r18
	    					*ptru8_status = u8_currentStatus * PRESSED;
     544:	8c 81       	ldd	r24, Y+4	; 0x04
     546:	48 2f       	mov	r20, r24
     548:	50 e0       	ldi	r21, 0x00	; 0
     54a:	ca 01       	movw	r24, r20
     54c:	9c 01       	movw	r18, r24
     54e:	22 0f       	add	r18, r18
     550:	33 1f       	adc	r19, r19
     552:	c9 01       	movw	r24, r18
     554:	96 95       	lsr	r25
     556:	98 2f       	mov	r25, r24
     558:	88 27       	eor	r24, r24
     55a:	97 95       	ror	r25
     55c:	87 95       	ror	r24
     55e:	82 1b       	sub	r24, r18
     560:	93 0b       	sbc	r25, r19
     562:	84 0f       	add	r24, r20
     564:	95 1f       	adc	r25, r21
     566:	ee 81       	ldd	r30, Y+6	; 0x06
     568:	ff 81       	ldd	r31, Y+7	; 0x07
     56a:	80 83       	st	Z, r24
	    					bool_stableReading = TRUE;
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	89 83       	std	Y+1, r24	; 0x01
     570:	03 c0       	rjmp	.+6      	; 0x578 <BTN_GetStatus+0xf0>
	    				}
	    			}
	    			else
	    			{
	    				/*if they not equal to each other just start the ten reads again*/
	    				u8_initialStatus = u8_currentStatus;
     572:	8c 81       	ldd	r24, Y+4	; 0x04
     574:	8b 83       	std	Y+3, r24	; 0x03
	    				u8_counts = 0;
     576:	1a 82       	std	Y+2, r1	; 0x02
	    uint8 u8_initialStatus = RELEASED, u8_currentStatus = RELEASED;

	    /* read the button pin	*/
	    if( E_OK == DIO_Read(BTN_GPIO(u8_buttonId), BTN_BIT(u8_buttonId),  &u8_initialStatus))
	    {
	    	while (bool_stableReading == FALSE)
     578:	89 81       	ldd	r24, Y+1	; 0x01
     57a:	88 23       	and	r24, r24
     57c:	09 f4       	brne	.+2      	; 0x580 <BTN_GetStatus+0xf8>
     57e:	b7 cf       	rjmp	.-146    	; 0x4ee <BTN_GetStatus+0x66>
	    else
	    {
	    	return E_NOK;
	    }

	    return E_OK;
     580:	1c 86       	std	Y+12, r1	; 0x0c
     582:	02 c0       	rjmp	.+4      	; 0x588 <BTN_GetStatus+0x100>
	    		}
	    	}
	    }
	    else
	    {
	    	return E_NOK;
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	8c 87       	std	Y+12, r24	; 0x0c
     588:	8c 85       	ldd	r24, Y+12	; 0x0c
	    }

	    return E_OK;
}
     58a:	2c 96       	adiw	r28, 0x0c	; 12
     58c:	0f b6       	in	r0, 0x3f	; 63
     58e:	f8 94       	cli
     590:	de bf       	out	0x3e, r29	; 62
     592:	0f be       	out	0x3f, r0	; 63
     594:	cd bf       	out	0x3d, r28	; 61
     596:	cf 91       	pop	r28
     598:	df 91       	pop	r29
     59a:	08 95       	ret

0000059c <main>:
*   Date:       29/12/2019
*/

#include "StateMachine.h"
int main(void)
{
     59c:	df 93       	push	r29
     59e:	cf 93       	push	r28
     5a0:	00 d0       	rcall	.+0      	; 0x5a2 <main+0x6>
     5a2:	cd b7       	in	r28, 0x3d	; 61
     5a4:	de b7       	in	r29, 0x3e	; 62

    if (StateMachine_init() == E_NOK)
     5a6:	0e 94 85 00 	call	0x10a	; 0x10a <StateMachine_init>
     5aa:	81 30       	cpi	r24, 0x01	; 1
     5ac:	29 f4       	brne	.+10     	; 0x5b8 <main+0x1c>
    {
        return E_NOK;
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	9a 83       	std	Y+2, r25	; 0x02
     5b4:	89 83       	std	Y+1, r24	; 0x01
     5b6:	23 c0       	rjmp	.+70     	; 0x5fe <main+0x62>
    }
    UART_SendByte('A');
     5b8:	81 e4       	ldi	r24, 0x41	; 65
     5ba:	0e 94 08 15 	call	0x2a10	; 0x2a10 <UART_SendByte>

    if (WaitForSpeedInit() == E_NOK)
     5be:	0e 94 3e 01 	call	0x27c	; 0x27c <WaitForSpeedInit>
     5c2:	81 30       	cpi	r24, 0x01	; 1
     5c4:	29 f4       	brne	.+10     	; 0x5d0 <main+0x34>
    {

        return E_NOK;
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	9a 83       	std	Y+2, r25	; 0x02
     5cc:	89 83       	std	Y+1, r24	; 0x01
     5ce:	17 c0       	rjmp	.+46     	; 0x5fe <main+0x62>
    }
    UART_SendByte('B');
     5d0:	82 e4       	ldi	r24, 0x42	; 66
     5d2:	0e 94 08 15 	call	0x2a10	; 0x2a10 <UART_SendByte>

    if (WaitForTimeInit() == E_NOK)
     5d6:	0e 94 4d 01 	call	0x29a	; 0x29a <WaitForTimeInit>
     5da:	81 30       	cpi	r24, 0x01	; 1
     5dc:	29 f4       	brne	.+10     	; 0x5e8 <main+0x4c>
    {
        return E_NOK;
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	9a 83       	std	Y+2, r25	; 0x02
     5e4:	89 83       	std	Y+1, r24	; 0x01
     5e6:	0b c0       	rjmp	.+22     	; 0x5fe <main+0x62>
    }
    UART_SendByte('C');
     5e8:	83 e4       	ldi	r24, 0x43	; 67
     5ea:	0e 94 08 15 	call	0x2a10	; 0x2a10 <UART_SendByte>
    while(1)
    {
        if (SpeedChange() == E_NOK)
     5ee:	0e 94 61 01 	call	0x2c2	; 0x2c2 <SpeedChange>
     5f2:	81 30       	cpi	r24, 0x01	; 1
     5f4:	e1 f7       	brne	.-8      	; 0x5ee <main+0x52>
        {
            return E_NOK;
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	9a 83       	std	Y+2, r25	; 0x02
     5fc:	89 83       	std	Y+1, r24	; 0x01
        }
    }
     5fe:	89 81       	ldd	r24, Y+1	; 0x01
     600:	9a 81       	ldd	r25, Y+2	; 0x02
    return 0;
}
     602:	0f 90       	pop	r0
     604:	0f 90       	pop	r0
     606:	cf 91       	pop	r28
     608:	df 91       	pop	r29
     60a:	08 95       	ret

0000060c <DIO_init>:
*In/Out:
*Description: This function can set the direction of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
     60c:	df 93       	push	r29
     60e:	cf 93       	push	r28
     610:	00 d0       	rcall	.+0      	; 0x612 <DIO_init+0x6>
     612:	00 d0       	rcall	.+0      	; 0x614 <DIO_init+0x8>
     614:	0f 92       	push	r0
     616:	cd b7       	in	r28, 0x3d	; 61
     618:	de b7       	in	r29, 0x3e	; 62
     61a:	9a 83       	std	Y+2, r25	; 0x02
     61c:	89 83       	std	Y+1, r24	; 0x01
	switch (DIO_info->GPIO)
     61e:	e9 81       	ldd	r30, Y+1	; 0x01
     620:	fa 81       	ldd	r31, Y+2	; 0x02
     622:	80 81       	ld	r24, Z
     624:	28 2f       	mov	r18, r24
     626:	30 e0       	ldi	r19, 0x00	; 0
     628:	3d 83       	std	Y+5, r19	; 0x05
     62a:	2c 83       	std	Y+4, r18	; 0x04
     62c:	8c 81       	ldd	r24, Y+4	; 0x04
     62e:	9d 81       	ldd	r25, Y+5	; 0x05
     630:	81 30       	cpi	r24, 0x01	; 1
     632:	91 05       	cpc	r25, r1
     634:	d1 f1       	breq	.+116    	; 0x6aa <DIO_init+0x9e>
     636:	2c 81       	ldd	r18, Y+4	; 0x04
     638:	3d 81       	ldd	r19, Y+5	; 0x05
     63a:	22 30       	cpi	r18, 0x02	; 2
     63c:	31 05       	cpc	r19, r1
     63e:	2c f4       	brge	.+10     	; 0x64a <DIO_init+0x3e>
     640:	8c 81       	ldd	r24, Y+4	; 0x04
     642:	9d 81       	ldd	r25, Y+5	; 0x05
     644:	00 97       	sbiw	r24, 0x00	; 0
     646:	71 f0       	breq	.+28     	; 0x664 <DIO_init+0x58>
     648:	99 c0       	rjmp	.+306    	; 0x77c <DIO_init+0x170>
     64a:	2c 81       	ldd	r18, Y+4	; 0x04
     64c:	3d 81       	ldd	r19, Y+5	; 0x05
     64e:	22 30       	cpi	r18, 0x02	; 2
     650:	31 05       	cpc	r19, r1
     652:	09 f4       	brne	.+2      	; 0x656 <DIO_init+0x4a>
     654:	4d c0       	rjmp	.+154    	; 0x6f0 <DIO_init+0xe4>
     656:	8c 81       	ldd	r24, Y+4	; 0x04
     658:	9d 81       	ldd	r25, Y+5	; 0x05
     65a:	83 30       	cpi	r24, 0x03	; 3
     65c:	91 05       	cpc	r25, r1
     65e:	09 f4       	brne	.+2      	; 0x662 <DIO_init+0x56>
     660:	6a c0       	rjmp	.+212    	; 0x736 <DIO_init+0x12a>
     662:	8c c0       	rjmp	.+280    	; 0x77c <DIO_init+0x170>
	{
		case GPIOA:
		if (DIO_info->dir == HIGH)
     664:	e9 81       	ldd	r30, Y+1	; 0x01
     666:	fa 81       	ldd	r31, Y+2	; 0x02
     668:	82 81       	ldd	r24, Z+2	; 0x02
     66a:	8f 3f       	cpi	r24, 0xFF	; 255
     66c:	59 f4       	brne	.+22     	; 0x684 <DIO_init+0x78>
		{
			PORTA_DIR |= DIO_info->pins;
     66e:	aa e3       	ldi	r26, 0x3A	; 58
     670:	b0 e0       	ldi	r27, 0x00	; 0
     672:	ea e3       	ldi	r30, 0x3A	; 58
     674:	f0 e0       	ldi	r31, 0x00	; 0
     676:	90 81       	ld	r25, Z
     678:	e9 81       	ldd	r30, Y+1	; 0x01
     67a:	fa 81       	ldd	r31, Y+2	; 0x02
     67c:	81 81       	ldd	r24, Z+1	; 0x01
     67e:	89 2b       	or	r24, r25
     680:	8c 93       	st	X, r24
     682:	11 c0       	rjmp	.+34     	; 0x6a6 <DIO_init+0x9a>
		}
		else
		{
			DIO_info->pins ^= 0xFF;
     684:	e9 81       	ldd	r30, Y+1	; 0x01
     686:	fa 81       	ldd	r31, Y+2	; 0x02
     688:	81 81       	ldd	r24, Z+1	; 0x01
     68a:	80 95       	com	r24
     68c:	e9 81       	ldd	r30, Y+1	; 0x01
     68e:	fa 81       	ldd	r31, Y+2	; 0x02
     690:	81 83       	std	Z+1, r24	; 0x01
			PORTA_DIR &= DIO_info->pins;
     692:	aa e3       	ldi	r26, 0x3A	; 58
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ea e3       	ldi	r30, 0x3A	; 58
     698:	f0 e0       	ldi	r31, 0x00	; 0
     69a:	90 81       	ld	r25, Z
     69c:	e9 81       	ldd	r30, Y+1	; 0x01
     69e:	fa 81       	ldd	r31, Y+2	; 0x02
     6a0:	81 81       	ldd	r24, Z+1	; 0x01
     6a2:	89 23       	and	r24, r25
     6a4:	8c 93       	st	X, r24
		}
		return E_OK;
     6a6:	1b 82       	std	Y+3, r1	; 0x03
     6a8:	6b c0       	rjmp	.+214    	; 0x780 <DIO_init+0x174>

		case GPIOB:
		if (DIO_info->dir == HIGH)
     6aa:	e9 81       	ldd	r30, Y+1	; 0x01
     6ac:	fa 81       	ldd	r31, Y+2	; 0x02
     6ae:	82 81       	ldd	r24, Z+2	; 0x02
     6b0:	8f 3f       	cpi	r24, 0xFF	; 255
     6b2:	59 f4       	brne	.+22     	; 0x6ca <DIO_init+0xbe>
		{
			PORTB_DIR |= DIO_info->pins;
     6b4:	a7 e3       	ldi	r26, 0x37	; 55
     6b6:	b0 e0       	ldi	r27, 0x00	; 0
     6b8:	e7 e3       	ldi	r30, 0x37	; 55
     6ba:	f0 e0       	ldi	r31, 0x00	; 0
     6bc:	90 81       	ld	r25, Z
     6be:	e9 81       	ldd	r30, Y+1	; 0x01
     6c0:	fa 81       	ldd	r31, Y+2	; 0x02
     6c2:	81 81       	ldd	r24, Z+1	; 0x01
     6c4:	89 2b       	or	r24, r25
     6c6:	8c 93       	st	X, r24
     6c8:	11 c0       	rjmp	.+34     	; 0x6ec <DIO_init+0xe0>
		}
		else
		{
			DIO_info->pins ^= 0xFF;
     6ca:	e9 81       	ldd	r30, Y+1	; 0x01
     6cc:	fa 81       	ldd	r31, Y+2	; 0x02
     6ce:	81 81       	ldd	r24, Z+1	; 0x01
     6d0:	80 95       	com	r24
     6d2:	e9 81       	ldd	r30, Y+1	; 0x01
     6d4:	fa 81       	ldd	r31, Y+2	; 0x02
     6d6:	81 83       	std	Z+1, r24	; 0x01
			PORTB_DIR &= DIO_info->pins;
     6d8:	a7 e3       	ldi	r26, 0x37	; 55
     6da:	b0 e0       	ldi	r27, 0x00	; 0
     6dc:	e7 e3       	ldi	r30, 0x37	; 55
     6de:	f0 e0       	ldi	r31, 0x00	; 0
     6e0:	90 81       	ld	r25, Z
     6e2:	e9 81       	ldd	r30, Y+1	; 0x01
     6e4:	fa 81       	ldd	r31, Y+2	; 0x02
     6e6:	81 81       	ldd	r24, Z+1	; 0x01
     6e8:	89 23       	and	r24, r25
     6ea:	8c 93       	st	X, r24
		}
		return E_OK;
     6ec:	1b 82       	std	Y+3, r1	; 0x03
     6ee:	48 c0       	rjmp	.+144    	; 0x780 <DIO_init+0x174>

		case GPIOC:
		if (DIO_info->dir == HIGH)
     6f0:	e9 81       	ldd	r30, Y+1	; 0x01
     6f2:	fa 81       	ldd	r31, Y+2	; 0x02
     6f4:	82 81       	ldd	r24, Z+2	; 0x02
     6f6:	8f 3f       	cpi	r24, 0xFF	; 255
     6f8:	59 f4       	brne	.+22     	; 0x710 <DIO_init+0x104>
		{
			PORTC_DIR |= DIO_info->pins;
     6fa:	a4 e3       	ldi	r26, 0x34	; 52
     6fc:	b0 e0       	ldi	r27, 0x00	; 0
     6fe:	e4 e3       	ldi	r30, 0x34	; 52
     700:	f0 e0       	ldi	r31, 0x00	; 0
     702:	90 81       	ld	r25, Z
     704:	e9 81       	ldd	r30, Y+1	; 0x01
     706:	fa 81       	ldd	r31, Y+2	; 0x02
     708:	81 81       	ldd	r24, Z+1	; 0x01
     70a:	89 2b       	or	r24, r25
     70c:	8c 93       	st	X, r24
     70e:	11 c0       	rjmp	.+34     	; 0x732 <DIO_init+0x126>
		}
		else
		{
			DIO_info->pins ^= 0xFF;
     710:	e9 81       	ldd	r30, Y+1	; 0x01
     712:	fa 81       	ldd	r31, Y+2	; 0x02
     714:	81 81       	ldd	r24, Z+1	; 0x01
     716:	80 95       	com	r24
     718:	e9 81       	ldd	r30, Y+1	; 0x01
     71a:	fa 81       	ldd	r31, Y+2	; 0x02
     71c:	81 83       	std	Z+1, r24	; 0x01
			PORTC_DIR &= DIO_info->pins;
     71e:	a4 e3       	ldi	r26, 0x34	; 52
     720:	b0 e0       	ldi	r27, 0x00	; 0
     722:	e4 e3       	ldi	r30, 0x34	; 52
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	90 81       	ld	r25, Z
     728:	e9 81       	ldd	r30, Y+1	; 0x01
     72a:	fa 81       	ldd	r31, Y+2	; 0x02
     72c:	81 81       	ldd	r24, Z+1	; 0x01
     72e:	89 23       	and	r24, r25
     730:	8c 93       	st	X, r24
		}
		return E_OK;
     732:	1b 82       	std	Y+3, r1	; 0x03
     734:	25 c0       	rjmp	.+74     	; 0x780 <DIO_init+0x174>

		case GPIOD:
		if (DIO_info->dir== HIGH)
     736:	e9 81       	ldd	r30, Y+1	; 0x01
     738:	fa 81       	ldd	r31, Y+2	; 0x02
     73a:	82 81       	ldd	r24, Z+2	; 0x02
     73c:	8f 3f       	cpi	r24, 0xFF	; 255
     73e:	59 f4       	brne	.+22     	; 0x756 <DIO_init+0x14a>
		{
			PORTD_DIR |= DIO_info->pins;
     740:	a1 e3       	ldi	r26, 0x31	; 49
     742:	b0 e0       	ldi	r27, 0x00	; 0
     744:	e1 e3       	ldi	r30, 0x31	; 49
     746:	f0 e0       	ldi	r31, 0x00	; 0
     748:	90 81       	ld	r25, Z
     74a:	e9 81       	ldd	r30, Y+1	; 0x01
     74c:	fa 81       	ldd	r31, Y+2	; 0x02
     74e:	81 81       	ldd	r24, Z+1	; 0x01
     750:	89 2b       	or	r24, r25
     752:	8c 93       	st	X, r24
     754:	11 c0       	rjmp	.+34     	; 0x778 <DIO_init+0x16c>
		}
		else
		{
			DIO_info->pins ^= 0xFF;
     756:	e9 81       	ldd	r30, Y+1	; 0x01
     758:	fa 81       	ldd	r31, Y+2	; 0x02
     75a:	81 81       	ldd	r24, Z+1	; 0x01
     75c:	80 95       	com	r24
     75e:	e9 81       	ldd	r30, Y+1	; 0x01
     760:	fa 81       	ldd	r31, Y+2	; 0x02
     762:	81 83       	std	Z+1, r24	; 0x01
			PORTD_DIR &= DIO_info->pins;
     764:	a1 e3       	ldi	r26, 0x31	; 49
     766:	b0 e0       	ldi	r27, 0x00	; 0
     768:	e1 e3       	ldi	r30, 0x31	; 49
     76a:	f0 e0       	ldi	r31, 0x00	; 0
     76c:	90 81       	ld	r25, Z
     76e:	e9 81       	ldd	r30, Y+1	; 0x01
     770:	fa 81       	ldd	r31, Y+2	; 0x02
     772:	81 81       	ldd	r24, Z+1	; 0x01
     774:	89 23       	and	r24, r25
     776:	8c 93       	st	X, r24
		}
		return E_OK;
     778:	1b 82       	std	Y+3, r1	; 0x03
     77a:	02 c0       	rjmp	.+4      	; 0x780 <DIO_init+0x174>

		default:
		return E_NOK;
     77c:	91 e0       	ldi	r25, 0x01	; 1
     77e:	9b 83       	std	Y+3, r25	; 0x03
     780:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
     782:	0f 90       	pop	r0
     784:	0f 90       	pop	r0
     786:	0f 90       	pop	r0
     788:	0f 90       	pop	r0
     78a:	0f 90       	pop	r0
     78c:	cf 91       	pop	r28
     78e:	df 91       	pop	r29
     790:	08 95       	ret

00000792 <DIO_Write>:
*In/Out: No In/Out
*Description: This function can set the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Write (uint8 GPIO, uint8 pins, uint8 value)
{
     792:	df 93       	push	r29
     794:	cf 93       	push	r28
     796:	00 d0       	rcall	.+0      	; 0x798 <DIO_Write+0x6>
     798:	00 d0       	rcall	.+0      	; 0x79a <DIO_Write+0x8>
     79a:	00 d0       	rcall	.+0      	; 0x79c <DIO_Write+0xa>
     79c:	cd b7       	in	r28, 0x3d	; 61
     79e:	de b7       	in	r29, 0x3e	; 62
     7a0:	89 83       	std	Y+1, r24	; 0x01
     7a2:	6a 83       	std	Y+2, r22	; 0x02
     7a4:	4b 83       	std	Y+3, r20	; 0x03
	switch (GPIO)
     7a6:	89 81       	ldd	r24, Y+1	; 0x01
     7a8:	28 2f       	mov	r18, r24
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	3e 83       	std	Y+6, r19	; 0x06
     7ae:	2d 83       	std	Y+5, r18	; 0x05
     7b0:	8d 81       	ldd	r24, Y+5	; 0x05
     7b2:	9e 81       	ldd	r25, Y+6	; 0x06
     7b4:	81 30       	cpi	r24, 0x01	; 1
     7b6:	91 05       	cpc	r25, r1
     7b8:	79 f1       	breq	.+94     	; 0x818 <DIO_Write+0x86>
     7ba:	2d 81       	ldd	r18, Y+5	; 0x05
     7bc:	3e 81       	ldd	r19, Y+6	; 0x06
     7be:	22 30       	cpi	r18, 0x02	; 2
     7c0:	31 05       	cpc	r19, r1
     7c2:	2c f4       	brge	.+10     	; 0x7ce <DIO_Write+0x3c>
     7c4:	8d 81       	ldd	r24, Y+5	; 0x05
     7c6:	9e 81       	ldd	r25, Y+6	; 0x06
     7c8:	00 97       	sbiw	r24, 0x00	; 0
     7ca:	69 f0       	breq	.+26     	; 0x7e6 <DIO_Write+0x54>
     7cc:	70 c0       	rjmp	.+224    	; 0x8ae <__stack+0x4f>
     7ce:	2d 81       	ldd	r18, Y+5	; 0x05
     7d0:	3e 81       	ldd	r19, Y+6	; 0x06
     7d2:	22 30       	cpi	r18, 0x02	; 2
     7d4:	31 05       	cpc	r19, r1
     7d6:	c9 f1       	breq	.+114    	; 0x84a <DIO_Write+0xb8>
     7d8:	8d 81       	ldd	r24, Y+5	; 0x05
     7da:	9e 81       	ldd	r25, Y+6	; 0x06
     7dc:	83 30       	cpi	r24, 0x03	; 3
     7de:	91 05       	cpc	r25, r1
     7e0:	09 f4       	brne	.+2      	; 0x7e4 <DIO_Write+0x52>
     7e2:	4c c0       	rjmp	.+152    	; 0x87c <__stack+0x1d>
     7e4:	64 c0       	rjmp	.+200    	; 0x8ae <__stack+0x4f>
	{
		case GPIOA:
		if (value == HIGH)
     7e6:	8b 81       	ldd	r24, Y+3	; 0x03
     7e8:	8f 3f       	cpi	r24, 0xFF	; 255
     7ea:	49 f4       	brne	.+18     	; 0x7fe <DIO_Write+0x6c>
		{
			PORTA_DATA |= pins;
     7ec:	ab e3       	ldi	r26, 0x3B	; 59
     7ee:	b0 e0       	ldi	r27, 0x00	; 0
     7f0:	eb e3       	ldi	r30, 0x3B	; 59
     7f2:	f0 e0       	ldi	r31, 0x00	; 0
     7f4:	90 81       	ld	r25, Z
     7f6:	8a 81       	ldd	r24, Y+2	; 0x02
     7f8:	89 2b       	or	r24, r25
     7fa:	8c 93       	st	X, r24
     7fc:	0b c0       	rjmp	.+22     	; 0x814 <DIO_Write+0x82>
		}
		else
		{
			pins ^= 0xFF;
     7fe:	8a 81       	ldd	r24, Y+2	; 0x02
     800:	80 95       	com	r24
     802:	8a 83       	std	Y+2, r24	; 0x02
			PORTA_DATA &= pins;
     804:	ab e3       	ldi	r26, 0x3B	; 59
     806:	b0 e0       	ldi	r27, 0x00	; 0
     808:	eb e3       	ldi	r30, 0x3B	; 59
     80a:	f0 e0       	ldi	r31, 0x00	; 0
     80c:	90 81       	ld	r25, Z
     80e:	8a 81       	ldd	r24, Y+2	; 0x02
     810:	89 23       	and	r24, r25
     812:	8c 93       	st	X, r24
		}
		return E_OK;
     814:	1c 82       	std	Y+4, r1	; 0x04
     816:	4d c0       	rjmp	.+154    	; 0x8b2 <__stack+0x53>

		case GPIOB:
		if (value == HIGH)
     818:	8b 81       	ldd	r24, Y+3	; 0x03
     81a:	8f 3f       	cpi	r24, 0xFF	; 255
     81c:	49 f4       	brne	.+18     	; 0x830 <DIO_Write+0x9e>
		{
			PORTB_DATA |= pins;
     81e:	a8 e3       	ldi	r26, 0x38	; 56
     820:	b0 e0       	ldi	r27, 0x00	; 0
     822:	e8 e3       	ldi	r30, 0x38	; 56
     824:	f0 e0       	ldi	r31, 0x00	; 0
     826:	90 81       	ld	r25, Z
     828:	8a 81       	ldd	r24, Y+2	; 0x02
     82a:	89 2b       	or	r24, r25
     82c:	8c 93       	st	X, r24
     82e:	0b c0       	rjmp	.+22     	; 0x846 <DIO_Write+0xb4>
		}
		else
		{
			pins ^= 0xFF;
     830:	8a 81       	ldd	r24, Y+2	; 0x02
     832:	80 95       	com	r24
     834:	8a 83       	std	Y+2, r24	; 0x02
			PORTB_DATA &= pins;
     836:	a8 e3       	ldi	r26, 0x38	; 56
     838:	b0 e0       	ldi	r27, 0x00	; 0
     83a:	e8 e3       	ldi	r30, 0x38	; 56
     83c:	f0 e0       	ldi	r31, 0x00	; 0
     83e:	90 81       	ld	r25, Z
     840:	8a 81       	ldd	r24, Y+2	; 0x02
     842:	89 23       	and	r24, r25
     844:	8c 93       	st	X, r24
		}
		return E_OK;
     846:	1c 82       	std	Y+4, r1	; 0x04
     848:	34 c0       	rjmp	.+104    	; 0x8b2 <__stack+0x53>

		case GPIOC:
		if (value == HIGH)
     84a:	8b 81       	ldd	r24, Y+3	; 0x03
     84c:	8f 3f       	cpi	r24, 0xFF	; 255
     84e:	49 f4       	brne	.+18     	; 0x862 <__stack+0x3>
		{
			PORTC_DATA |= pins;
     850:	a5 e3       	ldi	r26, 0x35	; 53
     852:	b0 e0       	ldi	r27, 0x00	; 0
     854:	e5 e3       	ldi	r30, 0x35	; 53
     856:	f0 e0       	ldi	r31, 0x00	; 0
     858:	90 81       	ld	r25, Z
     85a:	8a 81       	ldd	r24, Y+2	; 0x02
     85c:	89 2b       	or	r24, r25
     85e:	8c 93       	st	X, r24
     860:	0b c0       	rjmp	.+22     	; 0x878 <__stack+0x19>
		}
		else
		{
			pins ^= 0xFF;
     862:	8a 81       	ldd	r24, Y+2	; 0x02
     864:	80 95       	com	r24
     866:	8a 83       	std	Y+2, r24	; 0x02
			PORTC_DATA &= pins;
     868:	a5 e3       	ldi	r26, 0x35	; 53
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	e5 e3       	ldi	r30, 0x35	; 53
     86e:	f0 e0       	ldi	r31, 0x00	; 0
     870:	90 81       	ld	r25, Z
     872:	8a 81       	ldd	r24, Y+2	; 0x02
     874:	89 23       	and	r24, r25
     876:	8c 93       	st	X, r24
		}
		return E_OK;
     878:	1c 82       	std	Y+4, r1	; 0x04
     87a:	1b c0       	rjmp	.+54     	; 0x8b2 <__stack+0x53>

		case GPIOD:
		if (value == HIGH)
     87c:	8b 81       	ldd	r24, Y+3	; 0x03
     87e:	8f 3f       	cpi	r24, 0xFF	; 255
     880:	49 f4       	brne	.+18     	; 0x894 <__stack+0x35>
		{
			PORTD_DATA |= pins;
     882:	a2 e3       	ldi	r26, 0x32	; 50
     884:	b0 e0       	ldi	r27, 0x00	; 0
     886:	e2 e3       	ldi	r30, 0x32	; 50
     888:	f0 e0       	ldi	r31, 0x00	; 0
     88a:	90 81       	ld	r25, Z
     88c:	8a 81       	ldd	r24, Y+2	; 0x02
     88e:	89 2b       	or	r24, r25
     890:	8c 93       	st	X, r24
     892:	0b c0       	rjmp	.+22     	; 0x8aa <__stack+0x4b>
		}
		else
		{
			pins ^= 0xFF;
     894:	8a 81       	ldd	r24, Y+2	; 0x02
     896:	80 95       	com	r24
     898:	8a 83       	std	Y+2, r24	; 0x02
			PORTD_DATA &= pins;
     89a:	a2 e3       	ldi	r26, 0x32	; 50
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e2 e3       	ldi	r30, 0x32	; 50
     8a0:	f0 e0       	ldi	r31, 0x00	; 0
     8a2:	90 81       	ld	r25, Z
     8a4:	8a 81       	ldd	r24, Y+2	; 0x02
     8a6:	89 23       	and	r24, r25
     8a8:	8c 93       	st	X, r24
		}
		return E_OK;
     8aa:	1c 82       	std	Y+4, r1	; 0x04
     8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <__stack+0x53>

		default:
		return E_NOK;
     8ae:	91 e0       	ldi	r25, 0x01	; 1
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
     8b4:	26 96       	adiw	r28, 0x06	; 6
     8b6:	0f b6       	in	r0, 0x3f	; 63
     8b8:	f8 94       	cli
     8ba:	de bf       	out	0x3e, r29	; 62
     8bc:	0f be       	out	0x3f, r0	; 63
     8be:	cd bf       	out	0x3d, r28	; 61
     8c0:	cf 91       	pop	r28
     8c2:	df 91       	pop	r29
     8c4:	08 95       	ret

000008c6 <DIO_Read>:
*In/Out:
*Description: This function gets the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Read (uint8 GPIO,uint8 pins, uint8 *data)
{
     8c6:	df 93       	push	r29
     8c8:	cf 93       	push	r28
     8ca:	cd b7       	in	r28, 0x3d	; 61
     8cc:	de b7       	in	r29, 0x3e	; 62
     8ce:	27 97       	sbiw	r28, 0x07	; 7
     8d0:	0f b6       	in	r0, 0x3f	; 63
     8d2:	f8 94       	cli
     8d4:	de bf       	out	0x3e, r29	; 62
     8d6:	0f be       	out	0x3f, r0	; 63
     8d8:	cd bf       	out	0x3d, r28	; 61
     8da:	89 83       	std	Y+1, r24	; 0x01
     8dc:	6a 83       	std	Y+2, r22	; 0x02
     8de:	5c 83       	std	Y+4, r21	; 0x04
     8e0:	4b 83       	std	Y+3, r20	; 0x03
    if (pins == 0)
     8e2:	8a 81       	ldd	r24, Y+2	; 0x02
     8e4:	88 23       	and	r24, r24
     8e6:	19 f4       	brne	.+6      	; 0x8ee <DIO_Read+0x28>
    {
        return E_NOK;
     8e8:	21 e0       	ldi	r18, 0x01	; 1
     8ea:	2f 83       	std	Y+7, r18	; 0x07
     8ec:	71 c0       	rjmp	.+226    	; 0x9d0 <DIO_Read+0x10a>
    }
	switch (GPIO)
     8ee:	89 81       	ldd	r24, Y+1	; 0x01
     8f0:	28 2f       	mov	r18, r24
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	3e 83       	std	Y+6, r19	; 0x06
     8f6:	2d 83       	std	Y+5, r18	; 0x05
     8f8:	8d 81       	ldd	r24, Y+5	; 0x05
     8fa:	9e 81       	ldd	r25, Y+6	; 0x06
     8fc:	81 30       	cpi	r24, 0x01	; 1
     8fe:	91 05       	cpc	r25, r1
     900:	49 f1       	breq	.+82     	; 0x954 <DIO_Read+0x8e>
     902:	2d 81       	ldd	r18, Y+5	; 0x05
     904:	3e 81       	ldd	r19, Y+6	; 0x06
     906:	22 30       	cpi	r18, 0x02	; 2
     908:	31 05       	cpc	r19, r1
     90a:	2c f4       	brge	.+10     	; 0x916 <DIO_Read+0x50>
     90c:	8d 81       	ldd	r24, Y+5	; 0x05
     90e:	9e 81       	ldd	r25, Y+6	; 0x06
     910:	00 97       	sbiw	r24, 0x00	; 0
     912:	61 f0       	breq	.+24     	; 0x92c <DIO_Read+0x66>
     914:	5b c0       	rjmp	.+182    	; 0x9cc <DIO_Read+0x106>
     916:	2d 81       	ldd	r18, Y+5	; 0x05
     918:	3e 81       	ldd	r19, Y+6	; 0x06
     91a:	22 30       	cpi	r18, 0x02	; 2
     91c:	31 05       	cpc	r19, r1
     91e:	71 f1       	breq	.+92     	; 0x97c <DIO_Read+0xb6>
     920:	8d 81       	ldd	r24, Y+5	; 0x05
     922:	9e 81       	ldd	r25, Y+6	; 0x06
     924:	83 30       	cpi	r24, 0x03	; 3
     926:	91 05       	cpc	r25, r1
     928:	e9 f1       	breq	.+122    	; 0x9a4 <DIO_Read+0xde>
     92a:	50 c0       	rjmp	.+160    	; 0x9cc <DIO_Read+0x106>
	{
		case GPIOA:
		*data = (PORTA_PIN & pins) / pins;
     92c:	e9 e3       	ldi	r30, 0x39	; 57
     92e:	f0 e0       	ldi	r31, 0x00	; 0
     930:	90 81       	ld	r25, Z
     932:	8a 81       	ldd	r24, Y+2	; 0x02
     934:	89 23       	and	r24, r25
     936:	48 2f       	mov	r20, r24
     938:	50 e0       	ldi	r21, 0x00	; 0
     93a:	8a 81       	ldd	r24, Y+2	; 0x02
     93c:	28 2f       	mov	r18, r24
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	ca 01       	movw	r24, r20
     942:	b9 01       	movw	r22, r18
     944:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <__divmodhi4>
     948:	cb 01       	movw	r24, r22
     94a:	eb 81       	ldd	r30, Y+3	; 0x03
     94c:	fc 81       	ldd	r31, Y+4	; 0x04
     94e:	80 83       	st	Z, r24
		return E_OK;
     950:	1f 82       	std	Y+7, r1	; 0x07
     952:	3e c0       	rjmp	.+124    	; 0x9d0 <DIO_Read+0x10a>
		break;

		case GPIOB:
		*data = (PORTB_PIN & pins) / pins;
     954:	e6 e3       	ldi	r30, 0x36	; 54
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	90 81       	ld	r25, Z
     95a:	8a 81       	ldd	r24, Y+2	; 0x02
     95c:	89 23       	and	r24, r25
     95e:	48 2f       	mov	r20, r24
     960:	50 e0       	ldi	r21, 0x00	; 0
     962:	8a 81       	ldd	r24, Y+2	; 0x02
     964:	28 2f       	mov	r18, r24
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	ca 01       	movw	r24, r20
     96a:	b9 01       	movw	r22, r18
     96c:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <__divmodhi4>
     970:	cb 01       	movw	r24, r22
     972:	eb 81       	ldd	r30, Y+3	; 0x03
     974:	fc 81       	ldd	r31, Y+4	; 0x04
     976:	80 83       	st	Z, r24
		return E_OK;
     978:	1f 82       	std	Y+7, r1	; 0x07
     97a:	2a c0       	rjmp	.+84     	; 0x9d0 <DIO_Read+0x10a>
		break;

		case GPIOC:
		*data = (PORTC_PIN & pins) / pins;
     97c:	e3 e3       	ldi	r30, 0x33	; 51
     97e:	f0 e0       	ldi	r31, 0x00	; 0
     980:	90 81       	ld	r25, Z
     982:	8a 81       	ldd	r24, Y+2	; 0x02
     984:	89 23       	and	r24, r25
     986:	48 2f       	mov	r20, r24
     988:	50 e0       	ldi	r21, 0x00	; 0
     98a:	8a 81       	ldd	r24, Y+2	; 0x02
     98c:	28 2f       	mov	r18, r24
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	ca 01       	movw	r24, r20
     992:	b9 01       	movw	r22, r18
     994:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <__divmodhi4>
     998:	cb 01       	movw	r24, r22
     99a:	eb 81       	ldd	r30, Y+3	; 0x03
     99c:	fc 81       	ldd	r31, Y+4	; 0x04
     99e:	80 83       	st	Z, r24
		return E_OK;
     9a0:	1f 82       	std	Y+7, r1	; 0x07
     9a2:	16 c0       	rjmp	.+44     	; 0x9d0 <DIO_Read+0x10a>
		break;

		case GPIOD:
		*data = (PORTD_PIN & pins) / pins;
     9a4:	e0 e3       	ldi	r30, 0x30	; 48
     9a6:	f0 e0       	ldi	r31, 0x00	; 0
     9a8:	90 81       	ld	r25, Z
     9aa:	8a 81       	ldd	r24, Y+2	; 0x02
     9ac:	89 23       	and	r24, r25
     9ae:	48 2f       	mov	r20, r24
     9b0:	50 e0       	ldi	r21, 0x00	; 0
     9b2:	8a 81       	ldd	r24, Y+2	; 0x02
     9b4:	28 2f       	mov	r18, r24
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	ca 01       	movw	r24, r20
     9ba:	b9 01       	movw	r22, r18
     9bc:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <__divmodhi4>
     9c0:	cb 01       	movw	r24, r22
     9c2:	eb 81       	ldd	r30, Y+3	; 0x03
     9c4:	fc 81       	ldd	r31, Y+4	; 0x04
     9c6:	80 83       	st	Z, r24
		return E_OK;
     9c8:	1f 82       	std	Y+7, r1	; 0x07
     9ca:	02 c0       	rjmp	.+4      	; 0x9d0 <DIO_Read+0x10a>
		break;

		default:
		return E_NOK;
     9cc:	91 e0       	ldi	r25, 0x01	; 1
     9ce:	9f 83       	std	Y+7, r25	; 0x07
     9d0:	8f 81       	ldd	r24, Y+7	; 0x07
		break;
	}
}
     9d2:	27 96       	adiw	r28, 0x07	; 7
     9d4:	0f b6       	in	r0, 0x3f	; 63
     9d6:	f8 94       	cli
     9d8:	de bf       	out	0x3e, r29	; 62
     9da:	0f be       	out	0x3f, r0	; 63
     9dc:	cd bf       	out	0x3d, r28	; 61
     9de:	cf 91       	pop	r28
     9e0:	df 91       	pop	r29
     9e2:	08 95       	ret

000009e4 <DIO_Toggle>:
*In/Out:
*Description: This function toggles the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Toggle (uint8 GPIO, uint8 pins)
{
     9e4:	df 93       	push	r29
     9e6:	cf 93       	push	r28
     9e8:	00 d0       	rcall	.+0      	; 0x9ea <DIO_Toggle+0x6>
     9ea:	00 d0       	rcall	.+0      	; 0x9ec <DIO_Toggle+0x8>
     9ec:	0f 92       	push	r0
     9ee:	cd b7       	in	r28, 0x3d	; 61
     9f0:	de b7       	in	r29, 0x3e	; 62
     9f2:	89 83       	std	Y+1, r24	; 0x01
     9f4:	6a 83       	std	Y+2, r22	; 0x02
	switch (GPIO)
     9f6:	89 81       	ldd	r24, Y+1	; 0x01
     9f8:	28 2f       	mov	r18, r24
     9fa:	30 e0       	ldi	r19, 0x00	; 0
     9fc:	3d 83       	std	Y+5, r19	; 0x05
     9fe:	2c 83       	std	Y+4, r18	; 0x04
     a00:	8c 81       	ldd	r24, Y+4	; 0x04
     a02:	9d 81       	ldd	r25, Y+5	; 0x05
     a04:	81 30       	cpi	r24, 0x01	; 1
     a06:	91 05       	cpc	r25, r1
     a08:	f9 f0       	breq	.+62     	; 0xa48 <DIO_Toggle+0x64>
     a0a:	2c 81       	ldd	r18, Y+4	; 0x04
     a0c:	3d 81       	ldd	r19, Y+5	; 0x05
     a0e:	22 30       	cpi	r18, 0x02	; 2
     a10:	31 05       	cpc	r19, r1
     a12:	2c f4       	brge	.+10     	; 0xa1e <DIO_Toggle+0x3a>
     a14:	8c 81       	ldd	r24, Y+4	; 0x04
     a16:	9d 81       	ldd	r25, Y+5	; 0x05
     a18:	00 97       	sbiw	r24, 0x00	; 0
     a1a:	61 f0       	breq	.+24     	; 0xa34 <DIO_Toggle+0x50>
     a1c:	33 c0       	rjmp	.+102    	; 0xa84 <DIO_Toggle+0xa0>
     a1e:	2c 81       	ldd	r18, Y+4	; 0x04
     a20:	3d 81       	ldd	r19, Y+5	; 0x05
     a22:	22 30       	cpi	r18, 0x02	; 2
     a24:	31 05       	cpc	r19, r1
     a26:	d1 f0       	breq	.+52     	; 0xa5c <DIO_Toggle+0x78>
     a28:	8c 81       	ldd	r24, Y+4	; 0x04
     a2a:	9d 81       	ldd	r25, Y+5	; 0x05
     a2c:	83 30       	cpi	r24, 0x03	; 3
     a2e:	91 05       	cpc	r25, r1
     a30:	f9 f0       	breq	.+62     	; 0xa70 <DIO_Toggle+0x8c>
     a32:	28 c0       	rjmp	.+80     	; 0xa84 <DIO_Toggle+0xa0>
	{
		case GPIOA:
            PORTA_DATA ^= pins;
     a34:	ab e3       	ldi	r26, 0x3B	; 59
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	eb e3       	ldi	r30, 0x3B	; 59
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	90 81       	ld	r25, Z
     a3e:	8a 81       	ldd	r24, Y+2	; 0x02
     a40:	89 27       	eor	r24, r25
     a42:	8c 93       	st	X, r24
            return E_OK;
     a44:	1b 82       	std	Y+3, r1	; 0x03
     a46:	20 c0       	rjmp	.+64     	; 0xa88 <DIO_Toggle+0xa4>

		case GPIOB:
            PORTB_DATA ^= pins;
     a48:	a8 e3       	ldi	r26, 0x38	; 56
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	e8 e3       	ldi	r30, 0x38	; 56
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	90 81       	ld	r25, Z
     a52:	8a 81       	ldd	r24, Y+2	; 0x02
     a54:	89 27       	eor	r24, r25
     a56:	8c 93       	st	X, r24
            return E_OK;
     a58:	1b 82       	std	Y+3, r1	; 0x03
     a5a:	16 c0       	rjmp	.+44     	; 0xa88 <DIO_Toggle+0xa4>

		case GPIOC:
            PORTC_DATA ^= pins;
     a5c:	a5 e3       	ldi	r26, 0x35	; 53
     a5e:	b0 e0       	ldi	r27, 0x00	; 0
     a60:	e5 e3       	ldi	r30, 0x35	; 53
     a62:	f0 e0       	ldi	r31, 0x00	; 0
     a64:	90 81       	ld	r25, Z
     a66:	8a 81       	ldd	r24, Y+2	; 0x02
     a68:	89 27       	eor	r24, r25
     a6a:	8c 93       	st	X, r24
            return E_OK;
     a6c:	1b 82       	std	Y+3, r1	; 0x03
     a6e:	0c c0       	rjmp	.+24     	; 0xa88 <DIO_Toggle+0xa4>

		case GPIOD:
            PORTD_DATA ^= pins;
     a70:	a2 e3       	ldi	r26, 0x32	; 50
     a72:	b0 e0       	ldi	r27, 0x00	; 0
     a74:	e2 e3       	ldi	r30, 0x32	; 50
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	90 81       	ld	r25, Z
     a7a:	8a 81       	ldd	r24, Y+2	; 0x02
     a7c:	89 27       	eor	r24, r25
     a7e:	8c 93       	st	X, r24
            return E_OK;
     a80:	1b 82       	std	Y+3, r1	; 0x03
     a82:	02 c0       	rjmp	.+4      	; 0xa88 <DIO_Toggle+0xa4>
		default:
            return E_NOK;
     a84:	91 e0       	ldi	r25, 0x01	; 1
     a86:	9b 83       	std	Y+3, r25	; 0x03
     a88:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
     a8a:	0f 90       	pop	r0
     a8c:	0f 90       	pop	r0
     a8e:	0f 90       	pop	r0
     a90:	0f 90       	pop	r0
     a92:	0f 90       	pop	r0
     a94:	cf 91       	pop	r28
     a96:	df 91       	pop	r29
     a98:	08 95       	ret

00000a9a <ExternInt_Init>:
 * Description: Initiate the required external interrupt configuration as it specify
 *	event of interrupt and mode if polling or Interrupt.
 */

ERROR_STATUS ExternInt_Init(ExternInt_Cfg_s *ExternIntCfg)
{
     a9a:	df 93       	push	r29
     a9c:	cf 93       	push	r28
     a9e:	cd b7       	in	r28, 0x3d	; 61
     aa0:	de b7       	in	r29, 0x3e	; 62
     aa2:	2e 97       	sbiw	r28, 0x0e	; 14
     aa4:	0f b6       	in	r0, 0x3f	; 63
     aa6:	f8 94       	cli
     aa8:	de bf       	out	0x3e, r29	; 62
     aaa:	0f be       	out	0x3f, r0	; 63
     aac:	cd bf       	out	0x3d, r28	; 61
     aae:	9d 83       	std	Y+5, r25	; 0x05
     ab0:	8c 83       	std	Y+4, r24	; 0x04
    DIO_Cfg_s DioExIntObject;

    if (ExternIntCfg == NULL)
     ab2:	8c 81       	ldd	r24, Y+4	; 0x04
     ab4:	9d 81       	ldd	r25, Y+5	; 0x05
     ab6:	00 97       	sbiw	r24, 0x00	; 0
     ab8:	19 f4       	brne	.+6      	; 0xac0 <ExternInt_Init+0x26>
    {
        return E_NOK;
     aba:	21 e0       	ldi	r18, 0x01	; 1
     abc:	2e 87       	std	Y+14, r18	; 0x0e
     abe:	41 c1       	rjmp	.+642    	; 0xd42 <ExternInt_Init+0x2a8>
    }
    switch (ExternIntCfg->ExternInt_No)
     ac0:	ec 81       	ldd	r30, Y+4	; 0x04
     ac2:	fd 81       	ldd	r31, Y+5	; 0x05
     ac4:	80 81       	ld	r24, Z
     ac6:	28 2f       	mov	r18, r24
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	3d 87       	std	Y+13, r19	; 0x0d
     acc:	2c 87       	std	Y+12, r18	; 0x0c
     ace:	8c 85       	ldd	r24, Y+12	; 0x0c
     ad0:	9d 85       	ldd	r25, Y+13	; 0x0d
     ad2:	81 30       	cpi	r24, 0x01	; 1
     ad4:	91 05       	cpc	r25, r1
     ad6:	09 f4       	brne	.+2      	; 0xada <ExternInt_Init+0x40>
     ad8:	81 c0       	rjmp	.+258    	; 0xbdc <ExternInt_Init+0x142>
     ada:	2c 85       	ldd	r18, Y+12	; 0x0c
     adc:	3d 85       	ldd	r19, Y+13	; 0x0d
     ade:	22 30       	cpi	r18, 0x02	; 2
     ae0:	31 05       	cpc	r19, r1
     ae2:	09 f4       	brne	.+2      	; 0xae6 <ExternInt_Init+0x4c>
     ae4:	f1 c0       	rjmp	.+482    	; 0xcc8 <ExternInt_Init+0x22e>
     ae6:	8c 85       	ldd	r24, Y+12	; 0x0c
     ae8:	9d 85       	ldd	r25, Y+13	; 0x0d
     aea:	00 97       	sbiw	r24, 0x00	; 0
     aec:	09 f0       	breq	.+2      	; 0xaf0 <ExternInt_Init+0x56>
     aee:	27 c1       	rjmp	.+590    	; 0xd3e <ExternInt_Init+0x2a4>
    {
    case EXTRN_INT_0:
        DioExIntObject.GPIO = GPIOD;
     af0:	83 e0       	ldi	r24, 0x03	; 3
     af2:	89 83       	std	Y+1, r24	; 0x01
        DioExIntObject.pins = BIT2;
     af4:	84 e0       	ldi	r24, 0x04	; 4
     af6:	8a 83       	std	Y+2, r24	; 0x02
        DioExIntObject.dir  = INPUT;
     af8:	1b 82       	std	Y+3, r1	; 0x03
        DIO_init( &DioExIntObject);
     afa:	ce 01       	movw	r24, r28
     afc:	01 96       	adiw	r24, 0x01	; 1
     afe:	0e 94 06 03 	call	0x60c	; 0x60c <DIO_init>
        CBK_ExIntFunc[EXTRN_INT_0] = ExternIntCfg->ExternInt_CBF_Ptr;
     b02:	ec 81       	ldd	r30, Y+4	; 0x04
     b04:	fd 81       	ldd	r31, Y+5	; 0x05
     b06:	82 81       	ldd	r24, Z+2	; 0x02
     b08:	93 81       	ldd	r25, Z+3	; 0x03
     b0a:	90 93 a4 00 	sts	0x00A4, r25
     b0e:	80 93 a3 00 	sts	0x00A3, r24
        switch (ExternIntCfg ->ExternInt_Event)
     b12:	ec 81       	ldd	r30, Y+4	; 0x04
     b14:	fd 81       	ldd	r31, Y+5	; 0x05
     b16:	81 81       	ldd	r24, Z+1	; 0x01
     b18:	28 2f       	mov	r18, r24
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	3b 87       	std	Y+11, r19	; 0x0b
     b1e:	2a 87       	std	Y+10, r18	; 0x0a
     b20:	8a 85       	ldd	r24, Y+10	; 0x0a
     b22:	9b 85       	ldd	r25, Y+11	; 0x0b
     b24:	81 30       	cpi	r24, 0x01	; 1
     b26:	91 05       	cpc	r25, r1
     b28:	21 f1       	breq	.+72     	; 0xb72 <ExternInt_Init+0xd8>
     b2a:	2a 85       	ldd	r18, Y+10	; 0x0a
     b2c:	3b 85       	ldd	r19, Y+11	; 0x0b
     b2e:	22 30       	cpi	r18, 0x02	; 2
     b30:	31 05       	cpc	r19, r1
     b32:	2c f4       	brge	.+10     	; 0xb3e <ExternInt_Init+0xa4>
     b34:	8a 85       	ldd	r24, Y+10	; 0x0a
     b36:	9b 85       	ldd	r25, Y+11	; 0x0b
     b38:	00 97       	sbiw	r24, 0x00	; 0
     b3a:	61 f0       	breq	.+24     	; 0xb54 <ExternInt_Init+0xba>
     b3c:	47 c0       	rjmp	.+142    	; 0xbcc <ExternInt_Init+0x132>
     b3e:	2a 85       	ldd	r18, Y+10	; 0x0a
     b40:	3b 85       	ldd	r19, Y+11	; 0x0b
     b42:	22 30       	cpi	r18, 0x02	; 2
     b44:	31 05       	cpc	r19, r1
     b46:	21 f1       	breq	.+72     	; 0xb90 <ExternInt_Init+0xf6>
     b48:	8a 85       	ldd	r24, Y+10	; 0x0a
     b4a:	9b 85       	ldd	r25, Y+11	; 0x0b
     b4c:	83 30       	cpi	r24, 0x03	; 3
     b4e:	91 05       	cpc	r25, r1
     b50:	71 f1       	breq	.+92     	; 0xbae <ExternInt_Init+0x114>
     b52:	3c c0       	rjmp	.+120    	; 0xbcc <ExternInt_Init+0x132>
        {
        case LOW_LEVEL:
            ASSIGN_BIT(MCUCR, BIT0, LOW);
     b54:	a5 e5       	ldi	r26, 0x55	; 85
     b56:	b0 e0       	ldi	r27, 0x00	; 0
     b58:	e5 e5       	ldi	r30, 0x55	; 85
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	80 81       	ld	r24, Z
     b5e:	8e 7f       	andi	r24, 0xFE	; 254
     b60:	8c 93       	st	X, r24
            ASSIGN_BIT(MCUCR, BIT1, LOW);
     b62:	a5 e5       	ldi	r26, 0x55	; 85
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e5 e5       	ldi	r30, 0x55	; 85
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	80 81       	ld	r24, Z
     b6c:	8d 7f       	andi	r24, 0xFD	; 253
     b6e:	8c 93       	st	X, r24
     b70:	30 c0       	rjmp	.+96     	; 0xbd2 <ExternInt_Init+0x138>
            break;
        case LOGICAL_CHANGE:
            ASSIGN_BIT(MCUCR, BIT0, HIGH);
     b72:	a5 e5       	ldi	r26, 0x55	; 85
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	e5 e5       	ldi	r30, 0x55	; 85
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	81 60       	ori	r24, 0x01	; 1
     b7e:	8c 93       	st	X, r24
            ASSIGN_BIT(MCUCR, BIT1, LOW);
     b80:	a5 e5       	ldi	r26, 0x55	; 85
     b82:	b0 e0       	ldi	r27, 0x00	; 0
     b84:	e5 e5       	ldi	r30, 0x55	; 85
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	80 81       	ld	r24, Z
     b8a:	8d 7f       	andi	r24, 0xFD	; 253
     b8c:	8c 93       	st	X, r24
     b8e:	21 c0       	rjmp	.+66     	; 0xbd2 <ExternInt_Init+0x138>
            break;
        case FALLING_EDGE:
            ASSIGN_BIT(MCUCR, BIT0, LOW);
     b90:	a5 e5       	ldi	r26, 0x55	; 85
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	e5 e5       	ldi	r30, 0x55	; 85
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	80 81       	ld	r24, Z
     b9a:	8e 7f       	andi	r24, 0xFE	; 254
     b9c:	8c 93       	st	X, r24
            ASSIGN_BIT(MCUCR, BIT1, HIGH);
     b9e:	a5 e5       	ldi	r26, 0x55	; 85
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	e5 e5       	ldi	r30, 0x55	; 85
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	80 81       	ld	r24, Z
     ba8:	82 60       	ori	r24, 0x02	; 2
     baa:	8c 93       	st	X, r24
     bac:	12 c0       	rjmp	.+36     	; 0xbd2 <ExternInt_Init+0x138>
            break;
        case RISING_EDGE:
            ASSIGN_BIT(MCUCR, BIT0, HIGH);
     bae:	a5 e5       	ldi	r26, 0x55	; 85
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	e5 e5       	ldi	r30, 0x55	; 85
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	80 81       	ld	r24, Z
     bb8:	81 60       	ori	r24, 0x01	; 1
     bba:	8c 93       	st	X, r24
            ASSIGN_BIT(MCUCR, BIT1, HIGH);
     bbc:	a5 e5       	ldi	r26, 0x55	; 85
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	e5 e5       	ldi	r30, 0x55	; 85
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	82 60       	ori	r24, 0x02	; 2
     bc8:	8c 93       	st	X, r24
     bca:	03 c0       	rjmp	.+6      	; 0xbd2 <ExternInt_Init+0x138>
            break;
        default:
            return E_NOK;
     bcc:	91 e0       	ldi	r25, 0x01	; 1
     bce:	9e 87       	std	Y+14, r25	; 0x0e
     bd0:	b8 c0       	rjmp	.+368    	; 0xd42 <ExternInt_Init+0x2a8>
        }
        u8_ExternalInterrptInitCheck[EXTRN_INT_0] = TRUE;
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	80 93 9d 00 	sts	0x009D, r24
        return E_OK;
     bd8:	1e 86       	std	Y+14, r1	; 0x0e
     bda:	b3 c0       	rjmp	.+358    	; 0xd42 <ExternInt_Init+0x2a8>

    case EXTRN_INT_1:
        DioExIntObject.GPIO = GPIOD;
     bdc:	83 e0       	ldi	r24, 0x03	; 3
     bde:	89 83       	std	Y+1, r24	; 0x01
        DioExIntObject.pins = BIT3;
     be0:	88 e0       	ldi	r24, 0x08	; 8
     be2:	8a 83       	std	Y+2, r24	; 0x02
        DioExIntObject.dir  = INPUT;
     be4:	1b 82       	std	Y+3, r1	; 0x03
        DIO_init( &DioExIntObject);
     be6:	ce 01       	movw	r24, r28
     be8:	01 96       	adiw	r24, 0x01	; 1
     bea:	0e 94 06 03 	call	0x60c	; 0x60c <DIO_init>
        CBK_ExIntFunc[EXTRN_INT_1] = ExternIntCfg->ExternInt_CBF_Ptr;
     bee:	ec 81       	ldd	r30, Y+4	; 0x04
     bf0:	fd 81       	ldd	r31, Y+5	; 0x05
     bf2:	82 81       	ldd	r24, Z+2	; 0x02
     bf4:	93 81       	ldd	r25, Z+3	; 0x03
     bf6:	90 93 a6 00 	sts	0x00A6, r25
     bfa:	80 93 a5 00 	sts	0x00A5, r24
        switch (ExternIntCfg ->ExternInt_Event)
     bfe:	ec 81       	ldd	r30, Y+4	; 0x04
     c00:	fd 81       	ldd	r31, Y+5	; 0x05
     c02:	81 81       	ldd	r24, Z+1	; 0x01
     c04:	28 2f       	mov	r18, r24
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	39 87       	std	Y+9, r19	; 0x09
     c0a:	28 87       	std	Y+8, r18	; 0x08
     c0c:	88 85       	ldd	r24, Y+8	; 0x08
     c0e:	99 85       	ldd	r25, Y+9	; 0x09
     c10:	81 30       	cpi	r24, 0x01	; 1
     c12:	91 05       	cpc	r25, r1
     c14:	21 f1       	breq	.+72     	; 0xc5e <ExternInt_Init+0x1c4>
     c16:	28 85       	ldd	r18, Y+8	; 0x08
     c18:	39 85       	ldd	r19, Y+9	; 0x09
     c1a:	22 30       	cpi	r18, 0x02	; 2
     c1c:	31 05       	cpc	r19, r1
     c1e:	2c f4       	brge	.+10     	; 0xc2a <ExternInt_Init+0x190>
     c20:	88 85       	ldd	r24, Y+8	; 0x08
     c22:	99 85       	ldd	r25, Y+9	; 0x09
     c24:	00 97       	sbiw	r24, 0x00	; 0
     c26:	61 f0       	breq	.+24     	; 0xc40 <ExternInt_Init+0x1a6>
     c28:	47 c0       	rjmp	.+142    	; 0xcb8 <ExternInt_Init+0x21e>
     c2a:	28 85       	ldd	r18, Y+8	; 0x08
     c2c:	39 85       	ldd	r19, Y+9	; 0x09
     c2e:	22 30       	cpi	r18, 0x02	; 2
     c30:	31 05       	cpc	r19, r1
     c32:	21 f1       	breq	.+72     	; 0xc7c <ExternInt_Init+0x1e2>
     c34:	88 85       	ldd	r24, Y+8	; 0x08
     c36:	99 85       	ldd	r25, Y+9	; 0x09
     c38:	83 30       	cpi	r24, 0x03	; 3
     c3a:	91 05       	cpc	r25, r1
     c3c:	71 f1       	breq	.+92     	; 0xc9a <ExternInt_Init+0x200>
     c3e:	3c c0       	rjmp	.+120    	; 0xcb8 <ExternInt_Init+0x21e>
        {
        case LOW_LEVEL:
            ASSIGN_BIT(MCUCR, BIT2, LOW);
     c40:	a5 e5       	ldi	r26, 0x55	; 85
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	e5 e5       	ldi	r30, 0x55	; 85
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	8b 7f       	andi	r24, 0xFB	; 251
     c4c:	8c 93       	st	X, r24
            ASSIGN_BIT(MCUCR, BIT3, LOW);
     c4e:	a5 e5       	ldi	r26, 0x55	; 85
     c50:	b0 e0       	ldi	r27, 0x00	; 0
     c52:	e5 e5       	ldi	r30, 0x55	; 85
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	80 81       	ld	r24, Z
     c58:	87 7f       	andi	r24, 0xF7	; 247
     c5a:	8c 93       	st	X, r24
     c5c:	30 c0       	rjmp	.+96     	; 0xcbe <ExternInt_Init+0x224>
            break;
        case LOGICAL_CHANGE:
            ASSIGN_BIT(MCUCR, BIT2, HIGH);
     c5e:	a5 e5       	ldi	r26, 0x55	; 85
     c60:	b0 e0       	ldi	r27, 0x00	; 0
     c62:	e5 e5       	ldi	r30, 0x55	; 85
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	80 81       	ld	r24, Z
     c68:	84 60       	ori	r24, 0x04	; 4
     c6a:	8c 93       	st	X, r24
            ASSIGN_BIT(MCUCR, BIT3, LOW);
     c6c:	a5 e5       	ldi	r26, 0x55	; 85
     c6e:	b0 e0       	ldi	r27, 0x00	; 0
     c70:	e5 e5       	ldi	r30, 0x55	; 85
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	80 81       	ld	r24, Z
     c76:	87 7f       	andi	r24, 0xF7	; 247
     c78:	8c 93       	st	X, r24
     c7a:	21 c0       	rjmp	.+66     	; 0xcbe <ExternInt_Init+0x224>
            break;
        case FALLING_EDGE:
            ASSIGN_BIT(MCUCR, BIT2, LOW);
     c7c:	a5 e5       	ldi	r26, 0x55	; 85
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	e5 e5       	ldi	r30, 0x55	; 85
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	8b 7f       	andi	r24, 0xFB	; 251
     c88:	8c 93       	st	X, r24
            ASSIGN_BIT(MCUCR, BIT3, HIGH);
     c8a:	a5 e5       	ldi	r26, 0x55	; 85
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e5 e5       	ldi	r30, 0x55	; 85
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	88 60       	ori	r24, 0x08	; 8
     c96:	8c 93       	st	X, r24
     c98:	12 c0       	rjmp	.+36     	; 0xcbe <ExternInt_Init+0x224>
            break;
        case RISING_EDGE:
            ASSIGN_BIT(MCUCR, BIT2, HIGH);
     c9a:	a5 e5       	ldi	r26, 0x55	; 85
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	e5 e5       	ldi	r30, 0x55	; 85
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	84 60       	ori	r24, 0x04	; 4
     ca6:	8c 93       	st	X, r24
            ASSIGN_BIT(MCUCR, BIT3, HIGH);
     ca8:	a5 e5       	ldi	r26, 0x55	; 85
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	e5 e5       	ldi	r30, 0x55	; 85
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	88 60       	ori	r24, 0x08	; 8
     cb4:	8c 93       	st	X, r24
     cb6:	03 c0       	rjmp	.+6      	; 0xcbe <ExternInt_Init+0x224>
            break;
        default:
            return E_NOK;
     cb8:	91 e0       	ldi	r25, 0x01	; 1
     cba:	9e 87       	std	Y+14, r25	; 0x0e
     cbc:	42 c0       	rjmp	.+132    	; 0xd42 <ExternInt_Init+0x2a8>
        }
        u8_ExternalInterrptInitCheck[EXTRN_INT_1] = TRUE;
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	80 93 9e 00 	sts	0x009E, r24
        return E_OK;
     cc4:	1e 86       	std	Y+14, r1	; 0x0e
     cc6:	3d c0       	rjmp	.+122    	; 0xd42 <ExternInt_Init+0x2a8>

    case EXTRN_INT_2:
        DioExIntObject.GPIO = GPIOB;
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	89 83       	std	Y+1, r24	; 0x01
        DioExIntObject.pins = BIT2;
     ccc:	84 e0       	ldi	r24, 0x04	; 4
     cce:	8a 83       	std	Y+2, r24	; 0x02
        DioExIntObject.dir  = INPUT;
     cd0:	1b 82       	std	Y+3, r1	; 0x03
        DIO_init( &DioExIntObject);
     cd2:	ce 01       	movw	r24, r28
     cd4:	01 96       	adiw	r24, 0x01	; 1
     cd6:	0e 94 06 03 	call	0x60c	; 0x60c <DIO_init>
        CBK_ExIntFunc[EXTRN_INT_2] = ExternIntCfg->ExternInt_CBF_Ptr;
     cda:	ec 81       	ldd	r30, Y+4	; 0x04
     cdc:	fd 81       	ldd	r31, Y+5	; 0x05
     cde:	82 81       	ldd	r24, Z+2	; 0x02
     ce0:	93 81       	ldd	r25, Z+3	; 0x03
     ce2:	90 93 a8 00 	sts	0x00A8, r25
     ce6:	80 93 a7 00 	sts	0x00A7, r24
        switch (ExternIntCfg ->ExternInt_Event)
     cea:	ec 81       	ldd	r30, Y+4	; 0x04
     cec:	fd 81       	ldd	r31, Y+5	; 0x05
     cee:	81 81       	ldd	r24, Z+1	; 0x01
     cf0:	28 2f       	mov	r18, r24
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	3f 83       	std	Y+7, r19	; 0x07
     cf6:	2e 83       	std	Y+6, r18	; 0x06
     cf8:	8e 81       	ldd	r24, Y+6	; 0x06
     cfa:	9f 81       	ldd	r25, Y+7	; 0x07
     cfc:	82 30       	cpi	r24, 0x02	; 2
     cfe:	91 05       	cpc	r25, r1
     d00:	31 f0       	breq	.+12     	; 0xd0e <ExternInt_Init+0x274>
     d02:	2e 81       	ldd	r18, Y+6	; 0x06
     d04:	3f 81       	ldd	r19, Y+7	; 0x07
     d06:	23 30       	cpi	r18, 0x03	; 3
     d08:	31 05       	cpc	r19, r1
     d0a:	49 f0       	breq	.+18     	; 0xd1e <ExternInt_Init+0x284>
     d0c:	10 c0       	rjmp	.+32     	; 0xd2e <ExternInt_Init+0x294>
        {
        case FALLING_EDGE:
            ASSIGN_BIT(MCUCSR, BIT6, LOW);
     d0e:	a4 e5       	ldi	r26, 0x54	; 84
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	e4 e5       	ldi	r30, 0x54	; 84
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	8f 7b       	andi	r24, 0xBF	; 191
     d1a:	8c 93       	st	X, r24
     d1c:	0b c0       	rjmp	.+22     	; 0xd34 <ExternInt_Init+0x29a>
            break;
        case RISING_EDGE:
            ASSIGN_BIT(MCUCSR, BIT6, HIGH);
     d1e:	a4 e5       	ldi	r26, 0x54	; 84
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e4 e5       	ldi	r30, 0x54	; 84
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	80 64       	ori	r24, 0x40	; 64
     d2a:	8c 93       	st	X, r24
     d2c:	03 c0       	rjmp	.+6      	; 0xd34 <ExternInt_Init+0x29a>
            break;
        default:
            return E_NOK;
     d2e:	31 e0       	ldi	r19, 0x01	; 1
     d30:	3e 87       	std	Y+14, r19	; 0x0e
     d32:	07 c0       	rjmp	.+14     	; 0xd42 <ExternInt_Init+0x2a8>
        }
        u8_ExternalInterrptInitCheck[EXTRN_INT_2] = TRUE;
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	80 93 9f 00 	sts	0x009F, r24
        return E_OK;
     d3a:	1e 86       	std	Y+14, r1	; 0x0e
     d3c:	02 c0       	rjmp	.+4      	; 0xd42 <ExternInt_Init+0x2a8>

    default:
        return E_NOK;
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	8e 87       	std	Y+14, r24	; 0x0e
     d42:	8e 85       	ldd	r24, Y+14	; 0x0e
    }

}
     d44:	2e 96       	adiw	r28, 0x0e	; 14
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	f8 94       	cli
     d4a:	de bf       	out	0x3e, r29	; 62
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	cd bf       	out	0x3d, r28	; 61
     d50:	cf 91       	pop	r28
     d52:	df 91       	pop	r29
     d54:	08 95       	ret

00000d56 <ExternInt_Enable>:
 * In Out:
 * Return: ERROR_STATUS -> check if there any error occurs, would return E_NOK else it would return E_OK.
 * Description: Enable the required external interrupt from GICR but to allow the interrupt global interrupt must be set.
 */
ERROR_STATUS ExternInt_Enable(uint8 ExternInt_No)
{
     d56:	df 93       	push	r29
     d58:	cf 93       	push	r28
     d5a:	00 d0       	rcall	.+0      	; 0xd5c <ExternInt_Enable+0x6>
     d5c:	00 d0       	rcall	.+0      	; 0xd5e <ExternInt_Enable+0x8>
     d5e:	cd b7       	in	r28, 0x3d	; 61
     d60:	de b7       	in	r29, 0x3e	; 62
     d62:	89 83       	std	Y+1, r24	; 0x01
    switch (ExternInt_No)
     d64:	89 81       	ldd	r24, Y+1	; 0x01
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	3c 83       	std	Y+4, r19	; 0x04
     d6c:	2b 83       	std	Y+3, r18	; 0x03
     d6e:	8b 81       	ldd	r24, Y+3	; 0x03
     d70:	9c 81       	ldd	r25, Y+4	; 0x04
     d72:	81 30       	cpi	r24, 0x01	; 1
     d74:	91 05       	cpc	r25, r1
     d76:	d1 f0       	breq	.+52     	; 0xdac <ExternInt_Enable+0x56>
     d78:	2b 81       	ldd	r18, Y+3	; 0x03
     d7a:	3c 81       	ldd	r19, Y+4	; 0x04
     d7c:	22 30       	cpi	r18, 0x02	; 2
     d7e:	31 05       	cpc	r19, r1
     d80:	31 f1       	breq	.+76     	; 0xdce <ExternInt_Enable+0x78>
     d82:	8b 81       	ldd	r24, Y+3	; 0x03
     d84:	9c 81       	ldd	r25, Y+4	; 0x04
     d86:	00 97       	sbiw	r24, 0x00	; 0
     d88:	99 f5       	brne	.+102    	; 0xdf0 <ExternInt_Enable+0x9a>
    {
    case EXTRN_INT_0:
        if (u8_ExternalInterrptInitCheck[EXTRN_INT_0] == TRUE)
     d8a:	80 91 9d 00 	lds	r24, 0x009D
     d8e:	81 30       	cpi	r24, 0x01	; 1
     d90:	51 f4       	brne	.+20     	; 0xda6 <ExternInt_Enable+0x50>
        {
            sei();
     d92:	78 94       	sei
            ASSIGN_BIT(GICR, BIT6, HIGH);
     d94:	ab e5       	ldi	r26, 0x5B	; 91
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	eb e5       	ldi	r30, 0x5B	; 91
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	80 64       	ori	r24, 0x40	; 64
     da0:	8c 93       	st	X, r24
            return E_OK;
     da2:	1a 82       	std	Y+2, r1	; 0x02
     da4:	27 c0       	rjmp	.+78     	; 0xdf4 <ExternInt_Enable+0x9e>
        }
        else
        {
            return E_NOK;
     da6:	91 e0       	ldi	r25, 0x01	; 1
     da8:	9a 83       	std	Y+2, r25	; 0x02
     daa:	24 c0       	rjmp	.+72     	; 0xdf4 <ExternInt_Enable+0x9e>
        }
    case EXTRN_INT_1:
        if (u8_ExternalInterrptInitCheck[EXTRN_INT_1] == TRUE)
     dac:	80 91 9e 00 	lds	r24, 0x009E
     db0:	81 30       	cpi	r24, 0x01	; 1
     db2:	51 f4       	brne	.+20     	; 0xdc8 <ExternInt_Enable+0x72>
        {
            sei();
     db4:	78 94       	sei
            ASSIGN_BIT(GICR, BIT7, HIGH);
     db6:	ab e5       	ldi	r26, 0x5B	; 91
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	eb e5       	ldi	r30, 0x5B	; 91
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	80 68       	ori	r24, 0x80	; 128
     dc2:	8c 93       	st	X, r24
            return E_OK;
     dc4:	1a 82       	std	Y+2, r1	; 0x02
     dc6:	16 c0       	rjmp	.+44     	; 0xdf4 <ExternInt_Enable+0x9e>
        }
        else
        {
            return E_NOK;
     dc8:	21 e0       	ldi	r18, 0x01	; 1
     dca:	2a 83       	std	Y+2, r18	; 0x02
     dcc:	13 c0       	rjmp	.+38     	; 0xdf4 <ExternInt_Enable+0x9e>
        }
    case EXTRN_INT_2:
        if (u8_ExternalInterrptInitCheck[EXTRN_INT_2] == TRUE)
     dce:	80 91 9f 00 	lds	r24, 0x009F
     dd2:	81 30       	cpi	r24, 0x01	; 1
     dd4:	51 f4       	brne	.+20     	; 0xdea <ExternInt_Enable+0x94>
        {
            sei();
     dd6:	78 94       	sei
            ASSIGN_BIT(GICR, BIT5, HIGH);
     dd8:	ab e5       	ldi	r26, 0x5B	; 91
     dda:	b0 e0       	ldi	r27, 0x00	; 0
     ddc:	eb e5       	ldi	r30, 0x5B	; 91
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	80 62       	ori	r24, 0x20	; 32
     de4:	8c 93       	st	X, r24
            return E_OK;
     de6:	1a 82       	std	Y+2, r1	; 0x02
     de8:	05 c0       	rjmp	.+10     	; 0xdf4 <ExternInt_Enable+0x9e>
        }
        else
        {
            return E_NOK;
     dea:	31 e0       	ldi	r19, 0x01	; 1
     dec:	3a 83       	std	Y+2, r19	; 0x02
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <ExternInt_Enable+0x9e>
        }
    default:
        return E_NOK;
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	8a 83       	std	Y+2, r24	; 0x02
     df4:	8a 81       	ldd	r24, Y+2	; 0x02
    }
}
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	0f 90       	pop	r0
     dfc:	0f 90       	pop	r0
     dfe:	cf 91       	pop	r28
     e00:	df 91       	pop	r29
     e02:	08 95       	ret

00000e04 <ExternInt_SetEvent>:
 * Return: ERROR_STATUS -> check if there any error occurs, would return E_NOK else it would return E_OK.
 * Description: function is used to set event of required external interrupt.
 * 				note: usually used to poll on the flag.
 */
ERROR_STATUS ExternInt_SetEvent(uint8 ExternInt_No,uint8 InterruptEvent)
{
     e04:	df 93       	push	r29
     e06:	cf 93       	push	r28
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
     e0c:	2b 97       	sbiw	r28, 0x0b	; 11
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	f8 94       	cli
     e12:	de bf       	out	0x3e, r29	; 62
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	cd bf       	out	0x3d, r28	; 61
     e18:	89 83       	std	Y+1, r24	; 0x01
     e1a:	6a 83       	std	Y+2, r22	; 0x02
    switch (ExternInt_No)
     e1c:	89 81       	ldd	r24, Y+1	; 0x01
     e1e:	28 2f       	mov	r18, r24
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	3b 87       	std	Y+11, r19	; 0x0b
     e24:	2a 87       	std	Y+10, r18	; 0x0a
     e26:	8a 85       	ldd	r24, Y+10	; 0x0a
     e28:	9b 85       	ldd	r25, Y+11	; 0x0b
     e2a:	81 30       	cpi	r24, 0x01	; 1
     e2c:	91 05       	cpc	r25, r1
     e2e:	09 f4       	brne	.+2      	; 0xe32 <ExternInt_SetEvent+0x2e>
     e30:	75 c0       	rjmp	.+234    	; 0xf1c <ExternInt_SetEvent+0x118>
     e32:	2a 85       	ldd	r18, Y+10	; 0x0a
     e34:	3b 85       	ldd	r19, Y+11	; 0x0b
     e36:	22 30       	cpi	r18, 0x02	; 2
     e38:	31 05       	cpc	r19, r1
     e3a:	09 f4       	brne	.+2      	; 0xe3e <ExternInt_SetEvent+0x3a>
     e3c:	d9 c0       	rjmp	.+434    	; 0xff0 <ExternInt_SetEvent+0x1ec>
     e3e:	8a 85       	ldd	r24, Y+10	; 0x0a
     e40:	9b 85       	ldd	r25, Y+11	; 0x0b
     e42:	00 97       	sbiw	r24, 0x00	; 0
     e44:	09 f0       	breq	.+2      	; 0xe48 <ExternInt_SetEvent+0x44>
     e46:	00 c1       	rjmp	.+512    	; 0x1048 <ExternInt_SetEvent+0x244>
    {
    case EXTRN_INT_0:
        if (u8_ExternalInterrptInitCheck[EXTRN_INT_0] == TRUE)
     e48:	80 91 9d 00 	lds	r24, 0x009D
     e4c:	81 30       	cpi	r24, 0x01	; 1
     e4e:	09 f0       	breq	.+2      	; 0xe52 <ExternInt_SetEvent+0x4e>
     e50:	62 c0       	rjmp	.+196    	; 0xf16 <ExternInt_SetEvent+0x112>
        {
            switch (InterruptEvent)
     e52:	8a 81       	ldd	r24, Y+2	; 0x02
     e54:	28 2f       	mov	r18, r24
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	39 87       	std	Y+9, r19	; 0x09
     e5a:	28 87       	std	Y+8, r18	; 0x08
     e5c:	88 85       	ldd	r24, Y+8	; 0x08
     e5e:	99 85       	ldd	r25, Y+9	; 0x09
     e60:	81 30       	cpi	r24, 0x01	; 1
     e62:	91 05       	cpc	r25, r1
     e64:	29 f1       	breq	.+74     	; 0xeb0 <ExternInt_SetEvent+0xac>
     e66:	28 85       	ldd	r18, Y+8	; 0x08
     e68:	39 85       	ldd	r19, Y+9	; 0x09
     e6a:	22 30       	cpi	r18, 0x02	; 2
     e6c:	31 05       	cpc	r19, r1
     e6e:	2c f4       	brge	.+10     	; 0xe7a <ExternInt_SetEvent+0x76>
     e70:	88 85       	ldd	r24, Y+8	; 0x08
     e72:	99 85       	ldd	r25, Y+9	; 0x09
     e74:	00 97       	sbiw	r24, 0x00	; 0
     e76:	61 f0       	breq	.+24     	; 0xe90 <ExternInt_SetEvent+0x8c>
     e78:	4b c0       	rjmp	.+150    	; 0xf10 <ExternInt_SetEvent+0x10c>
     e7a:	28 85       	ldd	r18, Y+8	; 0x08
     e7c:	39 85       	ldd	r19, Y+9	; 0x09
     e7e:	22 30       	cpi	r18, 0x02	; 2
     e80:	31 05       	cpc	r19, r1
     e82:	31 f1       	breq	.+76     	; 0xed0 <ExternInt_SetEvent+0xcc>
     e84:	88 85       	ldd	r24, Y+8	; 0x08
     e86:	99 85       	ldd	r25, Y+9	; 0x09
     e88:	83 30       	cpi	r24, 0x03	; 3
     e8a:	91 05       	cpc	r25, r1
     e8c:	89 f1       	breq	.+98     	; 0xef0 <ExternInt_SetEvent+0xec>
     e8e:	40 c0       	rjmp	.+128    	; 0xf10 <ExternInt_SetEvent+0x10c>
            {
            case LOW_LEVEL:
                ASSIGN_BIT(MCUCR, BIT0, LOW);
     e90:	a5 e5       	ldi	r26, 0x55	; 85
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e5 e5       	ldi	r30, 0x55	; 85
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	8e 7f       	andi	r24, 0xFE	; 254
     e9c:	8c 93       	st	X, r24
                ASSIGN_BIT(MCUCR, BIT1, LOW);
     e9e:	a5 e5       	ldi	r26, 0x55	; 85
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e5 e5       	ldi	r30, 0x55	; 85
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	8d 7f       	andi	r24, 0xFD	; 253
     eaa:	8c 93       	st	X, r24
                return E_OK;
     eac:	1f 82       	std	Y+7, r1	; 0x07
     eae:	ce c0       	rjmp	.+412    	; 0x104c <ExternInt_SetEvent+0x248>
            case LOGICAL_CHANGE:
                ASSIGN_BIT(MCUCR, BIT0, HIGH);
     eb0:	a5 e5       	ldi	r26, 0x55	; 85
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	e5 e5       	ldi	r30, 0x55	; 85
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	81 60       	ori	r24, 0x01	; 1
     ebc:	8c 93       	st	X, r24
                ASSIGN_BIT(MCUCR, BIT1, LOW);
     ebe:	a5 e5       	ldi	r26, 0x55	; 85
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	e5 e5       	ldi	r30, 0x55	; 85
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	8d 7f       	andi	r24, 0xFD	; 253
     eca:	8c 93       	st	X, r24
                return E_OK;
     ecc:	1f 82       	std	Y+7, r1	; 0x07
     ece:	be c0       	rjmp	.+380    	; 0x104c <ExternInt_SetEvent+0x248>
            case FALLING_EDGE:
                ASSIGN_BIT(MCUCR, BIT0, LOW);
     ed0:	a5 e5       	ldi	r26, 0x55	; 85
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e5 e5       	ldi	r30, 0x55	; 85
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	8e 7f       	andi	r24, 0xFE	; 254
     edc:	8c 93       	st	X, r24
                ASSIGN_BIT(MCUCR, BIT1, HIGH);
     ede:	a5 e5       	ldi	r26, 0x55	; 85
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e5 e5       	ldi	r30, 0x55	; 85
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	82 60       	ori	r24, 0x02	; 2
     eea:	8c 93       	st	X, r24
                return E_OK;
     eec:	1f 82       	std	Y+7, r1	; 0x07
     eee:	ae c0       	rjmp	.+348    	; 0x104c <ExternInt_SetEvent+0x248>
            case RISING_EDGE:
                ASSIGN_BIT(MCUCR, BIT0, HIGH);
     ef0:	a5 e5       	ldi	r26, 0x55	; 85
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	e5 e5       	ldi	r30, 0x55	; 85
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	81 60       	ori	r24, 0x01	; 1
     efc:	8c 93       	st	X, r24
                ASSIGN_BIT(MCUCR, BIT1, HIGH);
     efe:	a5 e5       	ldi	r26, 0x55	; 85
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e5 e5       	ldi	r30, 0x55	; 85
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	82 60       	ori	r24, 0x02	; 2
     f0a:	8c 93       	st	X, r24
                return E_OK;
     f0c:	1f 82       	std	Y+7, r1	; 0x07
     f0e:	9e c0       	rjmp	.+316    	; 0x104c <ExternInt_SetEvent+0x248>
            default:
                return E_NOK;
     f10:	91 e0       	ldi	r25, 0x01	; 1
     f12:	9f 83       	std	Y+7, r25	; 0x07
     f14:	9b c0       	rjmp	.+310    	; 0x104c <ExternInt_SetEvent+0x248>
            }
        }
        else
        {
            return E_NOK;
     f16:	21 e0       	ldi	r18, 0x01	; 1
     f18:	2f 83       	std	Y+7, r18	; 0x07
     f1a:	98 c0       	rjmp	.+304    	; 0x104c <ExternInt_SetEvent+0x248>
        }
    case EXTRN_INT_1:
        if (u8_ExternalInterrptInitCheck[EXTRN_INT_1] == TRUE)
     f1c:	80 91 9e 00 	lds	r24, 0x009E
     f20:	81 30       	cpi	r24, 0x01	; 1
     f22:	09 f0       	breq	.+2      	; 0xf26 <ExternInt_SetEvent+0x122>
     f24:	62 c0       	rjmp	.+196    	; 0xfea <ExternInt_SetEvent+0x1e6>
        {
            switch (InterruptEvent)
     f26:	8a 81       	ldd	r24, Y+2	; 0x02
     f28:	28 2f       	mov	r18, r24
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	3e 83       	std	Y+6, r19	; 0x06
     f2e:	2d 83       	std	Y+5, r18	; 0x05
     f30:	8d 81       	ldd	r24, Y+5	; 0x05
     f32:	9e 81       	ldd	r25, Y+6	; 0x06
     f34:	81 30       	cpi	r24, 0x01	; 1
     f36:	91 05       	cpc	r25, r1
     f38:	29 f1       	breq	.+74     	; 0xf84 <ExternInt_SetEvent+0x180>
     f3a:	2d 81       	ldd	r18, Y+5	; 0x05
     f3c:	3e 81       	ldd	r19, Y+6	; 0x06
     f3e:	22 30       	cpi	r18, 0x02	; 2
     f40:	31 05       	cpc	r19, r1
     f42:	2c f4       	brge	.+10     	; 0xf4e <ExternInt_SetEvent+0x14a>
     f44:	8d 81       	ldd	r24, Y+5	; 0x05
     f46:	9e 81       	ldd	r25, Y+6	; 0x06
     f48:	00 97       	sbiw	r24, 0x00	; 0
     f4a:	61 f0       	breq	.+24     	; 0xf64 <ExternInt_SetEvent+0x160>
     f4c:	4b c0       	rjmp	.+150    	; 0xfe4 <ExternInt_SetEvent+0x1e0>
     f4e:	2d 81       	ldd	r18, Y+5	; 0x05
     f50:	3e 81       	ldd	r19, Y+6	; 0x06
     f52:	22 30       	cpi	r18, 0x02	; 2
     f54:	31 05       	cpc	r19, r1
     f56:	31 f1       	breq	.+76     	; 0xfa4 <ExternInt_SetEvent+0x1a0>
     f58:	8d 81       	ldd	r24, Y+5	; 0x05
     f5a:	9e 81       	ldd	r25, Y+6	; 0x06
     f5c:	83 30       	cpi	r24, 0x03	; 3
     f5e:	91 05       	cpc	r25, r1
     f60:	89 f1       	breq	.+98     	; 0xfc4 <ExternInt_SetEvent+0x1c0>
     f62:	40 c0       	rjmp	.+128    	; 0xfe4 <ExternInt_SetEvent+0x1e0>
            {
            case LOW_LEVEL:
                ASSIGN_BIT(MCUCR, BIT2, LOW);
     f64:	a5 e5       	ldi	r26, 0x55	; 85
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e5 e5       	ldi	r30, 0x55	; 85
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	8b 7f       	andi	r24, 0xFB	; 251
     f70:	8c 93       	st	X, r24
                ASSIGN_BIT(MCUCR, BIT3, LOW);
     f72:	a5 e5       	ldi	r26, 0x55	; 85
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e5 e5       	ldi	r30, 0x55	; 85
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	87 7f       	andi	r24, 0xF7	; 247
     f7e:	8c 93       	st	X, r24
                return E_OK;
     f80:	1f 82       	std	Y+7, r1	; 0x07
     f82:	64 c0       	rjmp	.+200    	; 0x104c <ExternInt_SetEvent+0x248>
            case LOGICAL_CHANGE:
                ASSIGN_BIT(MCUCR, BIT2, HIGH);
     f84:	a5 e5       	ldi	r26, 0x55	; 85
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e5 e5       	ldi	r30, 0x55	; 85
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	84 60       	ori	r24, 0x04	; 4
     f90:	8c 93       	st	X, r24
                ASSIGN_BIT(MCUCR, BIT3, LOW);
     f92:	a5 e5       	ldi	r26, 0x55	; 85
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	e5 e5       	ldi	r30, 0x55	; 85
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	87 7f       	andi	r24, 0xF7	; 247
     f9e:	8c 93       	st	X, r24
                return E_OK;
     fa0:	1f 82       	std	Y+7, r1	; 0x07
     fa2:	54 c0       	rjmp	.+168    	; 0x104c <ExternInt_SetEvent+0x248>
            case FALLING_EDGE:
                ASSIGN_BIT(MCUCR, BIT2, LOW);
     fa4:	a5 e5       	ldi	r26, 0x55	; 85
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e5 e5       	ldi	r30, 0x55	; 85
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	8b 7f       	andi	r24, 0xFB	; 251
     fb0:	8c 93       	st	X, r24
                ASSIGN_BIT(MCUCR, BIT3, HIGH);
     fb2:	a5 e5       	ldi	r26, 0x55	; 85
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e5 e5       	ldi	r30, 0x55	; 85
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	88 60       	ori	r24, 0x08	; 8
     fbe:	8c 93       	st	X, r24
                return E_OK;
     fc0:	1f 82       	std	Y+7, r1	; 0x07
     fc2:	44 c0       	rjmp	.+136    	; 0x104c <ExternInt_SetEvent+0x248>
            case RISING_EDGE:
                ASSIGN_BIT(MCUCR, BIT2, HIGH);
     fc4:	a5 e5       	ldi	r26, 0x55	; 85
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e5 e5       	ldi	r30, 0x55	; 85
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	84 60       	ori	r24, 0x04	; 4
     fd0:	8c 93       	st	X, r24
                ASSIGN_BIT(MCUCR, BIT3, HIGH);
     fd2:	a5 e5       	ldi	r26, 0x55	; 85
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e5 e5       	ldi	r30, 0x55	; 85
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	88 60       	ori	r24, 0x08	; 8
     fde:	8c 93       	st	X, r24
                return E_OK;
     fe0:	1f 82       	std	Y+7, r1	; 0x07
     fe2:	34 c0       	rjmp	.+104    	; 0x104c <ExternInt_SetEvent+0x248>
            default:
                return E_NOK;
     fe4:	91 e0       	ldi	r25, 0x01	; 1
     fe6:	9f 83       	std	Y+7, r25	; 0x07
     fe8:	31 c0       	rjmp	.+98     	; 0x104c <ExternInt_SetEvent+0x248>
            }
        }
        else
        {
            return E_NOK;
     fea:	21 e0       	ldi	r18, 0x01	; 1
     fec:	2f 83       	std	Y+7, r18	; 0x07
     fee:	2e c0       	rjmp	.+92     	; 0x104c <ExternInt_SetEvent+0x248>
        }
    case EXTRN_INT_2:
        if (u8_ExternalInterrptInitCheck[EXTRN_INT_2] == TRUE)
     ff0:	80 91 9f 00 	lds	r24, 0x009F
     ff4:	81 30       	cpi	r24, 0x01	; 1
     ff6:	29 f5       	brne	.+74     	; 0x1042 <ExternInt_SetEvent+0x23e>
        {
            switch (InterruptEvent)
     ff8:	8a 81       	ldd	r24, Y+2	; 0x02
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	3c 83       	std	Y+4, r19	; 0x04
    1000:	2b 83       	std	Y+3, r18	; 0x03
    1002:	8b 81       	ldd	r24, Y+3	; 0x03
    1004:	9c 81       	ldd	r25, Y+4	; 0x04
    1006:	82 30       	cpi	r24, 0x02	; 2
    1008:	91 05       	cpc	r25, r1
    100a:	31 f0       	breq	.+12     	; 0x1018 <ExternInt_SetEvent+0x214>
    100c:	2b 81       	ldd	r18, Y+3	; 0x03
    100e:	3c 81       	ldd	r19, Y+4	; 0x04
    1010:	23 30       	cpi	r18, 0x03	; 3
    1012:	31 05       	cpc	r19, r1
    1014:	51 f0       	breq	.+20     	; 0x102a <ExternInt_SetEvent+0x226>
    1016:	12 c0       	rjmp	.+36     	; 0x103c <ExternInt_SetEvent+0x238>
            {
            case FALLING_EDGE:
                ASSIGN_BIT(MCUCSR, BIT6, LOW);
    1018:	a4 e5       	ldi	r26, 0x54	; 84
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e4 e5       	ldi	r30, 0x54	; 84
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	8f 7b       	andi	r24, 0xBF	; 191
    1024:	8c 93       	st	X, r24
                return E_OK;
    1026:	1f 82       	std	Y+7, r1	; 0x07
    1028:	11 c0       	rjmp	.+34     	; 0x104c <ExternInt_SetEvent+0x248>
            case RISING_EDGE:
                ASSIGN_BIT(MCUCSR, BIT6, HIGH);
    102a:	a4 e5       	ldi	r26, 0x54	; 84
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	e4 e5       	ldi	r30, 0x54	; 84
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	80 64       	ori	r24, 0x40	; 64
    1036:	8c 93       	st	X, r24
                return E_OK;
    1038:	1f 82       	std	Y+7, r1	; 0x07
    103a:	08 c0       	rjmp	.+16     	; 0x104c <ExternInt_SetEvent+0x248>
            default:
                return E_NOK;
    103c:	31 e0       	ldi	r19, 0x01	; 1
    103e:	3f 83       	std	Y+7, r19	; 0x07
    1040:	05 c0       	rjmp	.+10     	; 0x104c <ExternInt_SetEvent+0x248>
            }
        }
        else
        {
            return E_NOK;
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	8f 83       	std	Y+7, r24	; 0x07
    1046:	02 c0       	rjmp	.+4      	; 0x104c <ExternInt_SetEvent+0x248>
        }

    default:
        return E_NOK;
    1048:	91 e0       	ldi	r25, 0x01	; 1
    104a:	9f 83       	std	Y+7, r25	; 0x07
    104c:	8f 81       	ldd	r24, Y+7	; 0x07
    }
}
    104e:	2b 96       	adiw	r28, 0x0b	; 11
    1050:	0f b6       	in	r0, 0x3f	; 63
    1052:	f8 94       	cli
    1054:	de bf       	out	0x3e, r29	; 62
    1056:	0f be       	out	0x3f, r0	; 63
    1058:	cd bf       	out	0x3d, r28	; 61
    105a:	cf 91       	pop	r28
    105c:	df 91       	pop	r29
    105e:	08 95       	ret

00001060 <ExternInt_GetStatus>:
 * Return: ERROR_STATUS -> check if there any error occurs, would return E_NOK else it would return E_OK.
 * Description: function is used to get flag of required interrupt status.
 * 				note: usually used to poll on the flag.
 */
ERROR_STATUS ExternInt_GetStatus(uint8 ExternInt_No,uint8 *Status)
{
    1060:	df 93       	push	r29
    1062:	cf 93       	push	r28
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
    1068:	2c 97       	sbiw	r28, 0x0c	; 12
    106a:	0f b6       	in	r0, 0x3f	; 63
    106c:	f8 94       	cli
    106e:	de bf       	out	0x3e, r29	; 62
    1070:	0f be       	out	0x3f, r0	; 63
    1072:	cd bf       	out	0x3d, r28	; 61
    1074:	89 83       	std	Y+1, r24	; 0x01
    1076:	7b 83       	std	Y+3, r23	; 0x03
    1078:	6a 83       	std	Y+2, r22	; 0x02
    switch (ExternInt_No)
    107a:	89 81       	ldd	r24, Y+1	; 0x01
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	3e 83       	std	Y+6, r19	; 0x06
    1082:	2d 83       	std	Y+5, r18	; 0x05
    1084:	8d 81       	ldd	r24, Y+5	; 0x05
    1086:	9e 81       	ldd	r25, Y+6	; 0x06
    1088:	81 30       	cpi	r24, 0x01	; 1
    108a:	91 05       	cpc	r25, r1
    108c:	99 f1       	breq	.+102    	; 0x10f4 <ExternInt_GetStatus+0x94>
    108e:	2d 81       	ldd	r18, Y+5	; 0x05
    1090:	3e 81       	ldd	r19, Y+6	; 0x06
    1092:	22 30       	cpi	r18, 0x02	; 2
    1094:	31 05       	cpc	r19, r1
    1096:	09 f4       	brne	.+2      	; 0x109a <ExternInt_GetStatus+0x3a>
    1098:	52 c0       	rjmp	.+164    	; 0x113e <ExternInt_GetStatus+0xde>
    109a:	8d 81       	ldd	r24, Y+5	; 0x05
    109c:	9e 81       	ldd	r25, Y+6	; 0x06
    109e:	00 97       	sbiw	r24, 0x00	; 0
    10a0:	09 f0       	breq	.+2      	; 0x10a4 <ExternInt_GetStatus+0x44>
    10a2:	77 c0       	rjmp	.+238    	; 0x1192 <ExternInt_GetStatus+0x132>
    {
    case EXTRN_INT_0:
        if (u8_ExternalInterrptInitCheck[EXTRN_INT_0] == TRUE)
    10a4:	80 91 9d 00 	lds	r24, 0x009D
    10a8:	81 30       	cpi	r24, 0x01	; 1
    10aa:	09 f5       	brne	.+66     	; 0x10ee <ExternInt_GetStatus+0x8e>
        {
            *Status = GET_BIT(GIFR, BIT6);
    10ac:	ea e5       	ldi	r30, 0x5A	; 90
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	88 2f       	mov	r24, r24
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	80 74       	andi	r24, 0x40	; 64
    10b8:	90 70       	andi	r25, 0x00	; 0
    10ba:	98 87       	std	Y+8, r25	; 0x08
    10bc:	8f 83       	std	Y+7, r24	; 0x07
    10be:	2f 81       	ldd	r18, Y+7	; 0x07
    10c0:	38 85       	ldd	r19, Y+8	; 0x08
    10c2:	33 23       	and	r19, r19
    10c4:	2c f4       	brge	.+10     	; 0x10d0 <ExternInt_GetStatus+0x70>
    10c6:	8f 81       	ldd	r24, Y+7	; 0x07
    10c8:	98 85       	ldd	r25, Y+8	; 0x08
    10ca:	cf 96       	adiw	r24, 0x3f	; 63
    10cc:	98 87       	std	Y+8, r25	; 0x08
    10ce:	8f 83       	std	Y+7, r24	; 0x07
    10d0:	8f 81       	ldd	r24, Y+7	; 0x07
    10d2:	98 85       	ldd	r25, Y+8	; 0x08
    10d4:	08 2e       	mov	r0, r24
    10d6:	89 2f       	mov	r24, r25
    10d8:	00 0c       	add	r0, r0
    10da:	88 1f       	adc	r24, r24
    10dc:	99 0b       	sbc	r25, r25
    10de:	00 0c       	add	r0, r0
    10e0:	88 1f       	adc	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	ea 81       	ldd	r30, Y+2	; 0x02
    10e6:	fb 81       	ldd	r31, Y+3	; 0x03
    10e8:	80 83       	st	Z, r24
            return E_OK;
    10ea:	1c 82       	std	Y+4, r1	; 0x04
    10ec:	54 c0       	rjmp	.+168    	; 0x1196 <ExternInt_GetStatus+0x136>
        }
        else
        {
            return E_NOK;
    10ee:	91 e0       	ldi	r25, 0x01	; 1
    10f0:	9c 83       	std	Y+4, r25	; 0x04
    10f2:	51 c0       	rjmp	.+162    	; 0x1196 <ExternInt_GetStatus+0x136>
        }
    case EXTRN_INT_1:
        if (u8_ExternalInterrptInitCheck[EXTRN_INT_1] == TRUE)
    10f4:	80 91 9e 00 	lds	r24, 0x009E
    10f8:	81 30       	cpi	r24, 0x01	; 1
    10fa:	f1 f4       	brne	.+60     	; 0x1138 <ExternInt_GetStatus+0xd8>
        {
            *Status = GET_BIT(GIFR, BIT7);
    10fc:	ea e5       	ldi	r30, 0x5A	; 90
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	88 2f       	mov	r24, r24
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	80 78       	andi	r24, 0x80	; 128
    1108:	90 70       	andi	r25, 0x00	; 0
    110a:	9a 87       	std	Y+10, r25	; 0x0a
    110c:	89 87       	std	Y+9, r24	; 0x09
    110e:	29 85       	ldd	r18, Y+9	; 0x09
    1110:	3a 85       	ldd	r19, Y+10	; 0x0a
    1112:	33 23       	and	r19, r19
    1114:	34 f4       	brge	.+12     	; 0x1122 <ExternInt_GetStatus+0xc2>
    1116:	89 85       	ldd	r24, Y+9	; 0x09
    1118:	9a 85       	ldd	r25, Y+10	; 0x0a
    111a:	81 58       	subi	r24, 0x81	; 129
    111c:	9f 4f       	sbci	r25, 0xFF	; 255
    111e:	9a 87       	std	Y+10, r25	; 0x0a
    1120:	89 87       	std	Y+9, r24	; 0x09
    1122:	89 85       	ldd	r24, Y+9	; 0x09
    1124:	9a 85       	ldd	r25, Y+10	; 0x0a
    1126:	88 0f       	add	r24, r24
    1128:	89 2f       	mov	r24, r25
    112a:	88 1f       	adc	r24, r24
    112c:	99 0b       	sbc	r25, r25
    112e:	ea 81       	ldd	r30, Y+2	; 0x02
    1130:	fb 81       	ldd	r31, Y+3	; 0x03
    1132:	80 83       	st	Z, r24
            return E_OK;
    1134:	1c 82       	std	Y+4, r1	; 0x04
    1136:	2f c0       	rjmp	.+94     	; 0x1196 <ExternInt_GetStatus+0x136>
        }
        else
        {
            return E_NOK;
    1138:	91 e0       	ldi	r25, 0x01	; 1
    113a:	9c 83       	std	Y+4, r25	; 0x04
    113c:	2c c0       	rjmp	.+88     	; 0x1196 <ExternInt_GetStatus+0x136>
        }
    case EXTRN_INT_2:
        if (u8_ExternalInterrptInitCheck[EXTRN_INT_2] == TRUE)
    113e:	80 91 9f 00 	lds	r24, 0x009F
    1142:	81 30       	cpi	r24, 0x01	; 1
    1144:	19 f5       	brne	.+70     	; 0x118c <ExternInt_GetStatus+0x12c>
        {
            *Status = GET_BIT(GIFR, BIT5);
    1146:	ea e5       	ldi	r30, 0x5A	; 90
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	88 2f       	mov	r24, r24
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	80 72       	andi	r24, 0x20	; 32
    1152:	90 70       	andi	r25, 0x00	; 0
    1154:	9c 87       	std	Y+12, r25	; 0x0c
    1156:	8b 87       	std	Y+11, r24	; 0x0b
    1158:	2b 85       	ldd	r18, Y+11	; 0x0b
    115a:	3c 85       	ldd	r19, Y+12	; 0x0c
    115c:	33 23       	and	r19, r19
    115e:	2c f4       	brge	.+10     	; 0x116a <ExternInt_GetStatus+0x10a>
    1160:	8b 85       	ldd	r24, Y+11	; 0x0b
    1162:	9c 85       	ldd	r25, Y+12	; 0x0c
    1164:	4f 96       	adiw	r24, 0x1f	; 31
    1166:	9c 87       	std	Y+12, r25	; 0x0c
    1168:	8b 87       	std	Y+11, r24	; 0x0b
    116a:	8b 85       	ldd	r24, Y+11	; 0x0b
    116c:	9c 85       	ldd	r25, Y+12	; 0x0c
    116e:	95 95       	asr	r25
    1170:	87 95       	ror	r24
    1172:	95 95       	asr	r25
    1174:	87 95       	ror	r24
    1176:	95 95       	asr	r25
    1178:	87 95       	ror	r24
    117a:	95 95       	asr	r25
    117c:	87 95       	ror	r24
    117e:	95 95       	asr	r25
    1180:	87 95       	ror	r24
    1182:	ea 81       	ldd	r30, Y+2	; 0x02
    1184:	fb 81       	ldd	r31, Y+3	; 0x03
    1186:	80 83       	st	Z, r24
            return E_OK;
    1188:	1c 82       	std	Y+4, r1	; 0x04
    118a:	05 c0       	rjmp	.+10     	; 0x1196 <ExternInt_GetStatus+0x136>
        }
        else
        {
            return E_NOK;
    118c:	91 e0       	ldi	r25, 0x01	; 1
    118e:	9c 83       	std	Y+4, r25	; 0x04
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <ExternInt_GetStatus+0x136>
        }
    default:
        return E_NOK;
    1192:	21 e0       	ldi	r18, 0x01	; 1
    1194:	2c 83       	std	Y+4, r18	; 0x04
    1196:	8c 81       	ldd	r24, Y+4	; 0x04
    }
}
    1198:	2c 96       	adiw	r28, 0x0c	; 12
    119a:	0f b6       	in	r0, 0x3f	; 63
    119c:	f8 94       	cli
    119e:	de bf       	out	0x3e, r29	; 62
    11a0:	0f be       	out	0x3f, r0	; 63
    11a2:	cd bf       	out	0x3d, r28	; 61
    11a4:	cf 91       	pop	r28
    11a6:	df 91       	pop	r29
    11a8:	08 95       	ret

000011aa <ExternInt_Disable>:
 * In Out:
 * Return: ERROR_STATUS -> check if there any error occurs, would return E_NOK else it would return E_OK.
 * Description: Disable the required external interrupt.
 */
ERROR_STATUS ExternInt_Disable(uint8 ExternInt_No)
{
    11aa:	df 93       	push	r29
    11ac:	cf 93       	push	r28
    11ae:	00 d0       	rcall	.+0      	; 0x11b0 <ExternInt_Disable+0x6>
    11b0:	00 d0       	rcall	.+0      	; 0x11b2 <ExternInt_Disable+0x8>
    11b2:	cd b7       	in	r28, 0x3d	; 61
    11b4:	de b7       	in	r29, 0x3e	; 62
    11b6:	89 83       	std	Y+1, r24	; 0x01
    switch (ExternInt_No)
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	3c 83       	std	Y+4, r19	; 0x04
    11c0:	2b 83       	std	Y+3, r18	; 0x03
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	9c 81       	ldd	r25, Y+4	; 0x04
    11c6:	81 30       	cpi	r24, 0x01	; 1
    11c8:	91 05       	cpc	r25, r1
    11ca:	c9 f0       	breq	.+50     	; 0x11fe <ExternInt_Disable+0x54>
    11cc:	2b 81       	ldd	r18, Y+3	; 0x03
    11ce:	3c 81       	ldd	r19, Y+4	; 0x04
    11d0:	22 30       	cpi	r18, 0x02	; 2
    11d2:	31 05       	cpc	r19, r1
    11d4:	21 f1       	breq	.+72     	; 0x121e <ExternInt_Disable+0x74>
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	9c 81       	ldd	r25, Y+4	; 0x04
    11da:	00 97       	sbiw	r24, 0x00	; 0
    11dc:	81 f5       	brne	.+96     	; 0x123e <ExternInt_Disable+0x94>
    {
    case EXTRN_INT_0:
        if (u8_ExternalInterrptInitCheck[EXTRN_INT_0] == TRUE)
    11de:	80 91 9d 00 	lds	r24, 0x009D
    11e2:	81 30       	cpi	r24, 0x01	; 1
    11e4:	49 f4       	brne	.+18     	; 0x11f8 <ExternInt_Disable+0x4e>
        {
            ASSIGN_BIT(GICR, BIT6, LOW);
    11e6:	ab e5       	ldi	r26, 0x5B	; 91
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	eb e5       	ldi	r30, 0x5B	; 91
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	8f 7b       	andi	r24, 0xBF	; 191
    11f2:	8c 93       	st	X, r24
            return E_OK;
    11f4:	1a 82       	std	Y+2, r1	; 0x02
    11f6:	25 c0       	rjmp	.+74     	; 0x1242 <ExternInt_Disable+0x98>
        }
        else
        {
            return E_NOK;
    11f8:	91 e0       	ldi	r25, 0x01	; 1
    11fa:	9a 83       	std	Y+2, r25	; 0x02
    11fc:	22 c0       	rjmp	.+68     	; 0x1242 <ExternInt_Disable+0x98>
        }
    case EXTRN_INT_1:
        if (u8_ExternalInterrptInitCheck[EXTRN_INT_1] == TRUE)
    11fe:	80 91 9e 00 	lds	r24, 0x009E
    1202:	81 30       	cpi	r24, 0x01	; 1
    1204:	49 f4       	brne	.+18     	; 0x1218 <ExternInt_Disable+0x6e>
        {
            ASSIGN_BIT(GICR, BIT7, LOW);
    1206:	ab e5       	ldi	r26, 0x5B	; 91
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	eb e5       	ldi	r30, 0x5B	; 91
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	8f 77       	andi	r24, 0x7F	; 127
    1212:	8c 93       	st	X, r24
            return E_OK;
    1214:	1a 82       	std	Y+2, r1	; 0x02
    1216:	15 c0       	rjmp	.+42     	; 0x1242 <ExternInt_Disable+0x98>
        }
        else
        {
            return E_NOK;
    1218:	21 e0       	ldi	r18, 0x01	; 1
    121a:	2a 83       	std	Y+2, r18	; 0x02
    121c:	12 c0       	rjmp	.+36     	; 0x1242 <ExternInt_Disable+0x98>
        }
    case EXTRN_INT_2:
        if (u8_ExternalInterrptInitCheck[EXTRN_INT_2] == TRUE)
    121e:	80 91 9f 00 	lds	r24, 0x009F
    1222:	81 30       	cpi	r24, 0x01	; 1
    1224:	49 f4       	brne	.+18     	; 0x1238 <ExternInt_Disable+0x8e>
        {
            ASSIGN_BIT(GICR, BIT5, LOW);
    1226:	ab e5       	ldi	r26, 0x5B	; 91
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	eb e5       	ldi	r30, 0x5B	; 91
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	8f 7d       	andi	r24, 0xDF	; 223
    1232:	8c 93       	st	X, r24
            return E_OK;
    1234:	1a 82       	std	Y+2, r1	; 0x02
    1236:	05 c0       	rjmp	.+10     	; 0x1242 <ExternInt_Disable+0x98>
        }
        else
        {
            return E_NOK;
    1238:	31 e0       	ldi	r19, 0x01	; 1
    123a:	3a 83       	std	Y+2, r19	; 0x02
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <ExternInt_Disable+0x98>
        }
    default:
        return E_NOK;
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	8a 83       	std	Y+2, r24	; 0x02
    1242:	8a 81       	ldd	r24, Y+2	; 0x02
    }
}
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	cf 91       	pop	r28
    124e:	df 91       	pop	r29
    1250:	08 95       	ret

00001252 <__vector_1>:

ISR (INT0_vect)
{
    1252:	1f 92       	push	r1
    1254:	0f 92       	push	r0
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	0f 92       	push	r0
    125a:	11 24       	eor	r1, r1
    125c:	2f 93       	push	r18
    125e:	3f 93       	push	r19
    1260:	4f 93       	push	r20
    1262:	5f 93       	push	r21
    1264:	6f 93       	push	r22
    1266:	7f 93       	push	r23
    1268:	8f 93       	push	r24
    126a:	9f 93       	push	r25
    126c:	af 93       	push	r26
    126e:	bf 93       	push	r27
    1270:	ef 93       	push	r30
    1272:	ff 93       	push	r31
    1274:	df 93       	push	r29
    1276:	cf 93       	push	r28
    1278:	0f 92       	push	r0
    127a:	cd b7       	in	r28, 0x3d	; 61
    127c:	de b7       	in	r29, 0x3e	; 62
    if (CBK_ExIntFunc[EXTRN_INT_0] != NULL)
    127e:	80 91 a3 00 	lds	r24, 0x00A3
    1282:	90 91 a4 00 	lds	r25, 0x00A4
    1286:	00 97       	sbiw	r24, 0x00	; 0
    1288:	61 f0       	breq	.+24     	; 0x12a2 <__vector_1+0x50>
    {
        ERROR_STATUS CBK_FuncCheck = E_NOK;
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	89 83       	std	Y+1, r24	; 0x01
        CBK_FuncCheck = CBK_ExIntFunc[EXTRN_INT_0]();
    128e:	e0 91 a3 00 	lds	r30, 0x00A3
    1292:	f0 91 a4 00 	lds	r31, 0x00A4
    1296:	09 95       	icall
    1298:	89 83       	std	Y+1, r24	; 0x01
        u8_ExternalInterrptNULLPTRCheck[EXTRN_INT_0] = CBK_FuncCheck;
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	80 93 a0 00 	sts	0x00A0, r24
    12a0:	03 c0       	rjmp	.+6      	; 0x12a8 <__vector_1+0x56>
    }
    else
    {
        u8_ExternalInterrptNULLPTRCheck[EXTRN_INT_0] = E_NOK;
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	80 93 a0 00 	sts	0x00A0, r24
    }
}
    12a8:	0f 90       	pop	r0
    12aa:	cf 91       	pop	r28
    12ac:	df 91       	pop	r29
    12ae:	ff 91       	pop	r31
    12b0:	ef 91       	pop	r30
    12b2:	bf 91       	pop	r27
    12b4:	af 91       	pop	r26
    12b6:	9f 91       	pop	r25
    12b8:	8f 91       	pop	r24
    12ba:	7f 91       	pop	r23
    12bc:	6f 91       	pop	r22
    12be:	5f 91       	pop	r21
    12c0:	4f 91       	pop	r20
    12c2:	3f 91       	pop	r19
    12c4:	2f 91       	pop	r18
    12c6:	0f 90       	pop	r0
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	0f 90       	pop	r0
    12cc:	1f 90       	pop	r1
    12ce:	18 95       	reti

000012d0 <__vector_2>:

ISR (INT1_vect)
{
    12d0:	1f 92       	push	r1
    12d2:	0f 92       	push	r0
    12d4:	0f b6       	in	r0, 0x3f	; 63
    12d6:	0f 92       	push	r0
    12d8:	11 24       	eor	r1, r1
    12da:	2f 93       	push	r18
    12dc:	3f 93       	push	r19
    12de:	4f 93       	push	r20
    12e0:	5f 93       	push	r21
    12e2:	6f 93       	push	r22
    12e4:	7f 93       	push	r23
    12e6:	8f 93       	push	r24
    12e8:	9f 93       	push	r25
    12ea:	af 93       	push	r26
    12ec:	bf 93       	push	r27
    12ee:	ef 93       	push	r30
    12f0:	ff 93       	push	r31
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	0f 92       	push	r0
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
    if (CBK_ExIntFunc[EXTRN_INT_1] != NULL)
    12fc:	80 91 a5 00 	lds	r24, 0x00A5
    1300:	90 91 a6 00 	lds	r25, 0x00A6
    1304:	00 97       	sbiw	r24, 0x00	; 0
    1306:	61 f0       	breq	.+24     	; 0x1320 <__vector_2+0x50>
    {
        ERROR_STATUS CBK_FuncCheck = E_NOK;
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	89 83       	std	Y+1, r24	; 0x01
        CBK_FuncCheck = CBK_ExIntFunc[EXTRN_INT_1]();
    130c:	e0 91 a5 00 	lds	r30, 0x00A5
    1310:	f0 91 a6 00 	lds	r31, 0x00A6
    1314:	09 95       	icall
    1316:	89 83       	std	Y+1, r24	; 0x01
        u8_ExternalInterrptNULLPTRCheck[EXTRN_INT_1] = CBK_FuncCheck;
    1318:	89 81       	ldd	r24, Y+1	; 0x01
    131a:	80 93 a1 00 	sts	0x00A1, r24
    131e:	03 c0       	rjmp	.+6      	; 0x1326 <__vector_2+0x56>
    }
    else
    {
        u8_ExternalInterrptNULLPTRCheck[EXTRN_INT_1] = E_NOK;
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	80 93 a1 00 	sts	0x00A1, r24
    }
}
    1326:	0f 90       	pop	r0
    1328:	cf 91       	pop	r28
    132a:	df 91       	pop	r29
    132c:	ff 91       	pop	r31
    132e:	ef 91       	pop	r30
    1330:	bf 91       	pop	r27
    1332:	af 91       	pop	r26
    1334:	9f 91       	pop	r25
    1336:	8f 91       	pop	r24
    1338:	7f 91       	pop	r23
    133a:	6f 91       	pop	r22
    133c:	5f 91       	pop	r21
    133e:	4f 91       	pop	r20
    1340:	3f 91       	pop	r19
    1342:	2f 91       	pop	r18
    1344:	0f 90       	pop	r0
    1346:	0f be       	out	0x3f, r0	; 63
    1348:	0f 90       	pop	r0
    134a:	1f 90       	pop	r1
    134c:	18 95       	reti

0000134e <__vector_3>:

ISR (INT2_vect)
{
    134e:	1f 92       	push	r1
    1350:	0f 92       	push	r0
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	0f 92       	push	r0
    1356:	11 24       	eor	r1, r1
    1358:	2f 93       	push	r18
    135a:	3f 93       	push	r19
    135c:	4f 93       	push	r20
    135e:	5f 93       	push	r21
    1360:	6f 93       	push	r22
    1362:	7f 93       	push	r23
    1364:	8f 93       	push	r24
    1366:	9f 93       	push	r25
    1368:	af 93       	push	r26
    136a:	bf 93       	push	r27
    136c:	ef 93       	push	r30
    136e:	ff 93       	push	r31
    1370:	df 93       	push	r29
    1372:	cf 93       	push	r28
    1374:	0f 92       	push	r0
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
    if (CBK_ExIntFunc[EXTRN_INT_2] != NULL)
    137a:	80 91 a7 00 	lds	r24, 0x00A7
    137e:	90 91 a8 00 	lds	r25, 0x00A8
    1382:	00 97       	sbiw	r24, 0x00	; 0
    1384:	61 f0       	breq	.+24     	; 0x139e <__vector_3+0x50>
    {
        ERROR_STATUS CBK_FuncCheck = E_NOK;
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	89 83       	std	Y+1, r24	; 0x01
        CBK_FuncCheck = CBK_ExIntFunc[EXTRN_INT_2]();
    138a:	e0 91 a7 00 	lds	r30, 0x00A7
    138e:	f0 91 a8 00 	lds	r31, 0x00A8
    1392:	09 95       	icall
    1394:	89 83       	std	Y+1, r24	; 0x01
        u8_ExternalInterrptNULLPTRCheck[EXTRN_INT_2] = CBK_FuncCheck;
    1396:	89 81       	ldd	r24, Y+1	; 0x01
    1398:	80 93 a2 00 	sts	0x00A2, r24
    139c:	03 c0       	rjmp	.+6      	; 0x13a4 <__vector_3+0x56>
    }
    else
    {
        u8_ExternalInterrptNULLPTRCheck[EXTRN_INT_2] = E_NOK;
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	80 93 a2 00 	sts	0x00A2, r24
    }
}
    13a4:	0f 90       	pop	r0
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	ff 91       	pop	r31
    13ac:	ef 91       	pop	r30
    13ae:	bf 91       	pop	r27
    13b0:	af 91       	pop	r26
    13b2:	9f 91       	pop	r25
    13b4:	8f 91       	pop	r24
    13b6:	7f 91       	pop	r23
    13b8:	6f 91       	pop	r22
    13ba:	5f 91       	pop	r21
    13bc:	4f 91       	pop	r20
    13be:	3f 91       	pop	r19
    13c0:	2f 91       	pop	r18
    13c2:	0f 90       	pop	r0
    13c4:	0f be       	out	0x3f, r0	; 63
    13c6:	0f 90       	pop	r0
    13c8:	1f 90       	pop	r1
    13ca:	18 95       	reti

000013cc <SPI_Init>:
/* Description : SPI Initialization                                    */
/* Input       : SPI_Cfg_s* "Pointer to Struct of SPI Configration"    */
/* Output      : Error Checking                                        */
/***********************************************************************/
ERROR_STATUS SPI_Init(SPI_Cfg_s* SPI_Confg_ptr)
{
    13cc:	df 93       	push	r29
    13ce:	cf 93       	push	r28
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
    13d4:	cb 54       	subi	r28, 0x4B	; 75
    13d6:	d0 40       	sbci	r29, 0x00	; 0
    13d8:	0f b6       	in	r0, 0x3f	; 63
    13da:	f8 94       	cli
    13dc:	de bf       	out	0x3e, r29	; 62
    13de:	0f be       	out	0x3f, r0	; 63
    13e0:	cd bf       	out	0x3d, r28	; 61
    13e2:	9a 8f       	std	Y+26, r25	; 0x1a
    13e4:	89 8f       	std	Y+25, r24	; 0x19
    if (SPI_Confg_ptr == NULL)
    13e6:	89 8d       	ldd	r24, Y+25	; 0x19
    13e8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    13ea:	00 97       	sbiw	r24, 0x00	; 0
    13ec:	19 f4       	brne	.+6      	; 0x13f4 <SPI_Init+0x28>
    {
        return E_NOK;
    13ee:	21 e0       	ldi	r18, 0x01	; 1
    13f0:	2b a3       	std	Y+35, r18	; 0x23
    13f2:	ff c2       	rjmp	.+1534   	; 0x19f2 <SPI_Init+0x626>
    }
    ASSIGN_BIT(SPCR, SPE, HIGH);
    13f4:	ad e2       	ldi	r26, 0x2D	; 45
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	ed e2       	ldi	r30, 0x2D	; 45
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	80 64       	ori	r24, 0x40	; 64
    1400:	8c 93       	st	X, r24
    if (SPI_Confg_ptr ->u8_SPIMode == MASTER)
    1402:	e9 8d       	ldd	r30, Y+25	; 0x19
    1404:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1406:	80 81       	ld	r24, Z
    1408:	81 30       	cpi	r24, 0x01	; 1
    140a:	09 f0       	breq	.+2      	; 0x140e <SPI_Init+0x42>
    140c:	a0 c0       	rjmp	.+320    	; 0x154e <SPI_Init+0x182>
    {
        ASSIGN_BIT(SPCR, MSTR, HIGH);
    140e:	ad e2       	ldi	r26, 0x2D	; 45
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	ed e2       	ldi	r30, 0x2D	; 45
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	80 61       	ori	r24, 0x10	; 16
    141a:	8c 93       	st	X, r24

        DIO_Cfg_s DIO_MISO ={MISO_PORT, MISO_PIN, INPUT};
    141c:	ce 01       	movw	r24, r28
    141e:	01 96       	adiw	r24, 0x01	; 1
    1420:	9d a3       	std	Y+37, r25	; 0x25
    1422:	8c a3       	std	Y+36, r24	; 0x24
    1424:	e3 e9       	ldi	r30, 0x93	; 147
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	ff a3       	std	Y+39, r31	; 0x27
    142a:	ee a3       	std	Y+38, r30	; 0x26
    142c:	f3 e0       	ldi	r31, 0x03	; 3
    142e:	f8 a7       	std	Y+40, r31	; 0x28
    1430:	ee a1       	ldd	r30, Y+38	; 0x26
    1432:	ff a1       	ldd	r31, Y+39	; 0x27
    1434:	00 80       	ld	r0, Z
    1436:	2e a1       	ldd	r18, Y+38	; 0x26
    1438:	3f a1       	ldd	r19, Y+39	; 0x27
    143a:	2f 5f       	subi	r18, 0xFF	; 255
    143c:	3f 4f       	sbci	r19, 0xFF	; 255
    143e:	3f a3       	std	Y+39, r19	; 0x27
    1440:	2e a3       	std	Y+38, r18	; 0x26
    1442:	ec a1       	ldd	r30, Y+36	; 0x24
    1444:	fd a1       	ldd	r31, Y+37	; 0x25
    1446:	00 82       	st	Z, r0
    1448:	2c a1       	ldd	r18, Y+36	; 0x24
    144a:	3d a1       	ldd	r19, Y+37	; 0x25
    144c:	2f 5f       	subi	r18, 0xFF	; 255
    144e:	3f 4f       	sbci	r19, 0xFF	; 255
    1450:	3d a3       	std	Y+37, r19	; 0x25
    1452:	2c a3       	std	Y+36, r18	; 0x24
    1454:	38 a5       	ldd	r19, Y+40	; 0x28
    1456:	31 50       	subi	r19, 0x01	; 1
    1458:	38 a7       	std	Y+40, r19	; 0x28
    145a:	88 a5       	ldd	r24, Y+40	; 0x28
    145c:	88 23       	and	r24, r24
    145e:	41 f7       	brne	.-48     	; 0x1430 <SPI_Init+0x64>
        DIO_init (&DIO_MISO);
    1460:	ce 01       	movw	r24, r28
    1462:	01 96       	adiw	r24, 0x01	; 1
    1464:	0e 94 06 03 	call	0x60c	; 0x60c <DIO_init>

        DIO_Cfg_s DIO_MOSI ={MOSI_PORT, MOSI_PIN, OUTPUT};
    1468:	fe 01       	movw	r30, r28
    146a:	34 96       	adiw	r30, 0x04	; 4
    146c:	fa a7       	std	Y+42, r31	; 0x2a
    146e:	e9 a7       	std	Y+41, r30	; 0x29
    1470:	20 e9       	ldi	r18, 0x90	; 144
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	3c a7       	std	Y+44, r19	; 0x2c
    1476:	2b a7       	std	Y+43, r18	; 0x2b
    1478:	33 e0       	ldi	r19, 0x03	; 3
    147a:	3d a7       	std	Y+45, r19	; 0x2d
    147c:	eb a5       	ldd	r30, Y+43	; 0x2b
    147e:	fc a5       	ldd	r31, Y+44	; 0x2c
    1480:	00 80       	ld	r0, Z
    1482:	2b a5       	ldd	r18, Y+43	; 0x2b
    1484:	3c a5       	ldd	r19, Y+44	; 0x2c
    1486:	2f 5f       	subi	r18, 0xFF	; 255
    1488:	3f 4f       	sbci	r19, 0xFF	; 255
    148a:	3c a7       	std	Y+44, r19	; 0x2c
    148c:	2b a7       	std	Y+43, r18	; 0x2b
    148e:	e9 a5       	ldd	r30, Y+41	; 0x29
    1490:	fa a5       	ldd	r31, Y+42	; 0x2a
    1492:	00 82       	st	Z, r0
    1494:	29 a5       	ldd	r18, Y+41	; 0x29
    1496:	3a a5       	ldd	r19, Y+42	; 0x2a
    1498:	2f 5f       	subi	r18, 0xFF	; 255
    149a:	3f 4f       	sbci	r19, 0xFF	; 255
    149c:	3a a7       	std	Y+42, r19	; 0x2a
    149e:	29 a7       	std	Y+41, r18	; 0x29
    14a0:	3d a5       	ldd	r19, Y+45	; 0x2d
    14a2:	31 50       	subi	r19, 0x01	; 1
    14a4:	3d a7       	std	Y+45, r19	; 0x2d
    14a6:	8d a5       	ldd	r24, Y+45	; 0x2d
    14a8:	88 23       	and	r24, r24
    14aa:	41 f7       	brne	.-48     	; 0x147c <SPI_Init+0xb0>
        DIO_init (&DIO_MOSI);
    14ac:	ce 01       	movw	r24, r28
    14ae:	04 96       	adiw	r24, 0x04	; 4
    14b0:	0e 94 06 03 	call	0x60c	; 0x60c <DIO_init>

        DIO_Cfg_s DIO_CLK ={CLK_PORT, CLK_PIN, OUTPUT};
    14b4:	fe 01       	movw	r30, r28
    14b6:	37 96       	adiw	r30, 0x07	; 7
    14b8:	ff a7       	std	Y+47, r31	; 0x2f
    14ba:	ee a7       	std	Y+46, r30	; 0x2e
    14bc:	2d e8       	ldi	r18, 0x8D	; 141
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	39 ab       	std	Y+49, r19	; 0x31
    14c2:	28 ab       	std	Y+48, r18	; 0x30
    14c4:	33 e0       	ldi	r19, 0x03	; 3
    14c6:	3a ab       	std	Y+50, r19	; 0x32
    14c8:	e8 a9       	ldd	r30, Y+48	; 0x30
    14ca:	f9 a9       	ldd	r31, Y+49	; 0x31
    14cc:	00 80       	ld	r0, Z
    14ce:	28 a9       	ldd	r18, Y+48	; 0x30
    14d0:	39 a9       	ldd	r19, Y+49	; 0x31
    14d2:	2f 5f       	subi	r18, 0xFF	; 255
    14d4:	3f 4f       	sbci	r19, 0xFF	; 255
    14d6:	39 ab       	std	Y+49, r19	; 0x31
    14d8:	28 ab       	std	Y+48, r18	; 0x30
    14da:	ee a5       	ldd	r30, Y+46	; 0x2e
    14dc:	ff a5       	ldd	r31, Y+47	; 0x2f
    14de:	00 82       	st	Z, r0
    14e0:	2e a5       	ldd	r18, Y+46	; 0x2e
    14e2:	3f a5       	ldd	r19, Y+47	; 0x2f
    14e4:	2f 5f       	subi	r18, 0xFF	; 255
    14e6:	3f 4f       	sbci	r19, 0xFF	; 255
    14e8:	3f a7       	std	Y+47, r19	; 0x2f
    14ea:	2e a7       	std	Y+46, r18	; 0x2e
    14ec:	3a a9       	ldd	r19, Y+50	; 0x32
    14ee:	31 50       	subi	r19, 0x01	; 1
    14f0:	3a ab       	std	Y+50, r19	; 0x32
    14f2:	8a a9       	ldd	r24, Y+50	; 0x32
    14f4:	88 23       	and	r24, r24
    14f6:	41 f7       	brne	.-48     	; 0x14c8 <SPI_Init+0xfc>
        DIO_init (&DIO_CLK);
    14f8:	ce 01       	movw	r24, r28
    14fa:	07 96       	adiw	r24, 0x07	; 7
    14fc:	0e 94 06 03 	call	0x60c	; 0x60c <DIO_init>

        DIO_Cfg_s DIO_SS ={SS_PORT, SS_PIN, OUTPUT};
    1500:	fe 01       	movw	r30, r28
    1502:	3a 96       	adiw	r30, 0x0a	; 10
    1504:	fc ab       	std	Y+52, r31	; 0x34
    1506:	eb ab       	std	Y+51, r30	; 0x33
    1508:	2a e8       	ldi	r18, 0x8A	; 138
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	3e ab       	std	Y+54, r19	; 0x36
    150e:	2d ab       	std	Y+53, r18	; 0x35
    1510:	33 e0       	ldi	r19, 0x03	; 3
    1512:	3f ab       	std	Y+55, r19	; 0x37
    1514:	ed a9       	ldd	r30, Y+53	; 0x35
    1516:	fe a9       	ldd	r31, Y+54	; 0x36
    1518:	00 80       	ld	r0, Z
    151a:	2d a9       	ldd	r18, Y+53	; 0x35
    151c:	3e a9       	ldd	r19, Y+54	; 0x36
    151e:	2f 5f       	subi	r18, 0xFF	; 255
    1520:	3f 4f       	sbci	r19, 0xFF	; 255
    1522:	3e ab       	std	Y+54, r19	; 0x36
    1524:	2d ab       	std	Y+53, r18	; 0x35
    1526:	eb a9       	ldd	r30, Y+51	; 0x33
    1528:	fc a9       	ldd	r31, Y+52	; 0x34
    152a:	00 82       	st	Z, r0
    152c:	2b a9       	ldd	r18, Y+51	; 0x33
    152e:	3c a9       	ldd	r19, Y+52	; 0x34
    1530:	2f 5f       	subi	r18, 0xFF	; 255
    1532:	3f 4f       	sbci	r19, 0xFF	; 255
    1534:	3c ab       	std	Y+52, r19	; 0x34
    1536:	2b ab       	std	Y+51, r18	; 0x33
    1538:	3f a9       	ldd	r19, Y+55	; 0x37
    153a:	31 50       	subi	r19, 0x01	; 1
    153c:	3f ab       	std	Y+55, r19	; 0x37
    153e:	8f a9       	ldd	r24, Y+55	; 0x37
    1540:	88 23       	and	r24, r24
    1542:	41 f7       	brne	.-48     	; 0x1514 <SPI_Init+0x148>
        DIO_init (&DIO_SS);
    1544:	ce 01       	movw	r24, r28
    1546:	0a 96       	adiw	r24, 0x0a	; 10
    1548:	0e 94 06 03 	call	0x60c	; 0x60c <DIO_init>
    154c:	e9 c0       	rjmp	.+466    	; 0x1720 <SPI_Init+0x354>
    }
    else if (SPI_Confg_ptr ->u8_SPIMode == SLAVE)
    154e:	e9 8d       	ldd	r30, Y+25	; 0x19
    1550:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1552:	80 81       	ld	r24, Z
    1554:	88 23       	and	r24, r24
    1556:	09 f0       	breq	.+2      	; 0x155a <SPI_Init+0x18e>
    1558:	e0 c0       	rjmp	.+448    	; 0x171a <SPI_Init+0x34e>
    {
        ASSIGN_BIT(SPCR, MSTR, LOW);
    155a:	ad e2       	ldi	r26, 0x2D	; 45
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	ed e2       	ldi	r30, 0x2D	; 45
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	8f 7e       	andi	r24, 0xEF	; 239
    1566:	8c 93       	st	X, r24

        DIO_Cfg_s DIO_MISO ={MISO_PORT, MISO_PIN, OUTPUT};
    1568:	fe 01       	movw	r30, r28
    156a:	3d 96       	adiw	r30, 0x0d	; 13
    156c:	f9 af       	std	Y+57, r31	; 0x39
    156e:	e8 af       	std	Y+56, r30	; 0x38
    1570:	27 e8       	ldi	r18, 0x87	; 135
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	3b af       	std	Y+59, r19	; 0x3b
    1576:	2a af       	std	Y+58, r18	; 0x3a
    1578:	33 e0       	ldi	r19, 0x03	; 3
    157a:	3c af       	std	Y+60, r19	; 0x3c
    157c:	ea ad       	ldd	r30, Y+58	; 0x3a
    157e:	fb ad       	ldd	r31, Y+59	; 0x3b
    1580:	00 80       	ld	r0, Z
    1582:	2a ad       	ldd	r18, Y+58	; 0x3a
    1584:	3b ad       	ldd	r19, Y+59	; 0x3b
    1586:	2f 5f       	subi	r18, 0xFF	; 255
    1588:	3f 4f       	sbci	r19, 0xFF	; 255
    158a:	3b af       	std	Y+59, r19	; 0x3b
    158c:	2a af       	std	Y+58, r18	; 0x3a
    158e:	e8 ad       	ldd	r30, Y+56	; 0x38
    1590:	f9 ad       	ldd	r31, Y+57	; 0x39
    1592:	00 82       	st	Z, r0
    1594:	28 ad       	ldd	r18, Y+56	; 0x38
    1596:	39 ad       	ldd	r19, Y+57	; 0x39
    1598:	2f 5f       	subi	r18, 0xFF	; 255
    159a:	3f 4f       	sbci	r19, 0xFF	; 255
    159c:	39 af       	std	Y+57, r19	; 0x39
    159e:	28 af       	std	Y+56, r18	; 0x38
    15a0:	3c ad       	ldd	r19, Y+60	; 0x3c
    15a2:	31 50       	subi	r19, 0x01	; 1
    15a4:	3c af       	std	Y+60, r19	; 0x3c
    15a6:	8c ad       	ldd	r24, Y+60	; 0x3c
    15a8:	88 23       	and	r24, r24
    15aa:	41 f7       	brne	.-48     	; 0x157c <SPI_Init+0x1b0>
        DIO_init (&DIO_MISO);
    15ac:	ce 01       	movw	r24, r28
    15ae:	0d 96       	adiw	r24, 0x0d	; 13
    15b0:	0e 94 06 03 	call	0x60c	; 0x60c <DIO_init>

        DIO_Cfg_s DIO_MOSI ={MOSI_PORT, MOSI_PIN, INPUT};
    15b4:	fe 01       	movw	r30, r28
    15b6:	70 96       	adiw	r30, 0x10	; 16
    15b8:	fe af       	std	Y+62, r31	; 0x3e
    15ba:	ed af       	std	Y+61, r30	; 0x3d
    15bc:	24 e8       	ldi	r18, 0x84	; 132
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	21 96       	adiw	r28, 0x01	; 1
    15c2:	3f af       	std	Y+63, r19	; 0x3f
    15c4:	2e af       	std	Y+62, r18	; 0x3e
    15c6:	21 97       	sbiw	r28, 0x01	; 1
    15c8:	33 e0       	ldi	r19, 0x03	; 3
    15ca:	22 96       	adiw	r28, 0x02	; 2
    15cc:	3f af       	std	Y+63, r19	; 0x3f
    15ce:	22 97       	sbiw	r28, 0x02	; 2
    15d0:	21 96       	adiw	r28, 0x01	; 1
    15d2:	ee ad       	ldd	r30, Y+62	; 0x3e
    15d4:	ff ad       	ldd	r31, Y+63	; 0x3f
    15d6:	21 97       	sbiw	r28, 0x01	; 1
    15d8:	00 80       	ld	r0, Z
    15da:	21 96       	adiw	r28, 0x01	; 1
    15dc:	2e ad       	ldd	r18, Y+62	; 0x3e
    15de:	3f ad       	ldd	r19, Y+63	; 0x3f
    15e0:	21 97       	sbiw	r28, 0x01	; 1
    15e2:	2f 5f       	subi	r18, 0xFF	; 255
    15e4:	3f 4f       	sbci	r19, 0xFF	; 255
    15e6:	21 96       	adiw	r28, 0x01	; 1
    15e8:	3f af       	std	Y+63, r19	; 0x3f
    15ea:	2e af       	std	Y+62, r18	; 0x3e
    15ec:	21 97       	sbiw	r28, 0x01	; 1
    15ee:	ed ad       	ldd	r30, Y+61	; 0x3d
    15f0:	fe ad       	ldd	r31, Y+62	; 0x3e
    15f2:	00 82       	st	Z, r0
    15f4:	2d ad       	ldd	r18, Y+61	; 0x3d
    15f6:	3e ad       	ldd	r19, Y+62	; 0x3e
    15f8:	2f 5f       	subi	r18, 0xFF	; 255
    15fa:	3f 4f       	sbci	r19, 0xFF	; 255
    15fc:	3e af       	std	Y+62, r19	; 0x3e
    15fe:	2d af       	std	Y+61, r18	; 0x3d
    1600:	22 96       	adiw	r28, 0x02	; 2
    1602:	3f ad       	ldd	r19, Y+63	; 0x3f
    1604:	22 97       	sbiw	r28, 0x02	; 2
    1606:	31 50       	subi	r19, 0x01	; 1
    1608:	22 96       	adiw	r28, 0x02	; 2
    160a:	3f af       	std	Y+63, r19	; 0x3f
    160c:	22 97       	sbiw	r28, 0x02	; 2
    160e:	22 96       	adiw	r28, 0x02	; 2
    1610:	8f ad       	ldd	r24, Y+63	; 0x3f
    1612:	22 97       	sbiw	r28, 0x02	; 2
    1614:	88 23       	and	r24, r24
    1616:	e1 f6       	brne	.-72     	; 0x15d0 <SPI_Init+0x204>
        DIO_init (&DIO_MOSI);
    1618:	ce 01       	movw	r24, r28
    161a:	40 96       	adiw	r24, 0x10	; 16
    161c:	0e 94 06 03 	call	0x60c	; 0x60c <DIO_init>

        DIO_Cfg_s DIO_CLK ={CLK_PORT, CLK_PIN, INPUT};
    1620:	fe 01       	movw	r30, r28
    1622:	73 96       	adiw	r30, 0x13	; 19
    1624:	24 96       	adiw	r28, 0x04	; 4
    1626:	ff af       	std	Y+63, r31	; 0x3f
    1628:	ee af       	std	Y+62, r30	; 0x3e
    162a:	24 97       	sbiw	r28, 0x04	; 4
    162c:	21 e8       	ldi	r18, 0x81	; 129
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	26 96       	adiw	r28, 0x06	; 6
    1632:	3f af       	std	Y+63, r19	; 0x3f
    1634:	2e af       	std	Y+62, r18	; 0x3e
    1636:	26 97       	sbiw	r28, 0x06	; 6
    1638:	33 e0       	ldi	r19, 0x03	; 3
    163a:	27 96       	adiw	r28, 0x07	; 7
    163c:	3f af       	std	Y+63, r19	; 0x3f
    163e:	27 97       	sbiw	r28, 0x07	; 7
    1640:	26 96       	adiw	r28, 0x06	; 6
    1642:	ee ad       	ldd	r30, Y+62	; 0x3e
    1644:	ff ad       	ldd	r31, Y+63	; 0x3f
    1646:	26 97       	sbiw	r28, 0x06	; 6
    1648:	00 80       	ld	r0, Z
    164a:	26 96       	adiw	r28, 0x06	; 6
    164c:	2e ad       	ldd	r18, Y+62	; 0x3e
    164e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1650:	26 97       	sbiw	r28, 0x06	; 6
    1652:	2f 5f       	subi	r18, 0xFF	; 255
    1654:	3f 4f       	sbci	r19, 0xFF	; 255
    1656:	26 96       	adiw	r28, 0x06	; 6
    1658:	3f af       	std	Y+63, r19	; 0x3f
    165a:	2e af       	std	Y+62, r18	; 0x3e
    165c:	26 97       	sbiw	r28, 0x06	; 6
    165e:	24 96       	adiw	r28, 0x04	; 4
    1660:	ee ad       	ldd	r30, Y+62	; 0x3e
    1662:	ff ad       	ldd	r31, Y+63	; 0x3f
    1664:	24 97       	sbiw	r28, 0x04	; 4
    1666:	00 82       	st	Z, r0
    1668:	24 96       	adiw	r28, 0x04	; 4
    166a:	2e ad       	ldd	r18, Y+62	; 0x3e
    166c:	3f ad       	ldd	r19, Y+63	; 0x3f
    166e:	24 97       	sbiw	r28, 0x04	; 4
    1670:	2f 5f       	subi	r18, 0xFF	; 255
    1672:	3f 4f       	sbci	r19, 0xFF	; 255
    1674:	24 96       	adiw	r28, 0x04	; 4
    1676:	3f af       	std	Y+63, r19	; 0x3f
    1678:	2e af       	std	Y+62, r18	; 0x3e
    167a:	24 97       	sbiw	r28, 0x04	; 4
    167c:	27 96       	adiw	r28, 0x07	; 7
    167e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1680:	27 97       	sbiw	r28, 0x07	; 7
    1682:	31 50       	subi	r19, 0x01	; 1
    1684:	27 96       	adiw	r28, 0x07	; 7
    1686:	3f af       	std	Y+63, r19	; 0x3f
    1688:	27 97       	sbiw	r28, 0x07	; 7
    168a:	27 96       	adiw	r28, 0x07	; 7
    168c:	8f ad       	ldd	r24, Y+63	; 0x3f
    168e:	27 97       	sbiw	r28, 0x07	; 7
    1690:	88 23       	and	r24, r24
    1692:	b1 f6       	brne	.-84     	; 0x1640 <SPI_Init+0x274>
        DIO_init (&DIO_CLK);
    1694:	ce 01       	movw	r24, r28
    1696:	43 96       	adiw	r24, 0x13	; 19
    1698:	0e 94 06 03 	call	0x60c	; 0x60c <DIO_init>

        DIO_Cfg_s DIO_SS ={SS_PORT, SS_PIN, INPUT};
    169c:	fe 01       	movw	r30, r28
    169e:	76 96       	adiw	r30, 0x16	; 22
    16a0:	29 96       	adiw	r28, 0x09	; 9
    16a2:	ff af       	std	Y+63, r31	; 0x3f
    16a4:	ee af       	std	Y+62, r30	; 0x3e
    16a6:	29 97       	sbiw	r28, 0x09	; 9
    16a8:	2e e7       	ldi	r18, 0x7E	; 126
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	2b 96       	adiw	r28, 0x0b	; 11
    16ae:	3f af       	std	Y+63, r19	; 0x3f
    16b0:	2e af       	std	Y+62, r18	; 0x3e
    16b2:	2b 97       	sbiw	r28, 0x0b	; 11
    16b4:	33 e0       	ldi	r19, 0x03	; 3
    16b6:	2c 96       	adiw	r28, 0x0c	; 12
    16b8:	3f af       	std	Y+63, r19	; 0x3f
    16ba:	2c 97       	sbiw	r28, 0x0c	; 12
    16bc:	2b 96       	adiw	r28, 0x0b	; 11
    16be:	ee ad       	ldd	r30, Y+62	; 0x3e
    16c0:	ff ad       	ldd	r31, Y+63	; 0x3f
    16c2:	2b 97       	sbiw	r28, 0x0b	; 11
    16c4:	00 80       	ld	r0, Z
    16c6:	2b 96       	adiw	r28, 0x0b	; 11
    16c8:	2e ad       	ldd	r18, Y+62	; 0x3e
    16ca:	3f ad       	ldd	r19, Y+63	; 0x3f
    16cc:	2b 97       	sbiw	r28, 0x0b	; 11
    16ce:	2f 5f       	subi	r18, 0xFF	; 255
    16d0:	3f 4f       	sbci	r19, 0xFF	; 255
    16d2:	2b 96       	adiw	r28, 0x0b	; 11
    16d4:	3f af       	std	Y+63, r19	; 0x3f
    16d6:	2e af       	std	Y+62, r18	; 0x3e
    16d8:	2b 97       	sbiw	r28, 0x0b	; 11
    16da:	29 96       	adiw	r28, 0x09	; 9
    16dc:	ee ad       	ldd	r30, Y+62	; 0x3e
    16de:	ff ad       	ldd	r31, Y+63	; 0x3f
    16e0:	29 97       	sbiw	r28, 0x09	; 9
    16e2:	00 82       	st	Z, r0
    16e4:	29 96       	adiw	r28, 0x09	; 9
    16e6:	2e ad       	ldd	r18, Y+62	; 0x3e
    16e8:	3f ad       	ldd	r19, Y+63	; 0x3f
    16ea:	29 97       	sbiw	r28, 0x09	; 9
    16ec:	2f 5f       	subi	r18, 0xFF	; 255
    16ee:	3f 4f       	sbci	r19, 0xFF	; 255
    16f0:	29 96       	adiw	r28, 0x09	; 9
    16f2:	3f af       	std	Y+63, r19	; 0x3f
    16f4:	2e af       	std	Y+62, r18	; 0x3e
    16f6:	29 97       	sbiw	r28, 0x09	; 9
    16f8:	2c 96       	adiw	r28, 0x0c	; 12
    16fa:	3f ad       	ldd	r19, Y+63	; 0x3f
    16fc:	2c 97       	sbiw	r28, 0x0c	; 12
    16fe:	31 50       	subi	r19, 0x01	; 1
    1700:	2c 96       	adiw	r28, 0x0c	; 12
    1702:	3f af       	std	Y+63, r19	; 0x3f
    1704:	2c 97       	sbiw	r28, 0x0c	; 12
    1706:	2c 96       	adiw	r28, 0x0c	; 12
    1708:	8f ad       	ldd	r24, Y+63	; 0x3f
    170a:	2c 97       	sbiw	r28, 0x0c	; 12
    170c:	88 23       	and	r24, r24
    170e:	b1 f6       	brne	.-84     	; 0x16bc <SPI_Init+0x2f0>
        DIO_init (&DIO_SS);
    1710:	ce 01       	movw	r24, r28
    1712:	46 96       	adiw	r24, 0x16	; 22
    1714:	0e 94 06 03 	call	0x60c	; 0x60c <DIO_init>
    1718:	03 c0       	rjmp	.+6      	; 0x1720 <SPI_Init+0x354>
    }
    else
    {
        return E_NOK;
    171a:	91 e0       	ldi	r25, 0x01	; 1
    171c:	9b a3       	std	Y+35, r25	; 0x23
    171e:	69 c1       	rjmp	.+722    	; 0x19f2 <SPI_Init+0x626>
    }

    switch (SPI_Confg_ptr->u8_DataOrder)
    1720:	e9 8d       	ldd	r30, Y+25	; 0x19
    1722:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1724:	82 81       	ldd	r24, Z+2	; 0x02
    1726:	e8 2f       	mov	r30, r24
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	fa a3       	std	Y+34, r31	; 0x22
    172c:	e9 a3       	std	Y+33, r30	; 0x21
    172e:	29 a1       	ldd	r18, Y+33	; 0x21
    1730:	3a a1       	ldd	r19, Y+34	; 0x22
    1732:	21 15       	cp	r18, r1
    1734:	31 05       	cpc	r19, r1
    1736:	69 f0       	breq	.+26     	; 0x1752 <SPI_Init+0x386>
    1738:	89 a1       	ldd	r24, Y+33	; 0x21
    173a:	9a a1       	ldd	r25, Y+34	; 0x22
    173c:	81 30       	cpi	r24, 0x01	; 1
    173e:	91 05       	cpc	r25, r1
    1740:	81 f4       	brne	.+32     	; 0x1762 <SPI_Init+0x396>
    {
    case LSB:
        ASSIGN_BIT(SPCR, DORD, HIGH);
    1742:	ad e2       	ldi	r26, 0x2D	; 45
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	ed e2       	ldi	r30, 0x2D	; 45
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	80 62       	ori	r24, 0x20	; 32
    174e:	8c 93       	st	X, r24
    1750:	0b c0       	rjmp	.+22     	; 0x1768 <SPI_Init+0x39c>
        break;
    case MSB:
        ASSIGN_BIT(SPCR, DORD, LOW);
    1752:	ad e2       	ldi	r26, 0x2D	; 45
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	ed e2       	ldi	r30, 0x2D	; 45
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	8f 7d       	andi	r24, 0xDF	; 223
    175e:	8c 93       	st	X, r24
    1760:	03 c0       	rjmp	.+6      	; 0x1768 <SPI_Init+0x39c>
        break;
    default:
        return E_NOK;
    1762:	91 e0       	ldi	r25, 0x01	; 1
    1764:	9b a3       	std	Y+35, r25	; 0x23
    1766:	45 c1       	rjmp	.+650    	; 0x19f2 <SPI_Init+0x626>
    }

    switch (SPI_Confg_ptr->u8_InterruptMode)
    1768:	e9 8d       	ldd	r30, Y+25	; 0x19
    176a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    176c:	83 81       	ldd	r24, Z+3	; 0x03
    176e:	e8 2f       	mov	r30, r24
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	f8 a3       	std	Y+32, r31	; 0x20
    1774:	ef 8f       	std	Y+31, r30	; 0x1f
    1776:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1778:	38 a1       	ldd	r19, Y+32	; 0x20
    177a:	21 15       	cp	r18, r1
    177c:	31 05       	cpc	r19, r1
    177e:	69 f0       	breq	.+26     	; 0x179a <SPI_Init+0x3ce>
    1780:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1782:	98 a1       	ldd	r25, Y+32	; 0x20
    1784:	81 30       	cpi	r24, 0x01	; 1
    1786:	91 05       	cpc	r25, r1
    1788:	81 f4       	brne	.+32     	; 0x17aa <SPI_Init+0x3de>
    {
    case INTERRUPT:
        ASSIGN_BIT(SPCR, SPIE,HIGH);
    178a:	ad e2       	ldi	r26, 0x2D	; 45
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	ed e2       	ldi	r30, 0x2D	; 45
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	80 68       	ori	r24, 0x80	; 128
    1796:	8c 93       	st	X, r24
    1798:	0b c0       	rjmp	.+22     	; 0x17b0 <SPI_Init+0x3e4>
        break;
    case POLLING:
        ASSIGN_BIT(SPCR, SPIE, LOW);
    179a:	ad e2       	ldi	r26, 0x2D	; 45
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	ed e2       	ldi	r30, 0x2D	; 45
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	8f 77       	andi	r24, 0x7F	; 127
    17a6:	8c 93       	st	X, r24
    17a8:	03 c0       	rjmp	.+6      	; 0x17b0 <SPI_Init+0x3e4>
        break;
    default:
        return E_NOK;
    17aa:	91 e0       	ldi	r25, 0x01	; 1
    17ac:	9b a3       	std	Y+35, r25	; 0x23
    17ae:	21 c1       	rjmp	.+578    	; 0x19f2 <SPI_Init+0x626>
    }
       /* Set prescaler mode */
    switch (SPI_Confg_ptr-> u8_DataMode)
    17b0:	e9 8d       	ldd	r30, Y+25	; 0x19
    17b2:	fa 8d       	ldd	r31, Y+26	; 0x1a
    17b4:	81 81       	ldd	r24, Z+1	; 0x01
    17b6:	e8 2f       	mov	r30, r24
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	fe 8f       	std	Y+30, r31	; 0x1e
    17bc:	ed 8f       	std	Y+29, r30	; 0x1d
    17be:	2d 8d       	ldd	r18, Y+29	; 0x1d
    17c0:	3e 8d       	ldd	r19, Y+30	; 0x1e
    17c2:	21 30       	cpi	r18, 0x01	; 1
    17c4:	31 05       	cpc	r19, r1
    17c6:	e1 f0       	breq	.+56     	; 0x1800 <SPI_Init+0x434>
    17c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17cc:	82 30       	cpi	r24, 0x02	; 2
    17ce:	91 05       	cpc	r25, r1
    17d0:	2c f4       	brge	.+10     	; 0x17dc <SPI_Init+0x410>
    17d2:	ed 8d       	ldd	r30, Y+29	; 0x1d
    17d4:	fe 8d       	ldd	r31, Y+30	; 0x1e
    17d6:	30 97       	sbiw	r30, 0x00	; 0
    17d8:	61 f0       	breq	.+24     	; 0x17f2 <SPI_Init+0x426>
    17da:	2a c0       	rjmp	.+84     	; 0x1830 <SPI_Init+0x464>
    17dc:	2d 8d       	ldd	r18, Y+29	; 0x1d
    17de:	3e 8d       	ldd	r19, Y+30	; 0x1e
    17e0:	22 30       	cpi	r18, 0x02	; 2
    17e2:	31 05       	cpc	r19, r1
    17e4:	a9 f0       	breq	.+42     	; 0x1810 <SPI_Init+0x444>
    17e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17ea:	83 30       	cpi	r24, 0x03	; 3
    17ec:	91 05       	cpc	r25, r1
    17ee:	c1 f0       	breq	.+48     	; 0x1820 <SPI_Init+0x454>
    17f0:	1f c0       	rjmp	.+62     	; 0x1830 <SPI_Init+0x464>
    {
    case MODE_0:
        SPCR |= SPI_Mode0;
    17f2:	ed e2       	ldi	r30, 0x2D	; 45
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	ad e2       	ldi	r26, 0x2D	; 45
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	8c 91       	ld	r24, X
    17fc:	80 83       	st	Z, r24
    17fe:	1b c0       	rjmp	.+54     	; 0x1836 <SPI_Init+0x46a>
        break;
    case MODE_1:
        SPCR |= SPI_Mode1;
    1800:	ad e2       	ldi	r26, 0x2D	; 45
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	ed e2       	ldi	r30, 0x2D	; 45
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	80 61       	ori	r24, 0x10	; 16
    180c:	8c 93       	st	X, r24
    180e:	13 c0       	rjmp	.+38     	; 0x1836 <SPI_Init+0x46a>
        break;
    case MODE_2:
        SPCR |= SPI_Mode2;
    1810:	ad e2       	ldi	r26, 0x2D	; 45
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	ed e2       	ldi	r30, 0x2D	; 45
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	80 62       	ori	r24, 0x20	; 32
    181c:	8c 93       	st	X, r24
    181e:	0b c0       	rjmp	.+22     	; 0x1836 <SPI_Init+0x46a>
        break;
    case MODE_3:
        SPCR |= SPI_Mode3;
    1820:	ad e2       	ldi	r26, 0x2D	; 45
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	ed e2       	ldi	r30, 0x2D	; 45
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	80 63       	ori	r24, 0x30	; 48
    182c:	8c 93       	st	X, r24
    182e:	03 c0       	rjmp	.+6      	; 0x1836 <SPI_Init+0x46a>
        break;
    default:
        return E_NOK;
    1830:	91 e0       	ldi	r25, 0x01	; 1
    1832:	9b a3       	std	Y+35, r25	; 0x23
    1834:	de c0       	rjmp	.+444    	; 0x19f2 <SPI_Init+0x626>
    }
    switch (SPI_Confg_ptr ->u8_Prescaler)
    1836:	e9 8d       	ldd	r30, Y+25	; 0x19
    1838:	fa 8d       	ldd	r31, Y+26	; 0x1a
    183a:	84 81       	ldd	r24, Z+4	; 0x04
    183c:	e8 2f       	mov	r30, r24
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	fc 8f       	std	Y+28, r31	; 0x1c
    1842:	eb 8f       	std	Y+27, r30	; 0x1b
    1844:	2b 8d       	ldd	r18, Y+27	; 0x1b
    1846:	3c 8d       	ldd	r19, Y+28	; 0x1c
    1848:	23 30       	cpi	r18, 0x03	; 3
    184a:	31 05       	cpc	r19, r1
    184c:	09 f4       	brne	.+2      	; 0x1850 <SPI_Init+0x484>
    184e:	3e c0       	rjmp	.+124    	; 0x18cc <SPI_Init+0x500>
    1850:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1852:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1854:	84 30       	cpi	r24, 0x04	; 4
    1856:	91 05       	cpc	r25, r1
    1858:	8c f4       	brge	.+34     	; 0x187c <SPI_Init+0x4b0>
    185a:	eb 8d       	ldd	r30, Y+27	; 0x1b
    185c:	fc 8d       	ldd	r31, Y+28	; 0x1c
    185e:	e1 30       	cpi	r30, 0x01	; 1
    1860:	f1 05       	cpc	r31, r1
    1862:	f1 f0       	breq	.+60     	; 0x18a0 <SPI_Init+0x4d4>
    1864:	2b 8d       	ldd	r18, Y+27	; 0x1b
    1866:	3c 8d       	ldd	r19, Y+28	; 0x1c
    1868:	22 30       	cpi	r18, 0x02	; 2
    186a:	31 05       	cpc	r19, r1
    186c:	0c f0       	brlt	.+2      	; 0x1870 <SPI_Init+0x4a4>
    186e:	86 c0       	rjmp	.+268    	; 0x197c <SPI_Init+0x5b0>
    1870:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1872:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1874:	00 97       	sbiw	r24, 0x00	; 0
    1876:	09 f4       	brne	.+2      	; 0x187a <SPI_Init+0x4ae>
    1878:	6b c0       	rjmp	.+214    	; 0x1950 <SPI_Init+0x584>
    187a:	ac c0       	rjmp	.+344    	; 0x19d4 <SPI_Init+0x608>
    187c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    187e:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1880:	e5 30       	cpi	r30, 0x05	; 5
    1882:	f1 05       	cpc	r31, r1
    1884:	c9 f1       	breq	.+114    	; 0x18f8 <SPI_Init+0x52c>
    1886:	2b 8d       	ldd	r18, Y+27	; 0x1b
    1888:	3c 8d       	ldd	r19, Y+28	; 0x1c
    188a:	25 30       	cpi	r18, 0x05	; 5
    188c:	31 05       	cpc	r19, r1
    188e:	0c f4       	brge	.+2      	; 0x1892 <SPI_Init+0x4c6>
    1890:	8b c0       	rjmp	.+278    	; 0x19a8 <SPI_Init+0x5dc>
    1892:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1894:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1896:	86 30       	cpi	r24, 0x06	; 6
    1898:	91 05       	cpc	r25, r1
    189a:	09 f4       	brne	.+2      	; 0x189e <SPI_Init+0x4d2>
    189c:	43 c0       	rjmp	.+134    	; 0x1924 <SPI_Init+0x558>
    189e:	9a c0       	rjmp	.+308    	; 0x19d4 <SPI_Init+0x608>
    {
    case SPI_PRESCALER_4:
        ASSIGN_BIT(SPCR, SPR0, LOW);
    18a0:	ad e2       	ldi	r26, 0x2D	; 45
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	ed e2       	ldi	r30, 0x2D	; 45
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	8e 7f       	andi	r24, 0xFE	; 254
    18ac:	8c 93       	st	X, r24
        ASSIGN_BIT(SPCR, SPR1, LOW);
    18ae:	ad e2       	ldi	r26, 0x2D	; 45
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	ed e2       	ldi	r30, 0x2D	; 45
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	8d 7f       	andi	r24, 0xFD	; 253
    18ba:	8c 93       	st	X, r24
        ASSIGN_BIT(SPSR, SPI2X, LOW);
    18bc:	ae e2       	ldi	r26, 0x2E	; 46
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	ee e2       	ldi	r30, 0x2E	; 46
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	8e 7f       	andi	r24, 0xFE	; 254
    18c8:	8c 93       	st	X, r24
    18ca:	87 c0       	rjmp	.+270    	; 0x19da <SPI_Init+0x60e>
        break;
    case SPI_PRESCALER_16:
        ASSIGN_BIT(SPCR, SPR0, HIGH);
    18cc:	ad e2       	ldi	r26, 0x2D	; 45
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	ed e2       	ldi	r30, 0x2D	; 45
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	81 60       	ori	r24, 0x01	; 1
    18d8:	8c 93       	st	X, r24
        ASSIGN_BIT(SPCR, SPR1, LOW);
    18da:	ad e2       	ldi	r26, 0x2D	; 45
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	ed e2       	ldi	r30, 0x2D	; 45
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	8d 7f       	andi	r24, 0xFD	; 253
    18e6:	8c 93       	st	X, r24
        ASSIGN_BIT(SPSR, SPI2X, LOW);
    18e8:	ae e2       	ldi	r26, 0x2E	; 46
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	ee e2       	ldi	r30, 0x2E	; 46
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	80 81       	ld	r24, Z
    18f2:	8e 7f       	andi	r24, 0xFE	; 254
    18f4:	8c 93       	st	X, r24
    18f6:	71 c0       	rjmp	.+226    	; 0x19da <SPI_Init+0x60e>
        break;
    case SPI_PRESCALER_64:
        ASSIGN_BIT(SPCR, SPR0, LOW);
    18f8:	ad e2       	ldi	r26, 0x2D	; 45
    18fa:	b0 e0       	ldi	r27, 0x00	; 0
    18fc:	ed e2       	ldi	r30, 0x2D	; 45
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	8e 7f       	andi	r24, 0xFE	; 254
    1904:	8c 93       	st	X, r24
        ASSIGN_BIT(SPCR, SPR1, HIGH);
    1906:	ad e2       	ldi	r26, 0x2D	; 45
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	ed e2       	ldi	r30, 0x2D	; 45
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	82 60       	ori	r24, 0x02	; 2
    1912:	8c 93       	st	X, r24
        ASSIGN_BIT(SPSR, SPI2X, LOW);
    1914:	ae e2       	ldi	r26, 0x2E	; 46
    1916:	b0 e0       	ldi	r27, 0x00	; 0
    1918:	ee e2       	ldi	r30, 0x2E	; 46
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	8e 7f       	andi	r24, 0xFE	; 254
    1920:	8c 93       	st	X, r24
    1922:	5b c0       	rjmp	.+182    	; 0x19da <SPI_Init+0x60e>
        break;
    case SPI_PRESCALER_128:
        ASSIGN_BIT(SPCR, SPR0, HIGH);
    1924:	ad e2       	ldi	r26, 0x2D	; 45
    1926:	b0 e0       	ldi	r27, 0x00	; 0
    1928:	ed e2       	ldi	r30, 0x2D	; 45
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 81       	ld	r24, Z
    192e:	81 60       	ori	r24, 0x01	; 1
    1930:	8c 93       	st	X, r24
        ASSIGN_BIT(SPCR, SPR1, HIGH);
    1932:	ad e2       	ldi	r26, 0x2D	; 45
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	ed e2       	ldi	r30, 0x2D	; 45
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	82 60       	ori	r24, 0x02	; 2
    193e:	8c 93       	st	X, r24
        ASSIGN_BIT(SPSR, SPI2X, LOW);
    1940:	ae e2       	ldi	r26, 0x2E	; 46
    1942:	b0 e0       	ldi	r27, 0x00	; 0
    1944:	ee e2       	ldi	r30, 0x2E	; 46
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	80 81       	ld	r24, Z
    194a:	8e 7f       	andi	r24, 0xFE	; 254
    194c:	8c 93       	st	X, r24
    194e:	45 c0       	rjmp	.+138    	; 0x19da <SPI_Init+0x60e>
        break;
    case SPI_PRESCALER_2:
        ASSIGN_BIT(SPCR, SPR0, LOW);
    1950:	ad e2       	ldi	r26, 0x2D	; 45
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	ed e2       	ldi	r30, 0x2D	; 45
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	8e 7f       	andi	r24, 0xFE	; 254
    195c:	8c 93       	st	X, r24
        ASSIGN_BIT(SPCR, SPR1, LOW);
    195e:	ad e2       	ldi	r26, 0x2D	; 45
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	ed e2       	ldi	r30, 0x2D	; 45
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	8d 7f       	andi	r24, 0xFD	; 253
    196a:	8c 93       	st	X, r24
        ASSIGN_BIT(SPSR, SPI2X, HIGH);
    196c:	ae e2       	ldi	r26, 0x2E	; 46
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	ee e2       	ldi	r30, 0x2E	; 46
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	81 60       	ori	r24, 0x01	; 1
    1978:	8c 93       	st	X, r24
    197a:	2f c0       	rjmp	.+94     	; 0x19da <SPI_Init+0x60e>
        break;
    case SPI_PRESCALER_8:
        ASSIGN_BIT(SPCR, SPR0, HIGH);
    197c:	ad e2       	ldi	r26, 0x2D	; 45
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	ed e2       	ldi	r30, 0x2D	; 45
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	81 60       	ori	r24, 0x01	; 1
    1988:	8c 93       	st	X, r24
        ASSIGN_BIT(SPCR, SPR1, LOW);
    198a:	ad e2       	ldi	r26, 0x2D	; 45
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	ed e2       	ldi	r30, 0x2D	; 45
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	8d 7f       	andi	r24, 0xFD	; 253
    1996:	8c 93       	st	X, r24
        ASSIGN_BIT(SPSR, SPI2X, HIGH);
    1998:	ae e2       	ldi	r26, 0x2E	; 46
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	ee e2       	ldi	r30, 0x2E	; 46
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	81 60       	ori	r24, 0x01	; 1
    19a4:	8c 93       	st	X, r24
    19a6:	19 c0       	rjmp	.+50     	; 0x19da <SPI_Init+0x60e>
        break;
    case SPI_PRESCALER_32:
        ASSIGN_BIT(SPCR, SPR0, LOW);
    19a8:	ad e2       	ldi	r26, 0x2D	; 45
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	ed e2       	ldi	r30, 0x2D	; 45
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	8e 7f       	andi	r24, 0xFE	; 254
    19b4:	8c 93       	st	X, r24
        ASSIGN_BIT(SPCR, SPR1, HIGH);
    19b6:	ad e2       	ldi	r26, 0x2D	; 45
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	ed e2       	ldi	r30, 0x2D	; 45
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	82 60       	ori	r24, 0x02	; 2
    19c2:	8c 93       	st	X, r24
        ASSIGN_BIT(SPSR, SPI2X, HIGH);
    19c4:	ae e2       	ldi	r26, 0x2E	; 46
    19c6:	b0 e0       	ldi	r27, 0x00	; 0
    19c8:	ee e2       	ldi	r30, 0x2E	; 46
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	81 60       	ori	r24, 0x01	; 1
    19d0:	8c 93       	st	X, r24
    19d2:	03 c0       	rjmp	.+6      	; 0x19da <SPI_Init+0x60e>
        break;
    default:
        return E_NOK;
    19d4:	91 e0       	ldi	r25, 0x01	; 1
    19d6:	9b a3       	std	Y+35, r25	; 0x23
    19d8:	0c c0       	rjmp	.+24     	; 0x19f2 <SPI_Init+0x626>
    }
    CBK_SPI_Interrupt = SPI_Confg_ptr ->CBK_Func;
    19da:	e9 8d       	ldd	r30, Y+25	; 0x19
    19dc:	fa 8d       	ldd	r31, Y+26	; 0x1a
    19de:	85 81       	ldd	r24, Z+5	; 0x05
    19e0:	96 81       	ldd	r25, Z+6	; 0x06
    19e2:	90 93 aa 00 	sts	0x00AA, r25
    19e6:	80 93 a9 00 	sts	0x00A9, r24
    SPI_InitializationCheck = TRUE;
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	80 93 ab 00 	sts	0x00AB, r24
    return E_OK;
    19f0:	1b a2       	std	Y+35, r1	; 0x23
    19f2:	8b a1       	ldd	r24, Y+35	; 0x23
}
    19f4:	c5 5b       	subi	r28, 0xB5	; 181
    19f6:	df 4f       	sbci	r29, 0xFF	; 255
    19f8:	0f b6       	in	r0, 0x3f	; 63
    19fa:	f8 94       	cli
    19fc:	de bf       	out	0x3e, r29	; 62
    19fe:	0f be       	out	0x3f, r0	; 63
    1a00:	cd bf       	out	0x3d, r28	; 61
    1a02:	cf 91       	pop	r28
    1a04:	df 91       	pop	r29
    1a06:	08 95       	ret

00001a08 <SPI_SendByte>:
* Input : u8_Data "Byte to be sent"
* Output: None
* @return: Error codes if present
*/
ERROR_STATUS SPI_SendByte(uint8 u8_Data)
{
    1a08:	df 93       	push	r29
    1a0a:	cf 93       	push	r28
    1a0c:	00 d0       	rcall	.+0      	; 0x1a0e <SPI_SendByte+0x6>
    1a0e:	00 d0       	rcall	.+0      	; 0x1a10 <SPI_SendByte+0x8>
    1a10:	cd b7       	in	r28, 0x3d	; 61
    1a12:	de b7       	in	r29, 0x3e	; 62
    1a14:	8b 83       	std	Y+3, r24	; 0x03
    unsigned int test=0;
    1a16:	1a 82       	std	Y+2, r1	; 0x02
    1a18:	19 82       	std	Y+1, r1	; 0x01
    if (SPI_InitializationCheck != TRUE)
    1a1a:	80 91 ab 00 	lds	r24, 0x00AB
    1a1e:	81 30       	cpi	r24, 0x01	; 1
    1a20:	19 f0       	breq	.+6      	; 0x1a28 <SPI_SendByte+0x20>
    {
        return E_NOK;
    1a22:	21 e0       	ldi	r18, 0x01	; 1
    1a24:	2c 83       	std	Y+4, r18	; 0x04
    1a26:	2e c0       	rjmp	.+92     	; 0x1a84 <SPI_SendByte+0x7c>
    }
    DIO_Write (SS_PORT, SS_PIN, LOW);
    1a28:	40 e0       	ldi	r20, 0x00	; 0
    1a2a:	60 e1       	ldi	r22, 0x10	; 16
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	0e 94 c9 03 	call	0x792	; 0x792 <DIO_Write>
    SPDR = u8_Data;
    1a32:	ef e2       	ldi	r30, 0x2F	; 47
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	8b 81       	ldd	r24, Y+3	; 0x03
    1a38:	80 83       	st	Z, r24
    1a3a:	05 c0       	rjmp	.+10     	; 0x1a46 <SPI_SendByte+0x3e>
    while ((GET_BIT(SPSR, SPIF)) != TRUE && test != 10000)test++;
    1a3c:	89 81       	ldd	r24, Y+1	; 0x01
    1a3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a40:	01 96       	adiw	r24, 0x01	; 1
    1a42:	9a 83       	std	Y+2, r25	; 0x02
    1a44:	89 83       	std	Y+1, r24	; 0x01
    1a46:	ee e2       	ldi	r30, 0x2E	; 46
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	88 2f       	mov	r24, r24
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	80 78       	andi	r24, 0x80	; 128
    1a52:	90 70       	andi	r25, 0x00	; 0
    1a54:	80 58       	subi	r24, 0x80	; 128
    1a56:	90 40       	sbci	r25, 0x00	; 0
    1a58:	80 38       	cpi	r24, 0x80	; 128
    1a5a:	91 05       	cpc	r25, r1
    1a5c:	30 f0       	brcs	.+12     	; 0x1a6a <SPI_SendByte+0x62>
    1a5e:	89 81       	ldd	r24, Y+1	; 0x01
    1a60:	9a 81       	ldd	r25, Y+2	; 0x02
    1a62:	27 e2       	ldi	r18, 0x27	; 39
    1a64:	80 31       	cpi	r24, 0x10	; 16
    1a66:	92 07       	cpc	r25, r18
    1a68:	49 f7       	brne	.-46     	; 0x1a3c <SPI_SendByte+0x34>
    DIO_Write (SS_PORT, SS_PIN, HIGH);
    1a6a:	4f ef       	ldi	r20, 0xFF	; 255
    1a6c:	60 e1       	ldi	r22, 0x10	; 16
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	0e 94 c9 03 	call	0x792	; 0x792 <DIO_Write>
    ASSIGN_BIT(SPSR, SPIF, LOW);
    1a74:	ae e2       	ldi	r26, 0x2E	; 46
    1a76:	b0 e0       	ldi	r27, 0x00	; 0
    1a78:	ee e2       	ldi	r30, 0x2E	; 46
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	80 81       	ld	r24, Z
    1a7e:	8f 77       	andi	r24, 0x7F	; 127
    1a80:	8c 93       	st	X, r24
    return E_OK;
    1a82:	1c 82       	std	Y+4, r1	; 0x04
    1a84:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1a86:	0f 90       	pop	r0
    1a88:	0f 90       	pop	r0
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	cf 91       	pop	r28
    1a90:	df 91       	pop	r29
    1a92:	08 95       	ret

00001a94 <SPI_ReceiveByte>:
* Input : None
* Output: *ptru8_Data "points to where received byte is going to be stored in"
* @return: Error codes if present
*/
ERROR_STATUS SPI_ReceiveByte(uint8 *ptru8_Data)
{
    1a94:	df 93       	push	r29
    1a96:	cf 93       	push	r28
    1a98:	00 d0       	rcall	.+0      	; 0x1a9a <SPI_ReceiveByte+0x6>
    1a9a:	0f 92       	push	r0
    1a9c:	cd b7       	in	r28, 0x3d	; 61
    1a9e:	de b7       	in	r29, 0x3e	; 62
    1aa0:	9a 83       	std	Y+2, r25	; 0x02
    1aa2:	89 83       	std	Y+1, r24	; 0x01
    if (SPI_InitializationCheck != TRUE)
    1aa4:	80 91 ab 00 	lds	r24, 0x00AB
    1aa8:	81 30       	cpi	r24, 0x01	; 1
    1aaa:	19 f0       	breq	.+6      	; 0x1ab2 <SPI_ReceiveByte+0x1e>
    {
        return E_NOK;
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	8b 83       	std	Y+3, r24	; 0x03
    1ab0:	1a c0       	rjmp	.+52     	; 0x1ae6 <SPI_ReceiveByte+0x52>
    }
    while ((GET_BIT(SPSR, SPIF)) != TRUE);
    1ab2:	ee e2       	ldi	r30, 0x2E	; 46
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	88 2f       	mov	r24, r24
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	80 78       	andi	r24, 0x80	; 128
    1abe:	90 70       	andi	r25, 0x00	; 0
    1ac0:	80 58       	subi	r24, 0x80	; 128
    1ac2:	90 40       	sbci	r25, 0x00	; 0
    1ac4:	80 38       	cpi	r24, 0x80	; 128
    1ac6:	91 05       	cpc	r25, r1
    1ac8:	a0 f7       	brcc	.-24     	; 0x1ab2 <SPI_ReceiveByte+0x1e>
    ASSIGN_BIT(SPSR, SPIF, FALSE);
    1aca:	ae e2       	ldi	r26, 0x2E	; 46
    1acc:	b0 e0       	ldi	r27, 0x00	; 0
    1ace:	ee e2       	ldi	r30, 0x2E	; 46
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	8f 77       	andi	r24, 0x7F	; 127
    1ad6:	8c 93       	st	X, r24
    *ptru8_Data = SPDR;
    1ad8:	ef e2       	ldi	r30, 0x2F	; 47
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	e9 81       	ldd	r30, Y+1	; 0x01
    1ae0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ae2:	80 83       	st	Z, r24
    return E_OK;
    1ae4:	1b 82       	std	Y+3, r1	; 0x03
    1ae6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1ae8:	0f 90       	pop	r0
    1aea:	0f 90       	pop	r0
    1aec:	0f 90       	pop	r0
    1aee:	cf 91       	pop	r28
    1af0:	df 91       	pop	r29
    1af2:	08 95       	ret

00001af4 <SPI_GetStatus>:
* Input : None
* Output: *u8_Data "points to where flag value is going to be stored in"
* @return: Error codes if present
*/
ERROR_STATUS SPI_GetStatus(uint8 *u8_Data)
{
    1af4:	df 93       	push	r29
    1af6:	cf 93       	push	r28
    1af8:	00 d0       	rcall	.+0      	; 0x1afa <SPI_GetStatus+0x6>
    1afa:	00 d0       	rcall	.+0      	; 0x1afc <SPI_GetStatus+0x8>
    1afc:	0f 92       	push	r0
    1afe:	cd b7       	in	r28, 0x3d	; 61
    1b00:	de b7       	in	r29, 0x3e	; 62
    1b02:	9a 83       	std	Y+2, r25	; 0x02
    1b04:	89 83       	std	Y+1, r24	; 0x01
    if (SPI_InitializationCheck != TRUE)
    1b06:	80 91 ab 00 	lds	r24, 0x00AB
    1b0a:	81 30       	cpi	r24, 0x01	; 1
    1b0c:	19 f0       	breq	.+6      	; 0x1b14 <SPI_GetStatus+0x20>
    {
        return E_NOK;
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	8b 83       	std	Y+3, r24	; 0x03
    1b12:	1d c0       	rjmp	.+58     	; 0x1b4e <SPI_GetStatus+0x5a>
    }
    *u8_Data = GET_BIT(SPSR, SPIF);
    1b14:	ee e2       	ldi	r30, 0x2E	; 46
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 81       	ld	r24, Z
    1b1a:	88 2f       	mov	r24, r24
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	80 78       	andi	r24, 0x80	; 128
    1b20:	90 70       	andi	r25, 0x00	; 0
    1b22:	9d 83       	std	Y+5, r25	; 0x05
    1b24:	8c 83       	std	Y+4, r24	; 0x04
    1b26:	8c 81       	ldd	r24, Y+4	; 0x04
    1b28:	9d 81       	ldd	r25, Y+5	; 0x05
    1b2a:	99 23       	and	r25, r25
    1b2c:	34 f4       	brge	.+12     	; 0x1b3a <SPI_GetStatus+0x46>
    1b2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b30:	9d 81       	ldd	r25, Y+5	; 0x05
    1b32:	81 58       	subi	r24, 0x81	; 129
    1b34:	9f 4f       	sbci	r25, 0xFF	; 255
    1b36:	9d 83       	std	Y+5, r25	; 0x05
    1b38:	8c 83       	std	Y+4, r24	; 0x04
    1b3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b3c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b3e:	88 0f       	add	r24, r24
    1b40:	89 2f       	mov	r24, r25
    1b42:	88 1f       	adc	r24, r24
    1b44:	99 0b       	sbc	r25, r25
    1b46:	e9 81       	ldd	r30, Y+1	; 0x01
    1b48:	fa 81       	ldd	r31, Y+2	; 0x02
    1b4a:	80 83       	st	Z, r24
    return E_OK;
    1b4c:	1b 82       	std	Y+3, r1	; 0x03
    1b4e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
    1b54:	0f 90       	pop	r0
    1b56:	0f 90       	pop	r0
    1b58:	0f 90       	pop	r0
    1b5a:	cf 91       	pop	r28
    1b5c:	df 91       	pop	r29
    1b5e:	08 95       	ret

00001b60 <__vector_12>:

ISR (SPI_STC_vect)
{
    1b60:	1f 92       	push	r1
    1b62:	0f 92       	push	r0
    1b64:	0f b6       	in	r0, 0x3f	; 63
    1b66:	0f 92       	push	r0
    1b68:	11 24       	eor	r1, r1
    1b6a:	2f 93       	push	r18
    1b6c:	3f 93       	push	r19
    1b6e:	4f 93       	push	r20
    1b70:	5f 93       	push	r21
    1b72:	6f 93       	push	r22
    1b74:	7f 93       	push	r23
    1b76:	8f 93       	push	r24
    1b78:	9f 93       	push	r25
    1b7a:	af 93       	push	r26
    1b7c:	bf 93       	push	r27
    1b7e:	ef 93       	push	r30
    1b80:	ff 93       	push	r31
    1b82:	df 93       	push	r29
    1b84:	cf 93       	push	r28
    1b86:	cd b7       	in	r28, 0x3d	; 61
    1b88:	de b7       	in	r29, 0x3e	; 62
    CBK_SPI_Interrupt();
    1b8a:	e0 91 a9 00 	lds	r30, 0x00A9
    1b8e:	f0 91 aa 00 	lds	r31, 0x00AA
    1b92:	09 95       	icall
}
    1b94:	cf 91       	pop	r28
    1b96:	df 91       	pop	r29
    1b98:	ff 91       	pop	r31
    1b9a:	ef 91       	pop	r30
    1b9c:	bf 91       	pop	r27
    1b9e:	af 91       	pop	r26
    1ba0:	9f 91       	pop	r25
    1ba2:	8f 91       	pop	r24
    1ba4:	7f 91       	pop	r23
    1ba6:	6f 91       	pop	r22
    1ba8:	5f 91       	pop	r21
    1baa:	4f 91       	pop	r20
    1bac:	3f 91       	pop	r19
    1bae:	2f 91       	pop	r18
    1bb0:	0f 90       	pop	r0
    1bb2:	0f be       	out	0x3f, r0	; 63
    1bb4:	0f 90       	pop	r0
    1bb6:	1f 90       	pop	r1
    1bb8:	18 95       	reti

00001bba <Timer_Init>:
 * Description: Initiates the module.
 *
 */

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{
    1bba:	df 93       	push	r29
    1bbc:	cf 93       	push	r28
    1bbe:	cd b7       	in	r28, 0x3d	; 61
    1bc0:	de b7       	in	r29, 0x3e	; 62
    1bc2:	65 97       	sbiw	r28, 0x15	; 21
    1bc4:	0f b6       	in	r0, 0x3f	; 63
    1bc6:	f8 94       	cli
    1bc8:	de bf       	out	0x3e, r29	; 62
    1bca:	0f be       	out	0x3f, r0	; 63
    1bcc:	cd bf       	out	0x3d, r28	; 61
    1bce:	9a 83       	std	Y+2, r25	; 0x02
    1bd0:	89 83       	std	Y+1, r24	; 0x01
  if (Timer_cfg == NULL)
    1bd2:	89 81       	ldd	r24, Y+1	; 0x01
    1bd4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd6:	00 97       	sbiw	r24, 0x00	; 0
    1bd8:	19 f4       	brne	.+6      	; 0x1be0 <Timer_Init+0x26>
  {
      return E_NOK;
    1bda:	21 e0       	ldi	r18, 0x01	; 1
    1bdc:	2d 8b       	std	Y+21, r18	; 0x15
    1bde:	56 c2       	rjmp	.+1196   	; 0x208c <Timer_Init+0x4d2>
  }
  CBK_TimerFuncPtr[Timer_cfg->Timer_CH_NO] = Timer_cfg->Timer_CBK_PTR;
    1be0:	e9 81       	ldd	r30, Y+1	; 0x01
    1be2:	fa 81       	ldd	r31, Y+2	; 0x02
    1be4:	80 81       	ld	r24, Z
    1be6:	88 2f       	mov	r24, r24
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	e9 81       	ldd	r30, Y+1	; 0x01
    1bec:	fa 81       	ldd	r31, Y+2	; 0x02
    1bee:	24 81       	ldd	r18, Z+4	; 0x04
    1bf0:	35 81       	ldd	r19, Z+5	; 0x05
    1bf2:	88 0f       	add	r24, r24
    1bf4:	99 1f       	adc	r25, r25
    1bf6:	fc 01       	movw	r30, r24
    1bf8:	e4 55       	subi	r30, 0x54	; 84
    1bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfc:	31 83       	std	Z+1, r19	; 0x01
    1bfe:	20 83       	st	Z, r18
  switch (Timer_cfg->Timer_CH_NO)
    1c00:	e9 81       	ldd	r30, Y+1	; 0x01
    1c02:	fa 81       	ldd	r31, Y+2	; 0x02
    1c04:	80 81       	ld	r24, Z
    1c06:	28 2f       	mov	r18, r24
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	3c 8b       	std	Y+20, r19	; 0x14
    1c0c:	2b 8b       	std	Y+19, r18	; 0x13
    1c0e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c10:	9c 89       	ldd	r25, Y+20	; 0x14
    1c12:	81 30       	cpi	r24, 0x01	; 1
    1c14:	91 05       	cpc	r25, r1
    1c16:	09 f4       	brne	.+2      	; 0x1c1a <Timer_Init+0x60>
    1c18:	bf c0       	rjmp	.+382    	; 0x1d98 <Timer_Init+0x1de>
    1c1a:	2b 89       	ldd	r18, Y+19	; 0x13
    1c1c:	3c 89       	ldd	r19, Y+20	; 0x14
    1c1e:	22 30       	cpi	r18, 0x02	; 2
    1c20:	31 05       	cpc	r19, r1
    1c22:	09 f4       	brne	.+2      	; 0x1c26 <Timer_Init+0x6c>
    1c24:	89 c1       	rjmp	.+786    	; 0x1f38 <Timer_Init+0x37e>
    1c26:	8b 89       	ldd	r24, Y+19	; 0x13
    1c28:	9c 89       	ldd	r25, Y+20	; 0x14
    1c2a:	00 97       	sbiw	r24, 0x00	; 0
    1c2c:	09 f0       	breq	.+2      	; 0x1c30 <Timer_Init+0x76>
    1c2e:	2c c2       	rjmp	.+1112   	; 0x2088 <Timer_Init+0x4ce>
  {
	case TIMER_CH0:
	  switch (Timer_cfg->Timer_Mode)
    1c30:	e9 81       	ldd	r30, Y+1	; 0x01
    1c32:	fa 81       	ldd	r31, Y+2	; 0x02
    1c34:	81 81       	ldd	r24, Z+1	; 0x01
    1c36:	28 2f       	mov	r18, r24
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	3a 8b       	std	Y+18, r19	; 0x12
    1c3c:	29 8b       	std	Y+17, r18	; 0x11
    1c3e:	89 89       	ldd	r24, Y+17	; 0x11
    1c40:	9a 89       	ldd	r25, Y+18	; 0x12
    1c42:	81 30       	cpi	r24, 0x01	; 1
    1c44:	91 05       	cpc	r25, r1
    1c46:	69 f0       	breq	.+26     	; 0x1c62 <Timer_Init+0xa8>
    1c48:	29 89       	ldd	r18, Y+17	; 0x11
    1c4a:	3a 89       	ldd	r19, Y+18	; 0x12
    1c4c:	22 30       	cpi	r18, 0x02	; 2
    1c4e:	31 05       	cpc	r19, r1
    1c50:	69 f0       	breq	.+26     	; 0x1c6c <Timer_Init+0xb2>
    1c52:	89 89       	ldd	r24, Y+17	; 0x11
    1c54:	9a 89       	ldd	r25, Y+18	; 0x12
    1c56:	00 97       	sbiw	r24, 0x00	; 0
    1c58:	71 f4       	brne	.+28     	; 0x1c76 <Timer_Init+0xbc>
	  {
		case TIMER_MODE:
		  TCCR0 = T0_NORMAL_MODE;
    1c5a:	e3 e5       	ldi	r30, 0x53	; 83
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	10 82       	st	Z, r1
    1c60:	0d c0       	rjmp	.+26     	; 0x1c7c <Timer_Init+0xc2>
		  break;
		case COUNTER_UP_MODE:
		  TCCR0 = T0_Up_Count;
    1c62:	e3 e5       	ldi	r30, 0x53	; 83
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	87 e0       	ldi	r24, 0x07	; 7
    1c68:	80 83       	st	Z, r24
    1c6a:	08 c0       	rjmp	.+16     	; 0x1c7c <Timer_Init+0xc2>
		  break;
		case COUNTER_DOWN_MODE:
		  TCCR0 = T0_Down_count;
    1c6c:	e3 e5       	ldi	r30, 0x53	; 83
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	86 e0       	ldi	r24, 0x06	; 6
    1c72:	80 83       	st	Z, r24
    1c74:	03 c0       	rjmp	.+6      	; 0x1c7c <Timer_Init+0xc2>
		  break;
		default:
		  return E_NOK;
    1c76:	91 e0       	ldi	r25, 0x01	; 1
    1c78:	9d 8b       	std	Y+21, r25	; 0x15
    1c7a:	08 c2       	rjmp	.+1040   	; 0x208c <Timer_Init+0x4d2>
	  }
	  switch (Timer_cfg->Timer_Polling_Or_Interrupt)
    1c7c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c7e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c80:	82 81       	ldd	r24, Z+2	; 0x02
    1c82:	28 2f       	mov	r18, r24
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	38 8b       	std	Y+16, r19	; 0x10
    1c88:	2f 87       	std	Y+15, r18	; 0x0f
    1c8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c8c:	98 89       	ldd	r25, Y+16	; 0x10
    1c8e:	00 97       	sbiw	r24, 0x00	; 0
    1c90:	31 f0       	breq	.+12     	; 0x1c9e <Timer_Init+0xe4>
    1c92:	2f 85       	ldd	r18, Y+15	; 0x0f
    1c94:	38 89       	ldd	r19, Y+16	; 0x10
    1c96:	21 30       	cpi	r18, 0x01	; 1
    1c98:	31 05       	cpc	r19, r1
    1c9a:	81 f0       	breq	.+32     	; 0x1cbc <Timer_Init+0x102>
    1c9c:	1e c0       	rjmp	.+60     	; 0x1cda <Timer_Init+0x120>
	  {
		case TIMER_POLLING_MODE:
		  ASSIGN_BIT(TIMSK, BIT0, LOW);
    1c9e:	a9 e5       	ldi	r26, 0x59	; 89
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	e9 e5       	ldi	r30, 0x59	; 89
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	8e 7f       	andi	r24, 0xFE	; 254
    1caa:	8c 93       	st	X, r24
		  ASSIGN_BIT(TIMSK, BIT1, LOW);
    1cac:	a9 e5       	ldi	r26, 0x59	; 89
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	e9 e5       	ldi	r30, 0x59	; 89
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	80 81       	ld	r24, Z
    1cb6:	8d 7f       	andi	r24, 0xFD	; 253
    1cb8:	8c 93       	st	X, r24
    1cba:	12 c0       	rjmp	.+36     	; 0x1ce0 <Timer_Init+0x126>
		  break;
		case TIMER_INTERRUPT_MODE:
		  ASSIGN_BIT(TIMSK, BIT0, HIGH);
    1cbc:	a9 e5       	ldi	r26, 0x59	; 89
    1cbe:	b0 e0       	ldi	r27, 0x00	; 0
    1cc0:	e9 e5       	ldi	r30, 0x59	; 89
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	81 60       	ori	r24, 0x01	; 1
    1cc8:	8c 93       	st	X, r24
		  ASSIGN_BIT(TIMSK, BIT1, LOW);
    1cca:	a9 e5       	ldi	r26, 0x59	; 89
    1ccc:	b0 e0       	ldi	r27, 0x00	; 0
    1cce:	e9 e5       	ldi	r30, 0x59	; 89
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	8d 7f       	andi	r24, 0xFD	; 253
    1cd6:	8c 93       	st	X, r24
    1cd8:	03 c0       	rjmp	.+6      	; 0x1ce0 <Timer_Init+0x126>
		  break;
		default:
		  return E_NOK;
    1cda:	31 e0       	ldi	r19, 0x01	; 1
    1cdc:	3d 8b       	std	Y+21, r19	; 0x15
    1cde:	d6 c1       	rjmp	.+940    	; 0x208c <Timer_Init+0x4d2>
	  }
	  if (Timer_cfg->Timer_Mode == T0_NORMAL_MODE && Timer_cfg->Timer_Prescaler != T0_NO_CLOCK)
    1ce0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ce2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ce4:	81 81       	ldd	r24, Z+1	; 0x01
    1ce6:	88 23       	and	r24, r24
    1ce8:	09 f0       	breq	.+2      	; 0x1cec <Timer_Init+0x132>
    1cea:	44 c0       	rjmp	.+136    	; 0x1d74 <Timer_Init+0x1ba>
    1cec:	e9 81       	ldd	r30, Y+1	; 0x01
    1cee:	fa 81       	ldd	r31, Y+2	; 0x02
    1cf0:	83 81       	ldd	r24, Z+3	; 0x03
    1cf2:	88 23       	and	r24, r24
    1cf4:	09 f4       	brne	.+2      	; 0x1cf8 <Timer_Init+0x13e>
    1cf6:	3e c0       	rjmp	.+124    	; 0x1d74 <Timer_Init+0x1ba>
      {
        switch (Timer_cfg->Timer_Prescaler)
    1cf8:	e9 81       	ldd	r30, Y+1	; 0x01
    1cfa:	fa 81       	ldd	r31, Y+2	; 0x02
    1cfc:	83 81       	ldd	r24, Z+3	; 0x03
    1cfe:	28 2f       	mov	r18, r24
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	3e 87       	std	Y+14, r19	; 0x0e
    1d04:	2d 87       	std	Y+13, r18	; 0x0d
    1d06:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d08:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d0a:	84 30       	cpi	r24, 0x04	; 4
    1d0c:	91 05       	cpc	r25, r1
    1d0e:	19 f1       	breq	.+70     	; 0x1d56 <Timer_Init+0x19c>
    1d10:	2d 85       	ldd	r18, Y+13	; 0x0d
    1d12:	3e 85       	ldd	r19, Y+14	; 0x0e
    1d14:	25 30       	cpi	r18, 0x05	; 5
    1d16:	31 05       	cpc	r19, r1
    1d18:	5c f4       	brge	.+22     	; 0x1d30 <Timer_Init+0x176>
    1d1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d1e:	81 30       	cpi	r24, 0x01	; 1
    1d20:	91 05       	cpc	r25, r1
    1d22:	89 f0       	breq	.+34     	; 0x1d46 <Timer_Init+0x18c>
    1d24:	2d 85       	ldd	r18, Y+13	; 0x0d
    1d26:	3e 85       	ldd	r19, Y+14	; 0x0e
    1d28:	22 30       	cpi	r18, 0x02	; 2
    1d2a:	31 05       	cpc	r19, r1
    1d2c:	81 f0       	breq	.+32     	; 0x1d4e <Timer_Init+0x194>
    1d2e:	1f c0       	rjmp	.+62     	; 0x1d6e <Timer_Init+0x1b4>
    1d30:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d32:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d34:	86 30       	cpi	r24, 0x06	; 6
    1d36:	91 05       	cpc	r25, r1
    1d38:	91 f0       	breq	.+36     	; 0x1d5e <Timer_Init+0x1a4>
    1d3a:	2d 85       	ldd	r18, Y+13	; 0x0d
    1d3c:	3e 85       	ldd	r19, Y+14	; 0x0e
    1d3e:	27 30       	cpi	r18, 0x07	; 7
    1d40:	31 05       	cpc	r19, r1
    1d42:	89 f0       	breq	.+34     	; 0x1d66 <Timer_Init+0x1ac>
    1d44:	14 c0       	rjmp	.+40     	; 0x1d6e <Timer_Init+0x1b4>
        {
          case TIMER_PRESCALER_NO:
            gen_timer0prescaler = T0_PRESCALER_NO;
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	80 93 b2 00 	sts	0x00B2, r24
    1d4c:	20 c0       	rjmp	.+64     	; 0x1d8e <Timer_Init+0x1d4>
            break;

          case TIMER_PRESCALER_8:
            gen_timer0prescaler = T0_PRESCALER_8;
    1d4e:	82 e0       	ldi	r24, 0x02	; 2
    1d50:	80 93 b2 00 	sts	0x00B2, r24
    1d54:	1c c0       	rjmp	.+56     	; 0x1d8e <Timer_Init+0x1d4>
            break;

          case TIMER_PRESCALER_64:
            gen_timer0prescaler = T0_PRESCALER_64;
    1d56:	83 e0       	ldi	r24, 0x03	; 3
    1d58:	80 93 b2 00 	sts	0x00B2, r24
    1d5c:	18 c0       	rjmp	.+48     	; 0x1d8e <Timer_Init+0x1d4>
            break;

          case TIMER_PRESCALER_256:
            gen_timer0prescaler = T0_PRESCALER_256;
    1d5e:	84 e0       	ldi	r24, 0x04	; 4
    1d60:	80 93 b2 00 	sts	0x00B2, r24
    1d64:	14 c0       	rjmp	.+40     	; 0x1d8e <Timer_Init+0x1d4>
            break;

          case TIMER_PRESCALER_1024:
            gen_timer0prescaler = T0_PRESCALER_1024;
    1d66:	85 e0       	ldi	r24, 0x05	; 5
    1d68:	80 93 b2 00 	sts	0x00B2, r24
    1d6c:	10 c0       	rjmp	.+32     	; 0x1d8e <Timer_Init+0x1d4>
            break;

          default:
            return E_NOK;
    1d6e:	31 e0       	ldi	r19, 0x01	; 1
    1d70:	3d 8b       	std	Y+21, r19	; 0x15
    1d72:	8c c1       	rjmp	.+792    	; 0x208c <Timer_Init+0x4d2>
        }
      }
	  else if (Timer_cfg->Timer_Mode == T0_Up_Count || Timer_cfg->Timer_Mode == T0_Down_count)
    1d74:	e9 81       	ldd	r30, Y+1	; 0x01
    1d76:	fa 81       	ldd	r31, Y+2	; 0x02
    1d78:	81 81       	ldd	r24, Z+1	; 0x01
    1d7a:	87 30       	cpi	r24, 0x07	; 7
    1d7c:	41 f0       	breq	.+16     	; 0x1d8e <Timer_Init+0x1d4>
    1d7e:	e9 81       	ldd	r30, Y+1	; 0x01
    1d80:	fa 81       	ldd	r31, Y+2	; 0x02
    1d82:	81 81       	ldd	r24, Z+1	; 0x01
    1d84:	86 30       	cpi	r24, 0x06	; 6
    1d86:	19 f0       	breq	.+6      	; 0x1d8e <Timer_Init+0x1d4>
      {

      }
      else
      {
          return E_NOK;
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	8d 8b       	std	Y+21, r24	; 0x15
    1d8c:	7f c1       	rjmp	.+766    	; 0x208c <Timer_Init+0x4d2>
      }
	  TimerInitializationCheck[TIMER_CH0] = TRUE;
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	80 93 b5 00 	sts	0x00B5, r24
	  return E_OK;
    1d94:	1d 8a       	std	Y+21, r1	; 0x15
    1d96:	7a c1       	rjmp	.+756    	; 0x208c <Timer_Init+0x4d2>

	case TIMER_CH1:
	  switch (Timer_cfg->Timer_Mode)
    1d98:	e9 81       	ldd	r30, Y+1	; 0x01
    1d9a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d9c:	81 81       	ldd	r24, Z+1	; 0x01
    1d9e:	28 2f       	mov	r18, r24
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	3c 87       	std	Y+12, r19	; 0x0c
    1da4:	2b 87       	std	Y+11, r18	; 0x0b
    1da6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1da8:	9c 85       	ldd	r25, Y+12	; 0x0c
    1daa:	81 30       	cpi	r24, 0x01	; 1
    1dac:	91 05       	cpc	r25, r1
    1dae:	71 f0       	breq	.+28     	; 0x1dcc <Timer_Init+0x212>
    1db0:	2b 85       	ldd	r18, Y+11	; 0x0b
    1db2:	3c 85       	ldd	r19, Y+12	; 0x0c
    1db4:	22 30       	cpi	r18, 0x02	; 2
    1db6:	31 05       	cpc	r19, r1
    1db8:	81 f0       	breq	.+32     	; 0x1dda <Timer_Init+0x220>
    1dba:	8b 85       	ldd	r24, Y+11	; 0x0b
    1dbc:	9c 85       	ldd	r25, Y+12	; 0x0c
    1dbe:	00 97       	sbiw	r24, 0x00	; 0
    1dc0:	99 f4       	brne	.+38     	; 0x1de8 <Timer_Init+0x22e>
	  {
		case TIMER_MODE:
		  TCCR1 = T1_NORMAL_MODE;
    1dc2:	ee e4       	ldi	r30, 0x4E	; 78
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	11 82       	std	Z+1, r1	; 0x01
    1dc8:	10 82       	st	Z, r1
    1dca:	11 c0       	rjmp	.+34     	; 0x1dee <Timer_Init+0x234>
		  break;
		case COUNTER_UP_MODE:
		  TCCR1 = T1_Up_Count;
    1dcc:	ee e4       	ldi	r30, 0x4E	; 78
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	87 e0       	ldi	r24, 0x07	; 7
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	91 83       	std	Z+1, r25	; 0x01
    1dd6:	80 83       	st	Z, r24
    1dd8:	0a c0       	rjmp	.+20     	; 0x1dee <Timer_Init+0x234>
		  * Consider initiating B1 as input
		  * DIO_init()
		  */
		  break;
		case COUNTER_DOWN_MODE:
		  TCCR1 = T1_Down_count;
    1dda:	ee e4       	ldi	r30, 0x4E	; 78
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	86 e0       	ldi	r24, 0x06	; 6
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	91 83       	std	Z+1, r25	; 0x01
    1de4:	80 83       	st	Z, r24
    1de6:	03 c0       	rjmp	.+6      	; 0x1dee <Timer_Init+0x234>
		  break;
		default:
		  return E_NOK;
    1de8:	91 e0       	ldi	r25, 0x01	; 1
    1dea:	9d 8b       	std	Y+21, r25	; 0x15
    1dec:	4f c1       	rjmp	.+670    	; 0x208c <Timer_Init+0x4d2>
	  }

	  switch (Timer_cfg->Timer_Polling_Or_Interrupt)
    1dee:	e9 81       	ldd	r30, Y+1	; 0x01
    1df0:	fa 81       	ldd	r31, Y+2	; 0x02
    1df2:	82 81       	ldd	r24, Z+2	; 0x02
    1df4:	28 2f       	mov	r18, r24
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	3a 87       	std	Y+10, r19	; 0x0a
    1dfa:	29 87       	std	Y+9, r18	; 0x09
    1dfc:	89 85       	ldd	r24, Y+9	; 0x09
    1dfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e00:	00 97       	sbiw	r24, 0x00	; 0
    1e02:	31 f0       	breq	.+12     	; 0x1e10 <Timer_Init+0x256>
    1e04:	29 85       	ldd	r18, Y+9	; 0x09
    1e06:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e08:	21 30       	cpi	r18, 0x01	; 1
    1e0a:	31 05       	cpc	r19, r1
    1e0c:	f1 f0       	breq	.+60     	; 0x1e4a <Timer_Init+0x290>
    1e0e:	3a c0       	rjmp	.+116    	; 0x1e84 <Timer_Init+0x2ca>
	  {
		case TIMER_POLLING_MODE:
		  ASSIGN_BIT(TIMSK, BIT2, LOW);
    1e10:	a9 e5       	ldi	r26, 0x59	; 89
    1e12:	b0 e0       	ldi	r27, 0x00	; 0
    1e14:	e9 e5       	ldi	r30, 0x59	; 89
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	8b 7f       	andi	r24, 0xFB	; 251
    1e1c:	8c 93       	st	X, r24
		  ASSIGN_BIT(TIMSK, BIT3, LOW);
    1e1e:	a9 e5       	ldi	r26, 0x59	; 89
    1e20:	b0 e0       	ldi	r27, 0x00	; 0
    1e22:	e9 e5       	ldi	r30, 0x59	; 89
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	80 81       	ld	r24, Z
    1e28:	87 7f       	andi	r24, 0xF7	; 247
    1e2a:	8c 93       	st	X, r24
		  ASSIGN_BIT(TIMSK, BIT4, LOW);
    1e2c:	a9 e5       	ldi	r26, 0x59	; 89
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	e9 e5       	ldi	r30, 0x59	; 89
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	8f 7e       	andi	r24, 0xEF	; 239
    1e38:	8c 93       	st	X, r24
		  ASSIGN_BIT(TIMSK, BIT5, LOW);
    1e3a:	a9 e5       	ldi	r26, 0x59	; 89
    1e3c:	b0 e0       	ldi	r27, 0x00	; 0
    1e3e:	e9 e5       	ldi	r30, 0x59	; 89
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	80 81       	ld	r24, Z
    1e44:	8f 7d       	andi	r24, 0xDF	; 223
    1e46:	8c 93       	st	X, r24
    1e48:	20 c0       	rjmp	.+64     	; 0x1e8a <Timer_Init+0x2d0>
	      break;

		case TIMER_INTERRUPT_MODE:
		  ASSIGN_BIT(TIMSK, BIT2, HIGH);
    1e4a:	a9 e5       	ldi	r26, 0x59	; 89
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	e9 e5       	ldi	r30, 0x59	; 89
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 81       	ld	r24, Z
    1e54:	84 60       	ori	r24, 0x04	; 4
    1e56:	8c 93       	st	X, r24
		  ASSIGN_BIT(TIMSK, BIT3, LOW);
    1e58:	a9 e5       	ldi	r26, 0x59	; 89
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	e9 e5       	ldi	r30, 0x59	; 89
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	87 7f       	andi	r24, 0xF7	; 247
    1e64:	8c 93       	st	X, r24
		  ASSIGN_BIT(TIMSK, BIT4, LOW);
    1e66:	a9 e5       	ldi	r26, 0x59	; 89
    1e68:	b0 e0       	ldi	r27, 0x00	; 0
    1e6a:	e9 e5       	ldi	r30, 0x59	; 89
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	80 81       	ld	r24, Z
    1e70:	8f 7e       	andi	r24, 0xEF	; 239
    1e72:	8c 93       	st	X, r24
		  ASSIGN_BIT(TIMSK, BIT5, LOW);
    1e74:	a9 e5       	ldi	r26, 0x59	; 89
    1e76:	b0 e0       	ldi	r27, 0x00	; 0
    1e78:	e9 e5       	ldi	r30, 0x59	; 89
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	80 81       	ld	r24, Z
    1e7e:	8f 7d       	andi	r24, 0xDF	; 223
    1e80:	8c 93       	st	X, r24
    1e82:	03 c0       	rjmp	.+6      	; 0x1e8a <Timer_Init+0x2d0>
		  break;

		default:
		  return E_NOK;
    1e84:	31 e0       	ldi	r19, 0x01	; 1
    1e86:	3d 8b       	std	Y+21, r19	; 0x15
    1e88:	01 c1       	rjmp	.+514    	; 0x208c <Timer_Init+0x4d2>
	  }
	  if (Timer_cfg->Timer_Prescaler == TIMER_NO_CLOCK)
    1e8a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e8c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e8e:	83 81       	ldd	r24, Z+3	; 0x03
    1e90:	88 23       	and	r24, r24
    1e92:	19 f4       	brne	.+6      	; 0x1e9a <Timer_Init+0x2e0>
      {
        return E_NOK;
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	8d 8b       	std	Y+21, r24	; 0x15
    1e98:	f9 c0       	rjmp	.+498    	; 0x208c <Timer_Init+0x4d2>
      }
	  else if (Timer_cfg->Timer_Mode == T1_NORMAL_MODE && Timer_cfg->Timer_Prescaler != T1_NO_CLOCK)
    1e9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e9e:	81 81       	ldd	r24, Z+1	; 0x01
    1ea0:	88 23       	and	r24, r24
    1ea2:	09 f0       	breq	.+2      	; 0x1ea6 <Timer_Init+0x2ec>
    1ea4:	44 c0       	rjmp	.+136    	; 0x1f2e <Timer_Init+0x374>
    1ea6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ea8:	fa 81       	ldd	r31, Y+2	; 0x02
    1eaa:	83 81       	ldd	r24, Z+3	; 0x03
    1eac:	88 23       	and	r24, r24
    1eae:	09 f4       	brne	.+2      	; 0x1eb2 <Timer_Init+0x2f8>
    1eb0:	3e c0       	rjmp	.+124    	; 0x1f2e <Timer_Init+0x374>
      {
        switch (Timer_cfg->Timer_Prescaler)
    1eb2:	e9 81       	ldd	r30, Y+1	; 0x01
    1eb4:	fa 81       	ldd	r31, Y+2	; 0x02
    1eb6:	83 81       	ldd	r24, Z+3	; 0x03
    1eb8:	28 2f       	mov	r18, r24
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	38 87       	std	Y+8, r19	; 0x08
    1ebe:	2f 83       	std	Y+7, r18	; 0x07
    1ec0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ec2:	98 85       	ldd	r25, Y+8	; 0x08
    1ec4:	84 30       	cpi	r24, 0x04	; 4
    1ec6:	91 05       	cpc	r25, r1
    1ec8:	19 f1       	breq	.+70     	; 0x1f10 <Timer_Init+0x356>
    1eca:	2f 81       	ldd	r18, Y+7	; 0x07
    1ecc:	38 85       	ldd	r19, Y+8	; 0x08
    1ece:	25 30       	cpi	r18, 0x05	; 5
    1ed0:	31 05       	cpc	r19, r1
    1ed2:	5c f4       	brge	.+22     	; 0x1eea <Timer_Init+0x330>
    1ed4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ed6:	98 85       	ldd	r25, Y+8	; 0x08
    1ed8:	81 30       	cpi	r24, 0x01	; 1
    1eda:	91 05       	cpc	r25, r1
    1edc:	89 f0       	breq	.+34     	; 0x1f00 <Timer_Init+0x346>
    1ede:	2f 81       	ldd	r18, Y+7	; 0x07
    1ee0:	38 85       	ldd	r19, Y+8	; 0x08
    1ee2:	22 30       	cpi	r18, 0x02	; 2
    1ee4:	31 05       	cpc	r19, r1
    1ee6:	81 f0       	breq	.+32     	; 0x1f08 <Timer_Init+0x34e>
    1ee8:	1f c0       	rjmp	.+62     	; 0x1f28 <Timer_Init+0x36e>
    1eea:	8f 81       	ldd	r24, Y+7	; 0x07
    1eec:	98 85       	ldd	r25, Y+8	; 0x08
    1eee:	86 30       	cpi	r24, 0x06	; 6
    1ef0:	91 05       	cpc	r25, r1
    1ef2:	91 f0       	breq	.+36     	; 0x1f18 <Timer_Init+0x35e>
    1ef4:	2f 81       	ldd	r18, Y+7	; 0x07
    1ef6:	38 85       	ldd	r19, Y+8	; 0x08
    1ef8:	27 30       	cpi	r18, 0x07	; 7
    1efa:	31 05       	cpc	r19, r1
    1efc:	89 f0       	breq	.+34     	; 0x1f20 <Timer_Init+0x366>
    1efe:	14 c0       	rjmp	.+40     	; 0x1f28 <Timer_Init+0x36e>
        {
          case TIMER_PRESCALER_NO:
            gen_timer1prescaler = T1_PRESCALER_NO;
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	80 93 b3 00 	sts	0x00B3, r24
    1f06:	13 c0       	rjmp	.+38     	; 0x1f2e <Timer_Init+0x374>
            break;

          case TIMER_PRESCALER_8:
            gen_timer1prescaler = T1_PRESCALER_8;
    1f08:	82 e0       	ldi	r24, 0x02	; 2
    1f0a:	80 93 b3 00 	sts	0x00B3, r24
    1f0e:	0f c0       	rjmp	.+30     	; 0x1f2e <Timer_Init+0x374>
            break;

          case TIMER_PRESCALER_64:
            gen_timer1prescaler = T1_PRESCALER_64;
    1f10:	83 e0       	ldi	r24, 0x03	; 3
    1f12:	80 93 b3 00 	sts	0x00B3, r24
    1f16:	0b c0       	rjmp	.+22     	; 0x1f2e <Timer_Init+0x374>
            break;

          case TIMER_PRESCALER_256:
            gen_timer1prescaler = T1_PRESCALER_256;
    1f18:	84 e0       	ldi	r24, 0x04	; 4
    1f1a:	80 93 b3 00 	sts	0x00B3, r24
    1f1e:	07 c0       	rjmp	.+14     	; 0x1f2e <Timer_Init+0x374>
            break;

          case TIMER_PRESCALER_1024:
            gen_timer1prescaler = T1_PRESCALER_1024;
    1f20:	85 e0       	ldi	r24, 0x05	; 5
    1f22:	80 93 b3 00 	sts	0x00B3, r24
    1f26:	03 c0       	rjmp	.+6      	; 0x1f2e <Timer_Init+0x374>
            break;

          default:
            return E_NOK;
    1f28:	31 e0       	ldi	r19, 0x01	; 1
    1f2a:	3d 8b       	std	Y+21, r19	; 0x15
    1f2c:	af c0       	rjmp	.+350    	; 0x208c <Timer_Init+0x4d2>
      }
      else
      {
        /* Counter mode */
      }
	  TimerInitializationCheck[TIMER_CH1] = TRUE;
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	80 93 b6 00 	sts	0x00B6, r24
	  return E_OK;
    1f34:	1d 8a       	std	Y+21, r1	; 0x15
    1f36:	aa c0       	rjmp	.+340    	; 0x208c <Timer_Init+0x4d2>

	case TIMER_CH2:
	  switch (Timer_cfg->Timer_Mode)
    1f38:	e9 81       	ldd	r30, Y+1	; 0x01
    1f3a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f3c:	81 81       	ldd	r24, Z+1	; 0x01
    1f3e:	88 2f       	mov	r24, r24
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	00 97       	sbiw	r24, 0x00	; 0
    1f44:	a1 f4       	brne	.+40     	; 0x1f6e <Timer_Init+0x3b4>
	  {
		case TIMER_MODE:
		  TCCR2 = T2_NORMAL_MODE;
    1f46:	e5 e4       	ldi	r30, 0x45	; 69
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	10 82       	st	Z, r1
		  break;
		default:
		  return E_NOK;
	  }

	  switch (Timer_cfg->Timer_Polling_Or_Interrupt)
    1f4c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f4e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f50:	82 81       	ldd	r24, Z+2	; 0x02
    1f52:	28 2f       	mov	r18, r24
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	3e 83       	std	Y+6, r19	; 0x06
    1f58:	2d 83       	std	Y+5, r18	; 0x05
    1f5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f5e:	00 97       	sbiw	r24, 0x00	; 0
    1f60:	49 f0       	breq	.+18     	; 0x1f74 <Timer_Init+0x3ba>
    1f62:	2d 81       	ldd	r18, Y+5	; 0x05
    1f64:	3e 81       	ldd	r19, Y+6	; 0x06
    1f66:	21 30       	cpi	r18, 0x01	; 1
    1f68:	31 05       	cpc	r19, r1
    1f6a:	99 f0       	breq	.+38     	; 0x1f92 <Timer_Init+0x3d8>
    1f6c:	21 c0       	rjmp	.+66     	; 0x1fb0 <Timer_Init+0x3f6>
	  {
		case TIMER_MODE:
		  TCCR2 = T2_NORMAL_MODE;
		  break;
		default:
		  return E_NOK;
    1f6e:	31 e0       	ldi	r19, 0x01	; 1
    1f70:	3d 8b       	std	Y+21, r19	; 0x15
    1f72:	8c c0       	rjmp	.+280    	; 0x208c <Timer_Init+0x4d2>
	  }

	  switch (Timer_cfg->Timer_Polling_Or_Interrupt)
	  {
		case TIMER_POLLING_MODE:
		  ASSIGN_BIT(TIMSK, BIT6, LOW);
    1f74:	a9 e5       	ldi	r26, 0x59	; 89
    1f76:	b0 e0       	ldi	r27, 0x00	; 0
    1f78:	e9 e5       	ldi	r30, 0x59	; 89
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	80 81       	ld	r24, Z
    1f7e:	8f 7b       	andi	r24, 0xBF	; 191
    1f80:	8c 93       	st	X, r24
		  ASSIGN_BIT(TIMSK, BIT7, LOW);
    1f82:	a9 e5       	ldi	r26, 0x59	; 89
    1f84:	b0 e0       	ldi	r27, 0x00	; 0
    1f86:	e9 e5       	ldi	r30, 0x59	; 89
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	80 81       	ld	r24, Z
    1f8c:	8f 77       	andi	r24, 0x7F	; 127
    1f8e:	8c 93       	st	X, r24
    1f90:	12 c0       	rjmp	.+36     	; 0x1fb6 <Timer_Init+0x3fc>
	      break;

		case TIMER_INTERRUPT_MODE:
		  ASSIGN_BIT(TIMSK, BIT6, HIGH);
    1f92:	a9 e5       	ldi	r26, 0x59	; 89
    1f94:	b0 e0       	ldi	r27, 0x00	; 0
    1f96:	e9 e5       	ldi	r30, 0x59	; 89
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
    1f9c:	80 64       	ori	r24, 0x40	; 64
    1f9e:	8c 93       	st	X, r24
		  ASSIGN_BIT(TIMSK, BIT7, LOW);
    1fa0:	a9 e5       	ldi	r26, 0x59	; 89
    1fa2:	b0 e0       	ldi	r27, 0x00	; 0
    1fa4:	e9 e5       	ldi	r30, 0x59	; 89
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	80 81       	ld	r24, Z
    1faa:	8f 77       	andi	r24, 0x7F	; 127
    1fac:	8c 93       	st	X, r24
    1fae:	03 c0       	rjmp	.+6      	; 0x1fb6 <Timer_Init+0x3fc>
		  break;

        default:
          return E_NOK;
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	8d 8b       	std	Y+21, r24	; 0x15
    1fb4:	6b c0       	rjmp	.+214    	; 0x208c <Timer_Init+0x4d2>
	  }
      if (Timer_cfg->Timer_Prescaler == TIMER_NO_CLOCK)
    1fb6:	e9 81       	ldd	r30, Y+1	; 0x01
    1fb8:	fa 81       	ldd	r31, Y+2	; 0x02
    1fba:	83 81       	ldd	r24, Z+3	; 0x03
    1fbc:	88 23       	and	r24, r24
    1fbe:	19 f4       	brne	.+6      	; 0x1fc6 <Timer_Init+0x40c>
      {
        return E_NOK;
    1fc0:	91 e0       	ldi	r25, 0x01	; 1
    1fc2:	9d 8b       	std	Y+21, r25	; 0x15
    1fc4:	63 c0       	rjmp	.+198    	; 0x208c <Timer_Init+0x4d2>
      }
	  else if (Timer_cfg->Timer_Mode == T2_NORMAL_MODE && Timer_cfg->Timer_Prescaler != T2_NO_CLOCK)
    1fc6:	e9 81       	ldd	r30, Y+1	; 0x01
    1fc8:	fa 81       	ldd	r31, Y+2	; 0x02
    1fca:	81 81       	ldd	r24, Z+1	; 0x01
    1fcc:	88 23       	and	r24, r24
    1fce:	09 f0       	breq	.+2      	; 0x1fd2 <Timer_Init+0x418>
    1fd0:	56 c0       	rjmp	.+172    	; 0x207e <Timer_Init+0x4c4>
    1fd2:	e9 81       	ldd	r30, Y+1	; 0x01
    1fd4:	fa 81       	ldd	r31, Y+2	; 0x02
    1fd6:	83 81       	ldd	r24, Z+3	; 0x03
    1fd8:	88 23       	and	r24, r24
    1fda:	09 f4       	brne	.+2      	; 0x1fde <Timer_Init+0x424>
    1fdc:	50 c0       	rjmp	.+160    	; 0x207e <Timer_Init+0x4c4>
      {
        switch (Timer_cfg->Timer_Prescaler)
    1fde:	e9 81       	ldd	r30, Y+1	; 0x01
    1fe0:	fa 81       	ldd	r31, Y+2	; 0x02
    1fe2:	83 81       	ldd	r24, Z+3	; 0x03
    1fe4:	28 2f       	mov	r18, r24
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	3c 83       	std	Y+4, r19	; 0x04
    1fea:	2b 83       	std	Y+3, r18	; 0x03
    1fec:	8b 81       	ldd	r24, Y+3	; 0x03
    1fee:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff0:	84 30       	cpi	r24, 0x04	; 4
    1ff2:	91 05       	cpc	r25, r1
    1ff4:	89 f1       	breq	.+98     	; 0x2058 <Timer_Init+0x49e>
    1ff6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ff8:	3c 81       	ldd	r19, Y+4	; 0x04
    1ffa:	25 30       	cpi	r18, 0x05	; 5
    1ffc:	31 05       	cpc	r19, r1
    1ffe:	84 f4       	brge	.+32     	; 0x2020 <Timer_Init+0x466>
    2000:	8b 81       	ldd	r24, Y+3	; 0x03
    2002:	9c 81       	ldd	r25, Y+4	; 0x04
    2004:	82 30       	cpi	r24, 0x02	; 2
    2006:	91 05       	cpc	r25, r1
    2008:	f9 f0       	breq	.+62     	; 0x2048 <Timer_Init+0x48e>
    200a:	2b 81       	ldd	r18, Y+3	; 0x03
    200c:	3c 81       	ldd	r19, Y+4	; 0x04
    200e:	23 30       	cpi	r18, 0x03	; 3
    2010:	31 05       	cpc	r19, r1
    2012:	f4 f4       	brge	.+60     	; 0x2050 <Timer_Init+0x496>
    2014:	8b 81       	ldd	r24, Y+3	; 0x03
    2016:	9c 81       	ldd	r25, Y+4	; 0x04
    2018:	81 30       	cpi	r24, 0x01	; 1
    201a:	91 05       	cpc	r25, r1
    201c:	89 f0       	breq	.+34     	; 0x2040 <Timer_Init+0x486>
    201e:	2c c0       	rjmp	.+88     	; 0x2078 <Timer_Init+0x4be>
    2020:	2b 81       	ldd	r18, Y+3	; 0x03
    2022:	3c 81       	ldd	r19, Y+4	; 0x04
    2024:	26 30       	cpi	r18, 0x06	; 6
    2026:	31 05       	cpc	r19, r1
    2028:	f9 f0       	breq	.+62     	; 0x2068 <Timer_Init+0x4ae>
    202a:	8b 81       	ldd	r24, Y+3	; 0x03
    202c:	9c 81       	ldd	r25, Y+4	; 0x04
    202e:	86 30       	cpi	r24, 0x06	; 6
    2030:	91 05       	cpc	r25, r1
    2032:	b4 f0       	brlt	.+44     	; 0x2060 <Timer_Init+0x4a6>
    2034:	2b 81       	ldd	r18, Y+3	; 0x03
    2036:	3c 81       	ldd	r19, Y+4	; 0x04
    2038:	27 30       	cpi	r18, 0x07	; 7
    203a:	31 05       	cpc	r19, r1
    203c:	c9 f0       	breq	.+50     	; 0x2070 <Timer_Init+0x4b6>
    203e:	1c c0       	rjmp	.+56     	; 0x2078 <Timer_Init+0x4be>
        {
          case TIMER_PRESCALER_NO:
            gen_timer2prescaler = T2_PRESCALER_NO;
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	80 93 b4 00 	sts	0x00B4, r24
    2046:	1b c0       	rjmp	.+54     	; 0x207e <Timer_Init+0x4c4>
            break;

          case TIMER_PRESCALER_8:
            gen_timer2prescaler = T2_PRESCALER_8;
    2048:	82 e0       	ldi	r24, 0x02	; 2
    204a:	80 93 b4 00 	sts	0x00B4, r24
    204e:	17 c0       	rjmp	.+46     	; 0x207e <Timer_Init+0x4c4>
            break;

          case TIMER_PRESCALER_32:
            gen_timer2prescaler = T2_PRESCALER_32;
    2050:	83 e0       	ldi	r24, 0x03	; 3
    2052:	80 93 b4 00 	sts	0x00B4, r24
    2056:	13 c0       	rjmp	.+38     	; 0x207e <Timer_Init+0x4c4>
            break;

          case TIMER_PRESCALER_64:
            gen_timer2prescaler = T2_PRESCALER_64;
    2058:	84 e0       	ldi	r24, 0x04	; 4
    205a:	80 93 b4 00 	sts	0x00B4, r24
    205e:	0f c0       	rjmp	.+30     	; 0x207e <Timer_Init+0x4c4>
            break;

          case TIMER_PRESCALER_128:
            gen_timer2prescaler = T2_PRESCALER_128;
    2060:	85 e0       	ldi	r24, 0x05	; 5
    2062:	80 93 b4 00 	sts	0x00B4, r24
    2066:	0b c0       	rjmp	.+22     	; 0x207e <Timer_Init+0x4c4>
            break;

          case TIMER_PRESCALER_256:
            gen_timer2prescaler = T2_PRESCALER_256;
    2068:	86 e0       	ldi	r24, 0x06	; 6
    206a:	80 93 b4 00 	sts	0x00B4, r24
    206e:	07 c0       	rjmp	.+14     	; 0x207e <Timer_Init+0x4c4>
            break;

          case TIMER_PRESCALER_1024:
            gen_timer2prescaler = T2_PRESCALER_1024;
    2070:	87 e0       	ldi	r24, 0x07	; 7
    2072:	80 93 b4 00 	sts	0x00B4, r24
    2076:	03 c0       	rjmp	.+6      	; 0x207e <Timer_Init+0x4c4>
            break;

          default:
            return E_NOK;
    2078:	31 e0       	ldi	r19, 0x01	; 1
    207a:	3d 8b       	std	Y+21, r19	; 0x15
    207c:	07 c0       	rjmp	.+14     	; 0x208c <Timer_Init+0x4d2>
      }
      else
      {
        /* Counter mode */
      }
	  TimerInitializationCheck[TIMER_CH2] = TRUE;
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	80 93 b7 00 	sts	0x00B7, r24
	  return E_OK;
    2084:	1d 8a       	std	Y+21, r1	; 0x15
    2086:	02 c0       	rjmp	.+4      	; 0x208c <Timer_Init+0x4d2>

    default:
      return E_NOK;
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	8d 8b       	std	Y+21, r24	; 0x15
    208c:	8d 89       	ldd	r24, Y+21	; 0x15
  }
}
    208e:	65 96       	adiw	r28, 0x15	; 21
    2090:	0f b6       	in	r0, 0x3f	; 63
    2092:	f8 94       	cli
    2094:	de bf       	out	0x3e, r29	; 62
    2096:	0f be       	out	0x3f, r0	; 63
    2098:	cd bf       	out	0x3d, r28	; 61
    209a:	cf 91       	pop	r28
    209c:	df 91       	pop	r29
    209e:	08 95       	ret

000020a0 <Timer_Start>:
 * Return: The error status of the function.
 * Description: This function strats the needed timer.
 *
 */
ERROR_STATUS Timer_Start(uint8 Timer_CH_NO, uint16 Timer_Count)
{
    20a0:	df 93       	push	r29
    20a2:	cf 93       	push	r28
    20a4:	00 d0       	rcall	.+0      	; 0x20a6 <Timer_Start+0x6>
    20a6:	00 d0       	rcall	.+0      	; 0x20a8 <Timer_Start+0x8>
    20a8:	00 d0       	rcall	.+0      	; 0x20aa <Timer_Start+0xa>
    20aa:	cd b7       	in	r28, 0x3d	; 61
    20ac:	de b7       	in	r29, 0x3e	; 62
    20ae:	89 83       	std	Y+1, r24	; 0x01
    20b0:	7b 83       	std	Y+3, r23	; 0x03
    20b2:	6a 83       	std	Y+2, r22	; 0x02
	switch (Timer_CH_NO)
    20b4:	89 81       	ldd	r24, Y+1	; 0x01
    20b6:	28 2f       	mov	r18, r24
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	3e 83       	std	Y+6, r19	; 0x06
    20bc:	2d 83       	std	Y+5, r18	; 0x05
    20be:	8d 81       	ldd	r24, Y+5	; 0x05
    20c0:	9e 81       	ldd	r25, Y+6	; 0x06
    20c2:	81 30       	cpi	r24, 0x01	; 1
    20c4:	91 05       	cpc	r25, r1
    20c6:	09 f1       	breq	.+66     	; 0x210a <Timer_Start+0x6a>
    20c8:	2d 81       	ldd	r18, Y+5	; 0x05
    20ca:	3e 81       	ldd	r19, Y+6	; 0x06
    20cc:	22 30       	cpi	r18, 0x02	; 2
    20ce:	31 05       	cpc	r19, r1
    20d0:	e1 f1       	breq	.+120    	; 0x214a <Timer_Start+0xaa>
    20d2:	8d 81       	ldd	r24, Y+5	; 0x05
    20d4:	9e 81       	ldd	r25, Y+6	; 0x06
    20d6:	00 97       	sbiw	r24, 0x00	; 0
    20d8:	09 f0       	breq	.+2      	; 0x20dc <Timer_Start+0x3c>
    20da:	4e c0       	rjmp	.+156    	; 0x2178 <Timer_Start+0xd8>
	{
		case TIMER_CH0:
          if (TimerInitializationCheck[TIMER_CH0] == FALSE)
    20dc:	80 91 b5 00 	lds	r24, 0x00B5
    20e0:	88 23       	and	r24, r24
    20e2:	19 f4       	brne	.+6      	; 0x20ea <Timer_Start+0x4a>
            return E_NOK;
    20e4:	91 e0       	ldi	r25, 0x01	; 1
    20e6:	9c 83       	std	Y+4, r25	; 0x04
    20e8:	49 c0       	rjmp	.+146    	; 0x217c <Timer_Start+0xdc>
          else
          {
		    TCNT0 = 0xff - (uint8)Timer_Count;
    20ea:	e2 e5       	ldi	r30, 0x52	; 82
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	8a 81       	ldd	r24, Y+2	; 0x02
    20f0:	80 95       	com	r24
    20f2:	80 83       	st	Z, r24
		    TCCR0 |= gen_timer0prescaler;
    20f4:	a3 e5       	ldi	r26, 0x53	; 83
    20f6:	b0 e0       	ldi	r27, 0x00	; 0
    20f8:	e3 e5       	ldi	r30, 0x53	; 83
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	90 81       	ld	r25, Z
    20fe:	80 91 b2 00 	lds	r24, 0x00B2
    2102:	89 2b       	or	r24, r25
    2104:	8c 93       	st	X, r24
		    return E_OK;
    2106:	1c 82       	std	Y+4, r1	; 0x04
    2108:	39 c0       	rjmp	.+114    	; 0x217c <Timer_Start+0xdc>
          }

		case TIMER_CH1:
          if (TimerInitializationCheck[TIMER_CH1] == FALSE)
    210a:	80 91 b6 00 	lds	r24, 0x00B6
    210e:	88 23       	and	r24, r24
    2110:	19 f4       	brne	.+6      	; 0x2118 <Timer_Start+0x78>
            return E_NOK;
    2112:	21 e0       	ldi	r18, 0x01	; 1
    2114:	2c 83       	std	Y+4, r18	; 0x04
    2116:	32 c0       	rjmp	.+100    	; 0x217c <Timer_Start+0xdc>
          else
          {
		    TCNT1 = 0xffff - Timer_Count;
    2118:	ec e4       	ldi	r30, 0x4C	; 76
    211a:	f0 e0       	ldi	r31, 0x00	; 0
    211c:	8a 81       	ldd	r24, Y+2	; 0x02
    211e:	9b 81       	ldd	r25, Y+3	; 0x03
    2120:	80 95       	com	r24
    2122:	90 95       	com	r25
    2124:	91 83       	std	Z+1, r25	; 0x01
    2126:	80 83       	st	Z, r24
		    TCCR1 |= gen_timer1prescaler;
    2128:	ae e4       	ldi	r26, 0x4E	; 78
    212a:	b0 e0       	ldi	r27, 0x00	; 0
    212c:	ee e4       	ldi	r30, 0x4E	; 78
    212e:	f0 e0       	ldi	r31, 0x00	; 0
    2130:	20 81       	ld	r18, Z
    2132:	31 81       	ldd	r19, Z+1	; 0x01
    2134:	80 91 b3 00 	lds	r24, 0x00B3
    2138:	88 2f       	mov	r24, r24
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	82 2b       	or	r24, r18
    213e:	93 2b       	or	r25, r19
    2140:	11 96       	adiw	r26, 0x01	; 1
    2142:	9c 93       	st	X, r25
    2144:	8e 93       	st	-X, r24
		    return E_OK;
    2146:	1c 82       	std	Y+4, r1	; 0x04
    2148:	19 c0       	rjmp	.+50     	; 0x217c <Timer_Start+0xdc>
          }

		case TIMER_CH2:
          if (TimerInitializationCheck[TIMER_CH2] == FALSE)
    214a:	80 91 b7 00 	lds	r24, 0x00B7
    214e:	88 23       	and	r24, r24
    2150:	19 f4       	brne	.+6      	; 0x2158 <Timer_Start+0xb8>
            return E_NOK;
    2152:	31 e0       	ldi	r19, 0x01	; 1
    2154:	3c 83       	std	Y+4, r19	; 0x04
    2156:	12 c0       	rjmp	.+36     	; 0x217c <Timer_Start+0xdc>
          else
          {
		    TCNT2 = 0xff - (uint8)Timer_Count;
    2158:	e4 e4       	ldi	r30, 0x44	; 68
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	8a 81       	ldd	r24, Y+2	; 0x02
    215e:	80 95       	com	r24
    2160:	80 83       	st	Z, r24
		    TCCR2 |= gen_timer2prescaler;
    2162:	a5 e4       	ldi	r26, 0x45	; 69
    2164:	b0 e0       	ldi	r27, 0x00	; 0
    2166:	e5 e4       	ldi	r30, 0x45	; 69
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	90 81       	ld	r25, Z
    216c:	80 91 b4 00 	lds	r24, 0x00B4
    2170:	89 2b       	or	r24, r25
    2172:	8c 93       	st	X, r24
		    return E_OK;
    2174:	1c 82       	std	Y+4, r1	; 0x04
    2176:	02 c0       	rjmp	.+4      	; 0x217c <Timer_Start+0xdc>
          }
		default:
		  return E_NOK;
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	8c 83       	std	Y+4, r24	; 0x04
    217c:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
    217e:	26 96       	adiw	r28, 0x06	; 6
    2180:	0f b6       	in	r0, 0x3f	; 63
    2182:	f8 94       	cli
    2184:	de bf       	out	0x3e, r29	; 62
    2186:	0f be       	out	0x3f, r0	; 63
    2188:	cd bf       	out	0x3d, r28	; 61
    218a:	cf 91       	pop	r28
    218c:	df 91       	pop	r29
    218e:	08 95       	ret

00002190 <Timer_Stop>:
 * Return: The error status of the function.
 * Description: This function stops the needed timer.
 *
 */
ERROR_STATUS Timer_Stop(uint8 Timer_CH_NO)
{
    2190:	df 93       	push	r29
    2192:	cf 93       	push	r28
    2194:	00 d0       	rcall	.+0      	; 0x2196 <Timer_Stop+0x6>
    2196:	00 d0       	rcall	.+0      	; 0x2198 <Timer_Stop+0x8>
    2198:	cd b7       	in	r28, 0x3d	; 61
    219a:	de b7       	in	r29, 0x3e	; 62
    219c:	89 83       	std	Y+1, r24	; 0x01
	switch (Timer_CH_NO)
    219e:	89 81       	ldd	r24, Y+1	; 0x01
    21a0:	28 2f       	mov	r18, r24
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	3c 83       	std	Y+4, r19	; 0x04
    21a6:	2b 83       	std	Y+3, r18	; 0x03
    21a8:	8b 81       	ldd	r24, Y+3	; 0x03
    21aa:	9c 81       	ldd	r25, Y+4	; 0x04
    21ac:	81 30       	cpi	r24, 0x01	; 1
    21ae:	91 05       	cpc	r25, r1
    21b0:	c9 f0       	breq	.+50     	; 0x21e4 <Timer_Stop+0x54>
    21b2:	2b 81       	ldd	r18, Y+3	; 0x03
    21b4:	3c 81       	ldd	r19, Y+4	; 0x04
    21b6:	22 30       	cpi	r18, 0x02	; 2
    21b8:	31 05       	cpc	r19, r1
    21ba:	39 f1       	breq	.+78     	; 0x220a <Timer_Stop+0x7a>
    21bc:	8b 81       	ldd	r24, Y+3	; 0x03
    21be:	9c 81       	ldd	r25, Y+4	; 0x04
    21c0:	00 97       	sbiw	r24, 0x00	; 0
    21c2:	99 f5       	brne	.+102    	; 0x222a <Timer_Stop+0x9a>
	{
		case TIMER_CH0:
          if (TimerInitializationCheck[TIMER_CH0] == FALSE)
    21c4:	80 91 b5 00 	lds	r24, 0x00B5
    21c8:	88 23       	and	r24, r24
    21ca:	19 f4       	brne	.+6      	; 0x21d2 <Timer_Stop+0x42>
            return E_NOK;
    21cc:	91 e0       	ldi	r25, 0x01	; 1
    21ce:	9a 83       	std	Y+2, r25	; 0x02
    21d0:	2e c0       	rjmp	.+92     	; 0x222e <Timer_Stop+0x9e>
          else
          {
		    TCCR0 &= 0xF8;
    21d2:	a3 e5       	ldi	r26, 0x53	; 83
    21d4:	b0 e0       	ldi	r27, 0x00	; 0
    21d6:	e3 e5       	ldi	r30, 0x53	; 83
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	80 81       	ld	r24, Z
    21dc:	88 7f       	andi	r24, 0xF8	; 248
    21de:	8c 93       	st	X, r24
		    return E_OK;
    21e0:	1a 82       	std	Y+2, r1	; 0x02
    21e2:	25 c0       	rjmp	.+74     	; 0x222e <Timer_Stop+0x9e>
          }

		case TIMER_CH1:
          if (TimerInitializationCheck[TIMER_CH1] == FALSE)
    21e4:	80 91 b6 00 	lds	r24, 0x00B6
    21e8:	88 23       	and	r24, r24
    21ea:	19 f4       	brne	.+6      	; 0x21f2 <Timer_Stop+0x62>
            return E_NOK;
    21ec:	21 e0       	ldi	r18, 0x01	; 1
    21ee:	2a 83       	std	Y+2, r18	; 0x02
    21f0:	1e c0       	rjmp	.+60     	; 0x222e <Timer_Stop+0x9e>
          else
          {
		    TCCR1 &= 0xFFF8;
    21f2:	ae e4       	ldi	r26, 0x4E	; 78
    21f4:	b0 e0       	ldi	r27, 0x00	; 0
    21f6:	ee e4       	ldi	r30, 0x4E	; 78
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	80 81       	ld	r24, Z
    21fc:	91 81       	ldd	r25, Z+1	; 0x01
    21fe:	88 7f       	andi	r24, 0xF8	; 248
    2200:	11 96       	adiw	r26, 0x01	; 1
    2202:	9c 93       	st	X, r25
    2204:	8e 93       	st	-X, r24
		    return E_OK;
    2206:	1a 82       	std	Y+2, r1	; 0x02
    2208:	12 c0       	rjmp	.+36     	; 0x222e <Timer_Stop+0x9e>
          }

		case TIMER_CH2:
          if (TimerInitializationCheck[TIMER_CH2] == FALSE)
    220a:	80 91 b7 00 	lds	r24, 0x00B7
    220e:	88 23       	and	r24, r24
    2210:	19 f4       	brne	.+6      	; 0x2218 <Timer_Stop+0x88>
            return E_NOK;
    2212:	31 e0       	ldi	r19, 0x01	; 1
    2214:	3a 83       	std	Y+2, r19	; 0x02
    2216:	0b c0       	rjmp	.+22     	; 0x222e <Timer_Stop+0x9e>
          else
          {
		    TCCR2 &= 0xF8;
    2218:	a5 e4       	ldi	r26, 0x45	; 69
    221a:	b0 e0       	ldi	r27, 0x00	; 0
    221c:	e5 e4       	ldi	r30, 0x45	; 69
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	80 81       	ld	r24, Z
    2222:	88 7f       	andi	r24, 0xF8	; 248
    2224:	8c 93       	st	X, r24
		    return E_OK;
    2226:	1a 82       	std	Y+2, r1	; 0x02
    2228:	02 c0       	rjmp	.+4      	; 0x222e <Timer_Stop+0x9e>
          }

		default:
		  return E_NOK;
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	8a 83       	std	Y+2, r24	; 0x02
    222e:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    2230:	0f 90       	pop	r0
    2232:	0f 90       	pop	r0
    2234:	0f 90       	pop	r0
    2236:	0f 90       	pop	r0
    2238:	cf 91       	pop	r28
    223a:	df 91       	pop	r29
    223c:	08 95       	ret

0000223e <Timer_GetStatus>:
 * Return: The error status of the function.
 * Description: This function is used to return if the flag of the timer is raised or not.
 *
 */
ERROR_STATUS Timer_GetStatus(uint8 Timer_CH_NO, bool* Data)
{
    223e:	df 93       	push	r29
    2240:	cf 93       	push	r28
    2242:	cd b7       	in	r28, 0x3d	; 61
    2244:	de b7       	in	r29, 0x3e	; 62
    2246:	2a 97       	sbiw	r28, 0x0a	; 10
    2248:	0f b6       	in	r0, 0x3f	; 63
    224a:	f8 94       	cli
    224c:	de bf       	out	0x3e, r29	; 62
    224e:	0f be       	out	0x3f, r0	; 63
    2250:	cd bf       	out	0x3d, r28	; 61
    2252:	89 83       	std	Y+1, r24	; 0x01
    2254:	7b 83       	std	Y+3, r23	; 0x03
    2256:	6a 83       	std	Y+2, r22	; 0x02
	switch (Timer_CH_NO)
    2258:	89 81       	ldd	r24, Y+1	; 0x01
    225a:	28 2f       	mov	r18, r24
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	3e 83       	std	Y+6, r19	; 0x06
    2260:	2d 83       	std	Y+5, r18	; 0x05
    2262:	8d 81       	ldd	r24, Y+5	; 0x05
    2264:	9e 81       	ldd	r25, Y+6	; 0x06
    2266:	81 30       	cpi	r24, 0x01	; 1
    2268:	91 05       	cpc	r25, r1
    226a:	d1 f0       	breq	.+52     	; 0x22a0 <Timer_GetStatus+0x62>
    226c:	2d 81       	ldd	r18, Y+5	; 0x05
    226e:	3e 81       	ldd	r19, Y+6	; 0x06
    2270:	22 30       	cpi	r18, 0x02	; 2
    2272:	31 05       	cpc	r19, r1
    2274:	d1 f1       	breq	.+116    	; 0x22ea <Timer_GetStatus+0xac>
    2276:	8d 81       	ldd	r24, Y+5	; 0x05
    2278:	9e 81       	ldd	r25, Y+6	; 0x06
    227a:	00 97       	sbiw	r24, 0x00	; 0
    227c:	09 f0       	breq	.+2      	; 0x2280 <Timer_GetStatus+0x42>
    227e:	5e c0       	rjmp	.+188    	; 0x233c <Timer_GetStatus+0xfe>
	{
		case TIMER_CH0:
          if (TimerInitializationCheck[TIMER_CH0] == FALSE)
    2280:	80 91 b5 00 	lds	r24, 0x00B5
    2284:	88 23       	and	r24, r24
    2286:	19 f4       	brne	.+6      	; 0x228e <Timer_GetStatus+0x50>
            return E_NOK;
    2288:	91 e0       	ldi	r25, 0x01	; 1
    228a:	9c 83       	std	Y+4, r25	; 0x04
    228c:	59 c0       	rjmp	.+178    	; 0x2340 <Timer_GetStatus+0x102>
          else
          {
		    *Data = GET_BIT(TIFR, BIT0);
    228e:	e8 e5       	ldi	r30, 0x58	; 88
    2290:	f0 e0       	ldi	r31, 0x00	; 0
    2292:	80 81       	ld	r24, Z
    2294:	81 70       	andi	r24, 0x01	; 1
    2296:	ea 81       	ldd	r30, Y+2	; 0x02
    2298:	fb 81       	ldd	r31, Y+3	; 0x03
    229a:	80 83       	st	Z, r24
		    return E_OK;
    229c:	1c 82       	std	Y+4, r1	; 0x04
    229e:	50 c0       	rjmp	.+160    	; 0x2340 <Timer_GetStatus+0x102>
          }
		case TIMER_CH1:
		  if (TimerInitializationCheck[TIMER_CH1] == FALSE)
    22a0:	80 91 b6 00 	lds	r24, 0x00B6
    22a4:	88 23       	and	r24, r24
    22a6:	19 f4       	brne	.+6      	; 0x22ae <Timer_GetStatus+0x70>
            return E_NOK;
    22a8:	21 e0       	ldi	r18, 0x01	; 1
    22aa:	2c 83       	std	Y+4, r18	; 0x04
    22ac:	49 c0       	rjmp	.+146    	; 0x2340 <Timer_GetStatus+0x102>
          else
          {
		    *Data = GET_BIT(TIFR, BIT2);
    22ae:	e8 e5       	ldi	r30, 0x58	; 88
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	80 81       	ld	r24, Z
    22b4:	88 2f       	mov	r24, r24
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	84 70       	andi	r24, 0x04	; 4
    22ba:	90 70       	andi	r25, 0x00	; 0
    22bc:	98 87       	std	Y+8, r25	; 0x08
    22be:	8f 83       	std	Y+7, r24	; 0x07
    22c0:	8f 81       	ldd	r24, Y+7	; 0x07
    22c2:	98 85       	ldd	r25, Y+8	; 0x08
    22c4:	99 23       	and	r25, r25
    22c6:	34 f4       	brge	.+12     	; 0x22d4 <Timer_GetStatus+0x96>
    22c8:	2f 81       	ldd	r18, Y+7	; 0x07
    22ca:	38 85       	ldd	r19, Y+8	; 0x08
    22cc:	2d 5f       	subi	r18, 0xFD	; 253
    22ce:	3f 4f       	sbci	r19, 0xFF	; 255
    22d0:	38 87       	std	Y+8, r19	; 0x08
    22d2:	2f 83       	std	Y+7, r18	; 0x07
    22d4:	8f 81       	ldd	r24, Y+7	; 0x07
    22d6:	98 85       	ldd	r25, Y+8	; 0x08
    22d8:	95 95       	asr	r25
    22da:	87 95       	ror	r24
    22dc:	95 95       	asr	r25
    22de:	87 95       	ror	r24
    22e0:	ea 81       	ldd	r30, Y+2	; 0x02
    22e2:	fb 81       	ldd	r31, Y+3	; 0x03
    22e4:	80 83       	st	Z, r24
		    return E_OK;
    22e6:	1c 82       	std	Y+4, r1	; 0x04
    22e8:	2b c0       	rjmp	.+86     	; 0x2340 <Timer_GetStatus+0x102>
          }
		case TIMER_CH2:
          if (TimerInitializationCheck[TIMER_CH2] == FALSE)
    22ea:	80 91 b7 00 	lds	r24, 0x00B7
    22ee:	88 23       	and	r24, r24
    22f0:	19 f4       	brne	.+6      	; 0x22f8 <Timer_GetStatus+0xba>
            return E_NOK;
    22f2:	31 e0       	ldi	r19, 0x01	; 1
    22f4:	3c 83       	std	Y+4, r19	; 0x04
    22f6:	24 c0       	rjmp	.+72     	; 0x2340 <Timer_GetStatus+0x102>
          else
          {
		    *Data = GET_BIT(TIFR, BIT6);
    22f8:	e8 e5       	ldi	r30, 0x58	; 88
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	80 81       	ld	r24, Z
    22fe:	88 2f       	mov	r24, r24
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	80 74       	andi	r24, 0x40	; 64
    2304:	90 70       	andi	r25, 0x00	; 0
    2306:	9a 87       	std	Y+10, r25	; 0x0a
    2308:	89 87       	std	Y+9, r24	; 0x09
    230a:	89 85       	ldd	r24, Y+9	; 0x09
    230c:	9a 85       	ldd	r25, Y+10	; 0x0a
    230e:	99 23       	and	r25, r25
    2310:	34 f4       	brge	.+12     	; 0x231e <Timer_GetStatus+0xe0>
    2312:	29 85       	ldd	r18, Y+9	; 0x09
    2314:	3a 85       	ldd	r19, Y+10	; 0x0a
    2316:	21 5c       	subi	r18, 0xC1	; 193
    2318:	3f 4f       	sbci	r19, 0xFF	; 255
    231a:	3a 87       	std	Y+10, r19	; 0x0a
    231c:	29 87       	std	Y+9, r18	; 0x09
    231e:	89 85       	ldd	r24, Y+9	; 0x09
    2320:	9a 85       	ldd	r25, Y+10	; 0x0a
    2322:	08 2e       	mov	r0, r24
    2324:	89 2f       	mov	r24, r25
    2326:	00 0c       	add	r0, r0
    2328:	88 1f       	adc	r24, r24
    232a:	99 0b       	sbc	r25, r25
    232c:	00 0c       	add	r0, r0
    232e:	88 1f       	adc	r24, r24
    2330:	99 1f       	adc	r25, r25
    2332:	ea 81       	ldd	r30, Y+2	; 0x02
    2334:	fb 81       	ldd	r31, Y+3	; 0x03
    2336:	80 83       	st	Z, r24
		    return E_OK;
    2338:	1c 82       	std	Y+4, r1	; 0x04
    233a:	02 c0       	rjmp	.+4      	; 0x2340 <Timer_GetStatus+0x102>
          }
		default:
		  return E_NOK;
    233c:	31 e0       	ldi	r19, 0x01	; 1
    233e:	3c 83       	std	Y+4, r19	; 0x04
    2340:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
    2342:	2a 96       	adiw	r28, 0x0a	; 10
    2344:	0f b6       	in	r0, 0x3f	; 63
    2346:	f8 94       	cli
    2348:	de bf       	out	0x3e, r29	; 62
    234a:	0f be       	out	0x3f, r0	; 63
    234c:	cd bf       	out	0x3d, r28	; 61
    234e:	cf 91       	pop	r28
    2350:	df 91       	pop	r29
    2352:	08 95       	ret

00002354 <Timer_GetValue>:
 * Return: The error status of the function.
 * Description: This function is used to return the value of the timer.
 *
 */
ERROR_STATUS Timer_GetValue(uint8 Timer_CH_NO, uint16* Data)
{
    2354:	df 93       	push	r29
    2356:	cf 93       	push	r28
    2358:	00 d0       	rcall	.+0      	; 0x235a <Timer_GetValue+0x6>
    235a:	00 d0       	rcall	.+0      	; 0x235c <Timer_GetValue+0x8>
    235c:	00 d0       	rcall	.+0      	; 0x235e <Timer_GetValue+0xa>
    235e:	cd b7       	in	r28, 0x3d	; 61
    2360:	de b7       	in	r29, 0x3e	; 62
    2362:	89 83       	std	Y+1, r24	; 0x01
    2364:	7b 83       	std	Y+3, r23	; 0x03
    2366:	6a 83       	std	Y+2, r22	; 0x02
	switch (Timer_CH_NO)
    2368:	89 81       	ldd	r24, Y+1	; 0x01
    236a:	28 2f       	mov	r18, r24
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	3e 83       	std	Y+6, r19	; 0x06
    2370:	2d 83       	std	Y+5, r18	; 0x05
    2372:	8d 81       	ldd	r24, Y+5	; 0x05
    2374:	9e 81       	ldd	r25, Y+6	; 0x06
    2376:	81 30       	cpi	r24, 0x01	; 1
    2378:	91 05       	cpc	r25, r1
    237a:	d9 f0       	breq	.+54     	; 0x23b2 <Timer_GetValue+0x5e>
    237c:	2d 81       	ldd	r18, Y+5	; 0x05
    237e:	3e 81       	ldd	r19, Y+6	; 0x06
    2380:	22 30       	cpi	r18, 0x02	; 2
    2382:	31 05       	cpc	r19, r1
    2384:	39 f1       	breq	.+78     	; 0x23d4 <Timer_GetValue+0x80>
    2386:	8d 81       	ldd	r24, Y+5	; 0x05
    2388:	9e 81       	ldd	r25, Y+6	; 0x06
    238a:	00 97       	sbiw	r24, 0x00	; 0
    238c:	a9 f5       	brne	.+106    	; 0x23f8 <Timer_GetValue+0xa4>
	{
		case TIMER_CH0:
            if (TimerInitializationCheck[TIMER_CH0] == FALSE)
    238e:	80 91 b5 00 	lds	r24, 0x00B5
    2392:	88 23       	and	r24, r24
    2394:	19 f4       	brne	.+6      	; 0x239c <Timer_GetValue+0x48>
                return E_NOK;
    2396:	91 e0       	ldi	r25, 0x01	; 1
    2398:	9c 83       	std	Y+4, r25	; 0x04
    239a:	30 c0       	rjmp	.+96     	; 0x23fc <Timer_GetValue+0xa8>
          else
          {
            *Data = TCNT0;
    239c:	e2 e5       	ldi	r30, 0x52	; 82
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	80 81       	ld	r24, Z
    23a2:	88 2f       	mov	r24, r24
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	ea 81       	ldd	r30, Y+2	; 0x02
    23a8:	fb 81       	ldd	r31, Y+3	; 0x03
    23aa:	91 83       	std	Z+1, r25	; 0x01
    23ac:	80 83       	st	Z, r24
            return E_OK;
    23ae:	1c 82       	std	Y+4, r1	; 0x04
    23b0:	25 c0       	rjmp	.+74     	; 0x23fc <Timer_GetValue+0xa8>
          }

		case TIMER_CH1:
			if (TimerInitializationCheck[TIMER_CH1] == FALSE)
    23b2:	80 91 b6 00 	lds	r24, 0x00B6
    23b6:	88 23       	and	r24, r24
    23b8:	19 f4       	brne	.+6      	; 0x23c0 <Timer_GetValue+0x6c>
            return E_NOK;
    23ba:	21 e0       	ldi	r18, 0x01	; 1
    23bc:	2c 83       	std	Y+4, r18	; 0x04
    23be:	1e c0       	rjmp	.+60     	; 0x23fc <Timer_GetValue+0xa8>
          else
          {
			*Data = TCNT1;
    23c0:	ec e4       	ldi	r30, 0x4C	; 76
    23c2:	f0 e0       	ldi	r31, 0x00	; 0
    23c4:	80 81       	ld	r24, Z
    23c6:	91 81       	ldd	r25, Z+1	; 0x01
    23c8:	ea 81       	ldd	r30, Y+2	; 0x02
    23ca:	fb 81       	ldd	r31, Y+3	; 0x03
    23cc:	91 83       	std	Z+1, r25	; 0x01
    23ce:	80 83       	st	Z, r24
			return E_OK;
    23d0:	1c 82       	std	Y+4, r1	; 0x04
    23d2:	14 c0       	rjmp	.+40     	; 0x23fc <Timer_GetValue+0xa8>
          }

		case TIMER_CH2:
		    if (TimerInitializationCheck[TIMER_CH2] == FALSE)
    23d4:	80 91 b7 00 	lds	r24, 0x00B7
    23d8:	88 23       	and	r24, r24
    23da:	19 f4       	brne	.+6      	; 0x23e2 <Timer_GetValue+0x8e>
            return E_NOK;
    23dc:	31 e0       	ldi	r19, 0x01	; 1
    23de:	3c 83       	std	Y+4, r19	; 0x04
    23e0:	0d c0       	rjmp	.+26     	; 0x23fc <Timer_GetValue+0xa8>
          else
          {
			*Data = TCNT2;
    23e2:	e4 e4       	ldi	r30, 0x44	; 68
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	80 81       	ld	r24, Z
    23e8:	88 2f       	mov	r24, r24
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	ea 81       	ldd	r30, Y+2	; 0x02
    23ee:	fb 81       	ldd	r31, Y+3	; 0x03
    23f0:	91 83       	std	Z+1, r25	; 0x01
    23f2:	80 83       	st	Z, r24
			return E_OK;
    23f4:	1c 82       	std	Y+4, r1	; 0x04
    23f6:	02 c0       	rjmp	.+4      	; 0x23fc <Timer_GetValue+0xa8>
          }

		default:
			return E_NOK;
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	8c 83       	std	Y+4, r24	; 0x04
    23fc:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
    23fe:	26 96       	adiw	r28, 0x06	; 6
    2400:	0f b6       	in	r0, 0x3f	; 63
    2402:	f8 94       	cli
    2404:	de bf       	out	0x3e, r29	; 62
    2406:	0f be       	out	0x3f, r0	; 63
    2408:	cd bf       	out	0x3d, r28	; 61
    240a:	cf 91       	pop	r28
    240c:	df 91       	pop	r29
    240e:	08 95       	ret

00002410 <__vector_11>:

ISR (TIMER0_OVF_vect)
{
    2410:	1f 92       	push	r1
    2412:	0f 92       	push	r0
    2414:	0f b6       	in	r0, 0x3f	; 63
    2416:	0f 92       	push	r0
    2418:	11 24       	eor	r1, r1
    241a:	2f 93       	push	r18
    241c:	3f 93       	push	r19
    241e:	4f 93       	push	r20
    2420:	5f 93       	push	r21
    2422:	6f 93       	push	r22
    2424:	7f 93       	push	r23
    2426:	8f 93       	push	r24
    2428:	9f 93       	push	r25
    242a:	af 93       	push	r26
    242c:	bf 93       	push	r27
    242e:	ef 93       	push	r30
    2430:	ff 93       	push	r31
    2432:	df 93       	push	r29
    2434:	cf 93       	push	r28
    2436:	cd b7       	in	r28, 0x3d	; 61
    2438:	de b7       	in	r29, 0x3e	; 62
    if (CBK_TimerFuncPtr[TIMER_CH0] != NULL)
    243a:	80 91 ac 00 	lds	r24, 0x00AC
    243e:	90 91 ad 00 	lds	r25, 0x00AD
    2442:	00 97       	sbiw	r24, 0x00	; 0
    2444:	29 f0       	breq	.+10     	; 0x2450 <__vector_11+0x40>
    {
        CBK_TimerFuncPtr[TIMER_CH0]();
    2446:	e0 91 ac 00 	lds	r30, 0x00AC
    244a:	f0 91 ad 00 	lds	r31, 0x00AD
    244e:	09 95       	icall
    }
}
    2450:	cf 91       	pop	r28
    2452:	df 91       	pop	r29
    2454:	ff 91       	pop	r31
    2456:	ef 91       	pop	r30
    2458:	bf 91       	pop	r27
    245a:	af 91       	pop	r26
    245c:	9f 91       	pop	r25
    245e:	8f 91       	pop	r24
    2460:	7f 91       	pop	r23
    2462:	6f 91       	pop	r22
    2464:	5f 91       	pop	r21
    2466:	4f 91       	pop	r20
    2468:	3f 91       	pop	r19
    246a:	2f 91       	pop	r18
    246c:	0f 90       	pop	r0
    246e:	0f be       	out	0x3f, r0	; 63
    2470:	0f 90       	pop	r0
    2472:	1f 90       	pop	r1
    2474:	18 95       	reti

00002476 <__vector_9>:

ISR (TIMER1_OVF_vect)
{
    2476:	1f 92       	push	r1
    2478:	0f 92       	push	r0
    247a:	0f b6       	in	r0, 0x3f	; 63
    247c:	0f 92       	push	r0
    247e:	11 24       	eor	r1, r1
    2480:	2f 93       	push	r18
    2482:	3f 93       	push	r19
    2484:	4f 93       	push	r20
    2486:	5f 93       	push	r21
    2488:	6f 93       	push	r22
    248a:	7f 93       	push	r23
    248c:	8f 93       	push	r24
    248e:	9f 93       	push	r25
    2490:	af 93       	push	r26
    2492:	bf 93       	push	r27
    2494:	ef 93       	push	r30
    2496:	ff 93       	push	r31
    2498:	df 93       	push	r29
    249a:	cf 93       	push	r28
    249c:	cd b7       	in	r28, 0x3d	; 61
    249e:	de b7       	in	r29, 0x3e	; 62
    if (CBK_TimerFuncPtr[TIMER_CH1] != NULL)
    24a0:	80 91 ae 00 	lds	r24, 0x00AE
    24a4:	90 91 af 00 	lds	r25, 0x00AF
    24a8:	00 97       	sbiw	r24, 0x00	; 0
    24aa:	29 f0       	breq	.+10     	; 0x24b6 <__vector_9+0x40>
    {
        CBK_TimerFuncPtr[TIMER_CH1]();
    24ac:	e0 91 ae 00 	lds	r30, 0x00AE
    24b0:	f0 91 af 00 	lds	r31, 0x00AF
    24b4:	09 95       	icall
    }
}
    24b6:	cf 91       	pop	r28
    24b8:	df 91       	pop	r29
    24ba:	ff 91       	pop	r31
    24bc:	ef 91       	pop	r30
    24be:	bf 91       	pop	r27
    24c0:	af 91       	pop	r26
    24c2:	9f 91       	pop	r25
    24c4:	8f 91       	pop	r24
    24c6:	7f 91       	pop	r23
    24c8:	6f 91       	pop	r22
    24ca:	5f 91       	pop	r21
    24cc:	4f 91       	pop	r20
    24ce:	3f 91       	pop	r19
    24d0:	2f 91       	pop	r18
    24d2:	0f 90       	pop	r0
    24d4:	0f be       	out	0x3f, r0	; 63
    24d6:	0f 90       	pop	r0
    24d8:	1f 90       	pop	r1
    24da:	18 95       	reti

000024dc <__vector_5>:

ISR (TIMER2_OVF_vect)
{
    24dc:	1f 92       	push	r1
    24de:	0f 92       	push	r0
    24e0:	0f b6       	in	r0, 0x3f	; 63
    24e2:	0f 92       	push	r0
    24e4:	11 24       	eor	r1, r1
    24e6:	2f 93       	push	r18
    24e8:	3f 93       	push	r19
    24ea:	4f 93       	push	r20
    24ec:	5f 93       	push	r21
    24ee:	6f 93       	push	r22
    24f0:	7f 93       	push	r23
    24f2:	8f 93       	push	r24
    24f4:	9f 93       	push	r25
    24f6:	af 93       	push	r26
    24f8:	bf 93       	push	r27
    24fa:	ef 93       	push	r30
    24fc:	ff 93       	push	r31
    24fe:	df 93       	push	r29
    2500:	cf 93       	push	r28
    2502:	cd b7       	in	r28, 0x3d	; 61
    2504:	de b7       	in	r29, 0x3e	; 62
    if (CBK_TimerFuncPtr[TIMER_CH2] != NULL)
    2506:	80 91 b0 00 	lds	r24, 0x00B0
    250a:	90 91 b1 00 	lds	r25, 0x00B1
    250e:	00 97       	sbiw	r24, 0x00	; 0
    2510:	29 f0       	breq	.+10     	; 0x251c <__vector_5+0x40>
    {
        CBK_TimerFuncPtr[TIMER_CH2]();
    2512:	e0 91 b0 00 	lds	r30, 0x00B0
    2516:	f0 91 b1 00 	lds	r31, 0x00B1
    251a:	09 95       	icall
    }
}
    251c:	cf 91       	pop	r28
    251e:	df 91       	pop	r29
    2520:	ff 91       	pop	r31
    2522:	ef 91       	pop	r30
    2524:	bf 91       	pop	r27
    2526:	af 91       	pop	r26
    2528:	9f 91       	pop	r25
    252a:	8f 91       	pop	r24
    252c:	7f 91       	pop	r23
    252e:	6f 91       	pop	r22
    2530:	5f 91       	pop	r21
    2532:	4f 91       	pop	r20
    2534:	3f 91       	pop	r19
    2536:	2f 91       	pop	r18
    2538:	0f 90       	pop	r0
    253a:	0f be       	out	0x3f, r0	; 63
    253c:	0f 90       	pop	r0
    253e:	1f 90       	pop	r1
    2540:	18 95       	reti

00002542 <__vector_15>:
/************************************************************************/

void (*gaptr_uartInterrupt_CBF[3])(void) = {NULL,NULL,NULL};

ISR(USART_TXC_vect)
{
    2542:	1f 92       	push	r1
    2544:	0f 92       	push	r0
    2546:	0f b6       	in	r0, 0x3f	; 63
    2548:	0f 92       	push	r0
    254a:	11 24       	eor	r1, r1
    254c:	2f 93       	push	r18
    254e:	3f 93       	push	r19
    2550:	4f 93       	push	r20
    2552:	5f 93       	push	r21
    2554:	6f 93       	push	r22
    2556:	7f 93       	push	r23
    2558:	8f 93       	push	r24
    255a:	9f 93       	push	r25
    255c:	af 93       	push	r26
    255e:	bf 93       	push	r27
    2560:	ef 93       	push	r30
    2562:	ff 93       	push	r31
    2564:	df 93       	push	r29
    2566:	cf 93       	push	r28
    2568:	cd b7       	in	r28, 0x3d	; 61
    256a:	de b7       	in	r29, 0x3e	; 62
	if(gaptr_uartInterrupt_CBF[0] != 0)
    256c:	80 91 b8 00 	lds	r24, 0x00B8
    2570:	90 91 b9 00 	lds	r25, 0x00B9
    2574:	00 97       	sbiw	r24, 0x00	; 0
    2576:	29 f0       	breq	.+10     	; 0x2582 <__vector_15+0x40>
	{
		gaptr_uartInterrupt_CBF[0]();
    2578:	e0 91 b8 00 	lds	r30, 0x00B8
    257c:	f0 91 b9 00 	lds	r31, 0x00B9
    2580:	09 95       	icall
	}

}
    2582:	cf 91       	pop	r28
    2584:	df 91       	pop	r29
    2586:	ff 91       	pop	r31
    2588:	ef 91       	pop	r30
    258a:	bf 91       	pop	r27
    258c:	af 91       	pop	r26
    258e:	9f 91       	pop	r25
    2590:	8f 91       	pop	r24
    2592:	7f 91       	pop	r23
    2594:	6f 91       	pop	r22
    2596:	5f 91       	pop	r21
    2598:	4f 91       	pop	r20
    259a:	3f 91       	pop	r19
    259c:	2f 91       	pop	r18
    259e:	0f 90       	pop	r0
    25a0:	0f be       	out	0x3f, r0	; 63
    25a2:	0f 90       	pop	r0
    25a4:	1f 90       	pop	r1
    25a6:	18 95       	reti

000025a8 <__vector_13>:

ISR(USART_RXC_vect)
{
    25a8:	1f 92       	push	r1
    25aa:	0f 92       	push	r0
    25ac:	0f b6       	in	r0, 0x3f	; 63
    25ae:	0f 92       	push	r0
    25b0:	11 24       	eor	r1, r1
    25b2:	2f 93       	push	r18
    25b4:	3f 93       	push	r19
    25b6:	4f 93       	push	r20
    25b8:	5f 93       	push	r21
    25ba:	6f 93       	push	r22
    25bc:	7f 93       	push	r23
    25be:	8f 93       	push	r24
    25c0:	9f 93       	push	r25
    25c2:	af 93       	push	r26
    25c4:	bf 93       	push	r27
    25c6:	ef 93       	push	r30
    25c8:	ff 93       	push	r31
    25ca:	df 93       	push	r29
    25cc:	cf 93       	push	r28
    25ce:	cd b7       	in	r28, 0x3d	; 61
    25d0:	de b7       	in	r29, 0x3e	; 62
	if(gaptr_uartInterrupt_CBF[1] != 0)
    25d2:	80 91 ba 00 	lds	r24, 0x00BA
    25d6:	90 91 bb 00 	lds	r25, 0x00BB
    25da:	00 97       	sbiw	r24, 0x00	; 0
    25dc:	29 f0       	breq	.+10     	; 0x25e8 <__vector_13+0x40>
	{
		gaptr_uartInterrupt_CBF[1]();
    25de:	e0 91 ba 00 	lds	r30, 0x00BA
    25e2:	f0 91 bb 00 	lds	r31, 0x00BB
    25e6:	09 95       	icall
	}
}
    25e8:	cf 91       	pop	r28
    25ea:	df 91       	pop	r29
    25ec:	ff 91       	pop	r31
    25ee:	ef 91       	pop	r30
    25f0:	bf 91       	pop	r27
    25f2:	af 91       	pop	r26
    25f4:	9f 91       	pop	r25
    25f6:	8f 91       	pop	r24
    25f8:	7f 91       	pop	r23
    25fa:	6f 91       	pop	r22
    25fc:	5f 91       	pop	r21
    25fe:	4f 91       	pop	r20
    2600:	3f 91       	pop	r19
    2602:	2f 91       	pop	r18
    2604:	0f 90       	pop	r0
    2606:	0f be       	out	0x3f, r0	; 63
    2608:	0f 90       	pop	r0
    260a:	1f 90       	pop	r1
    260c:	18 95       	reti

0000260e <__vector_14>:

ISR(USART_UDRE_vect)
{
    260e:	1f 92       	push	r1
    2610:	0f 92       	push	r0
    2612:	0f b6       	in	r0, 0x3f	; 63
    2614:	0f 92       	push	r0
    2616:	11 24       	eor	r1, r1
    2618:	2f 93       	push	r18
    261a:	3f 93       	push	r19
    261c:	4f 93       	push	r20
    261e:	5f 93       	push	r21
    2620:	6f 93       	push	r22
    2622:	7f 93       	push	r23
    2624:	8f 93       	push	r24
    2626:	9f 93       	push	r25
    2628:	af 93       	push	r26
    262a:	bf 93       	push	r27
    262c:	ef 93       	push	r30
    262e:	ff 93       	push	r31
    2630:	df 93       	push	r29
    2632:	cf 93       	push	r28
    2634:	cd b7       	in	r28, 0x3d	; 61
    2636:	de b7       	in	r29, 0x3e	; 62
	if(gaptr_uartInterrupt_CBF[2] != 0)
    2638:	80 91 bc 00 	lds	r24, 0x00BC
    263c:	90 91 bd 00 	lds	r25, 0x00BD
    2640:	00 97       	sbiw	r24, 0x00	; 0
    2642:	29 f0       	breq	.+10     	; 0x264e <__vector_14+0x40>
	{
		gaptr_uartInterrupt_CBF[2]();
    2644:	e0 91 bc 00 	lds	r30, 0x00BC
    2648:	f0 91 bd 00 	lds	r31, 0x00BD
    264c:	09 95       	icall
	}
}
    264e:	cf 91       	pop	r28
    2650:	df 91       	pop	r29
    2652:	ff 91       	pop	r31
    2654:	ef 91       	pop	r30
    2656:	bf 91       	pop	r27
    2658:	af 91       	pop	r26
    265a:	9f 91       	pop	r25
    265c:	8f 91       	pop	r24
    265e:	7f 91       	pop	r23
    2660:	6f 91       	pop	r22
    2662:	5f 91       	pop	r21
    2664:	4f 91       	pop	r20
    2666:	3f 91       	pop	r19
    2668:	2f 91       	pop	r18
    266a:	0f 90       	pop	r0
    266c:	0f be       	out	0x3f, r0	; 63
    266e:	0f 90       	pop	r0
    2670:	1f 90       	pop	r1
    2672:	18 95       	reti

00002674 <UART_Init>:
 * \param *pUART_cfg_s : A pointer to a struct that holds the desired UART configuration
 * \return ERROR_STATUS : Indication to the function execution
 *
 **/
ERROR_STATUS UART_Init(UART_cfg_s *pUART_cfg_s)
{
    2674:	cf 92       	push	r12
    2676:	df 92       	push	r13
    2678:	ef 92       	push	r14
    267a:	ff 92       	push	r15
    267c:	0f 93       	push	r16
    267e:	1f 93       	push	r17
    2680:	df 93       	push	r29
    2682:	cf 93       	push	r28
    2684:	cd b7       	in	r28, 0x3d	; 61
    2686:	de b7       	in	r29, 0x3e	; 62
    2688:	2c 97       	sbiw	r28, 0x0c	; 12
    268a:	0f b6       	in	r0, 0x3f	; 63
    268c:	f8 94       	cli
    268e:	de bf       	out	0x3e, r29	; 62
    2690:	0f be       	out	0x3f, r0	; 63
    2692:	cd bf       	out	0x3d, r28	; 61
    2694:	99 87       	std	Y+9, r25	; 0x09
    2696:	88 87       	std	Y+8, r24	; 0x08
    if (pUART_cfg_s == NULL)
    2698:	88 85       	ldd	r24, Y+8	; 0x08
    269a:	99 85       	ldd	r25, Y+9	; 0x09
    269c:	00 97       	sbiw	r24, 0x00	; 0
    269e:	19 f4       	brne	.+6      	; 0x26a6 <UART_Init+0x32>
    {
        return E_NOK;
    26a0:	21 e0       	ldi	r18, 0x01	; 1
    26a2:	2c 87       	std	Y+12, r18	; 0x0c
    26a4:	a5 c1       	rjmp	.+842    	; 0x29f0 <UART_Init+0x37c>
    }
	/* Declaration of DIO configure structure for TX and RX */
	DIO_Cfg_s ST_txDio = {0};
    26a6:	83 e0       	ldi	r24, 0x03	; 3
    26a8:	fe 01       	movw	r30, r28
    26aa:	32 96       	adiw	r30, 0x02	; 2
    26ac:	df 01       	movw	r26, r30
    26ae:	28 2f       	mov	r18, r24
    26b0:	1d 92       	st	X+, r1
    26b2:	2a 95       	dec	r18
    26b4:	e9 f7       	brne	.-6      	; 0x26b0 <UART_Init+0x3c>
	DIO_Cfg_s ST_rxDio = {0};
    26b6:	83 e0       	ldi	r24, 0x03	; 3
    26b8:	fe 01       	movw	r30, r28
    26ba:	35 96       	adiw	r30, 0x05	; 5
    26bc:	df 01       	movw	r26, r30
    26be:	28 2f       	mov	r18, r24
    26c0:	1d 92       	st	X+, r1
    26c2:	2a 95       	dec	r18
    26c4:	e9 f7       	brne	.-6      	; 0x26c0 <UART_Init+0x4c>
	uint8 u8_UCSRC_Buffer = UART_RSEL;
    26c6:	80 e8       	ldi	r24, 0x80	; 128
    26c8:	89 83       	std	Y+1, r24	; 0x01
	switch(pUART_cfg_s->u8_DesiredOperation)
    26ca:	e8 85       	ldd	r30, Y+8	; 0x08
    26cc:	f9 85       	ldd	r31, Y+9	; 0x09
    26ce:	81 81       	ldd	r24, Z+1	; 0x01
    26d0:	a8 2f       	mov	r26, r24
    26d2:	b0 e0       	ldi	r27, 0x00	; 0
    26d4:	bb 87       	std	Y+11, r27	; 0x0b
    26d6:	aa 87       	std	Y+10, r26	; 0x0a
    26d8:	ea 85       	ldd	r30, Y+10	; 0x0a
    26da:	fb 85       	ldd	r31, Y+11	; 0x0b
    26dc:	e1 30       	cpi	r30, 0x01	; 1
    26de:	f1 05       	cpc	r31, r1
    26e0:	c9 f1       	breq	.+114    	; 0x2754 <UART_Init+0xe0>
    26e2:	2a 85       	ldd	r18, Y+10	; 0x0a
    26e4:	3b 85       	ldd	r19, Y+11	; 0x0b
    26e6:	22 30       	cpi	r18, 0x02	; 2
    26e8:	31 05       	cpc	r19, r1
    26ea:	09 f4       	brne	.+2      	; 0x26ee <UART_Init+0x7a>
    26ec:	60 c0       	rjmp	.+192    	; 0x27ae <UART_Init+0x13a>
    26ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    26f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    26f2:	00 97       	sbiw	r24, 0x00	; 0
    26f4:	09 f0       	breq	.+2      	; 0x26f8 <UART_Init+0x84>
    26f6:	9a c0       	rjmp	.+308    	; 0x282c <UART_Init+0x1b8>
	{
		case TRANSMITTER:
			/*DIO initialization*/
			ST_txDio.pins = UART_TX_BIT;
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	8b 83       	std	Y+3, r24	; 0x03
			ST_txDio.GPIO = UART_TX_GPIO;
    26fc:	83 e0       	ldi	r24, 0x03	; 3
    26fe:	8a 83       	std	Y+2, r24	; 0x02
			ST_txDio.dir = OUTPUT;
    2700:	8f ef       	ldi	r24, 0xFF	; 255
    2702:	8c 83       	std	Y+4, r24	; 0x04
			DIO_init(&ST_txDio);
    2704:	ce 01       	movw	r24, r28
    2706:	02 96       	adiw	r24, 0x02	; 2
    2708:	0e 94 06 03 	call	0x60c	; 0x60c <DIO_init>
			if(pUART_cfg_s->u8_InterruptMode)
    270c:	e8 85       	ldd	r30, Y+8	; 0x08
    270e:	f9 85       	ldd	r31, Y+9	; 0x09
    2710:	80 81       	ld	r24, Z
    2712:	88 23       	and	r24, r24
    2714:	81 f0       	breq	.+32     	; 0x2736 <UART_Init+0xc2>
			{
				/*Enable Interrupt if selected in cfg. structure*/
				SET_BIT(UART_CSRB,UART_TXCIE);
    2716:	aa e2       	ldi	r26, 0x2A	; 42
    2718:	b0 e0       	ldi	r27, 0x00	; 0
    271a:	ea e2       	ldi	r30, 0x2A	; 42
    271c:	f0 e0       	ldi	r31, 0x00	; 0
    271e:	80 81       	ld	r24, Z
    2720:	80 64       	ori	r24, 0x40	; 64
    2722:	8c 93       	st	X, r24
				/*assign the passed pointer to function to be called later in ISR*/
				gaptr_uartInterrupt_CBF[TX_CBF] = pUART_cfg_s->Transmit_Cbk_ptr;
    2724:	e8 85       	ldd	r30, Y+8	; 0x08
    2726:	f9 85       	ldd	r31, Y+9	; 0x09
    2728:	82 85       	ldd	r24, Z+10	; 0x0a
    272a:	93 85       	ldd	r25, Z+11	; 0x0b
    272c:	90 93 b9 00 	sts	0x00B9, r25
    2730:	80 93 b8 00 	sts	0x00B8, r24
    2734:	07 c0       	rjmp	.+14     	; 0x2744 <UART_Init+0xd0>
			}
			else
			{
				/*Polling selected in cfg. structure*/
				CLR_BIT(UART_CSRB,UART_TXCIE);
    2736:	aa e2       	ldi	r26, 0x2A	; 42
    2738:	b0 e0       	ldi	r27, 0x00	; 0
    273a:	ea e2       	ldi	r30, 0x2A	; 42
    273c:	f0 e0       	ldi	r31, 0x00	; 0
    273e:	80 81       	ld	r24, Z
    2740:	8f 7b       	andi	r24, 0xBF	; 191
    2742:	8c 93       	st	X, r24
			}

			/* Enable the device to work as Transmitter*/
			SET_BIT(UART_CSRB,UART_TXEN);
    2744:	aa e2       	ldi	r26, 0x2A	; 42
    2746:	b0 e0       	ldi	r27, 0x00	; 0
    2748:	ea e2       	ldi	r30, 0x2A	; 42
    274a:	f0 e0       	ldi	r31, 0x00	; 0
    274c:	80 81       	ld	r24, Z
    274e:	88 60       	ori	r24, 0x08	; 8
    2750:	8c 93       	st	X, r24
    2752:	6f c0       	rjmp	.+222    	; 0x2832 <UART_Init+0x1be>
			break;
		case RECEIVER:
			/*DIO initialization*/
			ST_rxDio.pins = UART_RX_BIT;
    2754:	82 e0       	ldi	r24, 0x02	; 2
    2756:	8e 83       	std	Y+6, r24	; 0x06
			ST_rxDio.GPIO = UART_RX_GPIO;
    2758:	83 e0       	ldi	r24, 0x03	; 3
    275a:	8d 83       	std	Y+5, r24	; 0x05
			ST_rxDio.dir  = INPUT;
    275c:	1f 82       	std	Y+7, r1	; 0x07
			DIO_init(&ST_rxDio);
    275e:	ce 01       	movw	r24, r28
    2760:	05 96       	adiw	r24, 0x05	; 5
    2762:	0e 94 06 03 	call	0x60c	; 0x60c <DIO_init>

			if(pUART_cfg_s->u8_InterruptMode)
    2766:	e8 85       	ldd	r30, Y+8	; 0x08
    2768:	f9 85       	ldd	r31, Y+9	; 0x09
    276a:	80 81       	ld	r24, Z
    276c:	88 23       	and	r24, r24
    276e:	81 f0       	breq	.+32     	; 0x2790 <UART_Init+0x11c>
			{
				/*Enable Interrupt if selected in cfg. structure*/
				SET_BIT(UART_CSRB,UART_RXCIE);
    2770:	aa e2       	ldi	r26, 0x2A	; 42
    2772:	b0 e0       	ldi	r27, 0x00	; 0
    2774:	ea e2       	ldi	r30, 0x2A	; 42
    2776:	f0 e0       	ldi	r31, 0x00	; 0
    2778:	80 81       	ld	r24, Z
    277a:	80 68       	ori	r24, 0x80	; 128
    277c:	8c 93       	st	X, r24
				/*assign the passed pointer to function to be called later in ISR*/
				gaptr_uartInterrupt_CBF[RX_CBF] = pUART_cfg_s->Resceive_Cbk_ptr;
    277e:	e8 85       	ldd	r30, Y+8	; 0x08
    2780:	f9 85       	ldd	r31, Y+9	; 0x09
    2782:	84 85       	ldd	r24, Z+12	; 0x0c
    2784:	95 85       	ldd	r25, Z+13	; 0x0d
    2786:	90 93 bb 00 	sts	0x00BB, r25
    278a:	80 93 ba 00 	sts	0x00BA, r24
    278e:	07 c0       	rjmp	.+14     	; 0x279e <UART_Init+0x12a>
			}
			else
			{
				/*Polling selected in cfg. structure*/
				CLR_BIT(UART_CSRB,UART_RXCIE);
    2790:	aa e2       	ldi	r26, 0x2A	; 42
    2792:	b0 e0       	ldi	r27, 0x00	; 0
    2794:	ea e2       	ldi	r30, 0x2A	; 42
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	80 81       	ld	r24, Z
    279a:	8f 77       	andi	r24, 0x7F	; 127
    279c:	8c 93       	st	X, r24
			}
			/* Enable the device to work as Receiver*/
			SET_BIT(UART_CSRB,UART_RXEN);
    279e:	aa e2       	ldi	r26, 0x2A	; 42
    27a0:	b0 e0       	ldi	r27, 0x00	; 0
    27a2:	ea e2       	ldi	r30, 0x2A	; 42
    27a4:	f0 e0       	ldi	r31, 0x00	; 0
    27a6:	80 81       	ld	r24, Z
    27a8:	80 61       	ori	r24, 0x10	; 16
    27aa:	8c 93       	st	X, r24
    27ac:	42 c0       	rjmp	.+132    	; 0x2832 <UART_Init+0x1be>
			break;
		case TRANSCEIVER:
			/*DIO initialization*/
			/*TX pin -> O/P  */
			ST_txDio.pins = UART_TX_BIT;
    27ae:	81 e0       	ldi	r24, 0x01	; 1
    27b0:	8b 83       	std	Y+3, r24	; 0x03
			ST_txDio.GPIO = UART_TX_GPIO;
    27b2:	83 e0       	ldi	r24, 0x03	; 3
    27b4:	8a 83       	std	Y+2, r24	; 0x02
			ST_txDio.dir = OUTPUT;
    27b6:	8f ef       	ldi	r24, 0xFF	; 255
    27b8:	8c 83       	std	Y+4, r24	; 0x04
			DIO_init(&ST_txDio);
    27ba:	ce 01       	movw	r24, r28
    27bc:	02 96       	adiw	r24, 0x02	; 2
    27be:	0e 94 06 03 	call	0x60c	; 0x60c <DIO_init>
			/*RX pin <- I/P*/
			ST_rxDio.pins = UART_RX_BIT;
    27c2:	82 e0       	ldi	r24, 0x02	; 2
    27c4:	8e 83       	std	Y+6, r24	; 0x06
			ST_rxDio.GPIO = UART_RX_GPIO;
    27c6:	83 e0       	ldi	r24, 0x03	; 3
    27c8:	8d 83       	std	Y+5, r24	; 0x05
			ST_rxDio.dir  = INPUT;
    27ca:	1f 82       	std	Y+7, r1	; 0x07
			DIO_init(&ST_rxDio);
    27cc:	ce 01       	movw	r24, r28
    27ce:	05 96       	adiw	r24, 0x05	; 5
    27d0:	0e 94 06 03 	call	0x60c	; 0x60c <DIO_init>

			if(pUART_cfg_s->u8_InterruptMode)
    27d4:	e8 85       	ldd	r30, Y+8	; 0x08
    27d6:	f9 85       	ldd	r31, Y+9	; 0x09
    27d8:	80 81       	ld	r24, Z
    27da:	88 23       	and	r24, r24
    27dc:	c1 f0       	breq	.+48     	; 0x280e <UART_Init+0x19a>
			{
				/*Enable Interrupt if selected in cfg. structure*/
				SET_BIT(UART_CSRB,UART_TXCIE|UART_RXCIE);
    27de:	aa e2       	ldi	r26, 0x2A	; 42
    27e0:	b0 e0       	ldi	r27, 0x00	; 0
    27e2:	ea e2       	ldi	r30, 0x2A	; 42
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	80 81       	ld	r24, Z
    27e8:	80 6c       	ori	r24, 0xC0	; 192
    27ea:	8c 93       	st	X, r24
				/*assign the passed pointer to function to be called later in ISR*/
				gaptr_uartInterrupt_CBF[RX_CBF] = pUART_cfg_s->Resceive_Cbk_ptr;
    27ec:	e8 85       	ldd	r30, Y+8	; 0x08
    27ee:	f9 85       	ldd	r31, Y+9	; 0x09
    27f0:	84 85       	ldd	r24, Z+12	; 0x0c
    27f2:	95 85       	ldd	r25, Z+13	; 0x0d
    27f4:	90 93 bb 00 	sts	0x00BB, r25
    27f8:	80 93 ba 00 	sts	0x00BA, r24
				gaptr_uartInterrupt_CBF[TX_CBF] = pUART_cfg_s->Transmit_Cbk_ptr;
    27fc:	e8 85       	ldd	r30, Y+8	; 0x08
    27fe:	f9 85       	ldd	r31, Y+9	; 0x09
    2800:	82 85       	ldd	r24, Z+10	; 0x0a
    2802:	93 85       	ldd	r25, Z+11	; 0x0b
    2804:	90 93 b9 00 	sts	0x00B9, r25
    2808:	80 93 b8 00 	sts	0x00B8, r24
    280c:	07 c0       	rjmp	.+14     	; 0x281c <UART_Init+0x1a8>
			}
			else
			{
				/*Polling selected in cfg. structure*/
				CLR_BIT(UART_CSRB,UART_TXCIE|UART_RXCIE);
    280e:	aa e2       	ldi	r26, 0x2A	; 42
    2810:	b0 e0       	ldi	r27, 0x00	; 0
    2812:	ea e2       	ldi	r30, 0x2A	; 42
    2814:	f0 e0       	ldi	r31, 0x00	; 0
    2816:	80 81       	ld	r24, Z
    2818:	8f 73       	andi	r24, 0x3F	; 63
    281a:	8c 93       	st	X, r24
			}
			/* Enable the device to work as Receiver*/
			SET_BIT(UART_CSRB , UART_RXEN|UART_TXEN);
    281c:	aa e2       	ldi	r26, 0x2A	; 42
    281e:	b0 e0       	ldi	r27, 0x00	; 0
    2820:	ea e2       	ldi	r30, 0x2A	; 42
    2822:	f0 e0       	ldi	r31, 0x00	; 0
    2824:	80 81       	ld	r24, Z
    2826:	88 61       	ori	r24, 0x18	; 24
    2828:	8c 93       	st	X, r24
    282a:	03 c0       	rjmp	.+6      	; 0x2832 <UART_Init+0x1be>
			break;

		default:
			return E_NOK;
    282c:	91 e0       	ldi	r25, 0x01	; 1
    282e:	9c 87       	std	Y+12, r25	; 0x0c
    2830:	df c0       	rjmp	.+446    	; 0x29f0 <UART_Init+0x37c>
	}

	/* U2X bit specify if UART work with double speed or not*/
	if(pUART_cfg_s->u8_DoubleSpeed == UART_DOUBLE_SPEED)
    2832:	e8 85       	ldd	r30, Y+8	; 0x08
    2834:	f9 85       	ldd	r31, Y+9	; 0x09
    2836:	82 81       	ldd	r24, Z+2	; 0x02
    2838:	81 30       	cpi	r24, 0x01	; 1
    283a:	41 f4       	brne	.+16     	; 0x284c <UART_Init+0x1d8>
	{
		SET_BIT(UART_CSRA,UART_U2X);
    283c:	ab e2       	ldi	r26, 0x2B	; 43
    283e:	b0 e0       	ldi	r27, 0x00	; 0
    2840:	eb e2       	ldi	r30, 0x2B	; 43
    2842:	f0 e0       	ldi	r31, 0x00	; 0
    2844:	80 81       	ld	r24, Z
    2846:	82 60       	ori	r24, 0x02	; 2
    2848:	8c 93       	st	X, r24
    284a:	10 c0       	rjmp	.+32     	; 0x286c <UART_Init+0x1f8>
	}
	else if (pUART_cfg_s->u8_DoubleSpeed == UART_NO_DOUBLE_SPEED)
    284c:	e8 85       	ldd	r30, Y+8	; 0x08
    284e:	f9 85       	ldd	r31, Y+9	; 0x09
    2850:	82 81       	ldd	r24, Z+2	; 0x02
    2852:	88 23       	and	r24, r24
    2854:	41 f4       	brne	.+16     	; 0x2866 <UART_Init+0x1f2>
	{
		CLR_BIT(UART_CSRA,UART_U2X);
    2856:	ab e2       	ldi	r26, 0x2B	; 43
    2858:	b0 e0       	ldi	r27, 0x00	; 0
    285a:	eb e2       	ldi	r30, 0x2B	; 43
    285c:	f0 e0       	ldi	r31, 0x00	; 0
    285e:	80 81       	ld	r24, Z
    2860:	8d 7f       	andi	r24, 0xFD	; 253
    2862:	8c 93       	st	X, r24
    2864:	03 c0       	rjmp	.+6      	; 0x286c <UART_Init+0x1f8>

	}
	else
	{
		return E_NOK;
    2866:	a1 e0       	ldi	r26, 0x01	; 1
    2868:	ac 87       	std	Y+12, r26	; 0x0c
    286a:	c2 c0       	rjmp	.+388    	; 0x29f0 <UART_Init+0x37c>
	}
	/* Get Value to be set in UBBR register depending on baud-rate */
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UART_BRRH = GET_UBRR_VALUE(pUART_cfg_s->u32_BaudRate,pUART_cfg_s->u8_DoubleSpeed)>>8;
    286c:	cc 24       	eor	r12, r12
    286e:	dd 24       	eor	r13, r13
    2870:	68 94       	set
    2872:	c6 f8       	bld	r12, 6
    2874:	e8 85       	ldd	r30, Y+8	; 0x08
    2876:	f9 85       	ldd	r31, Y+9	; 0x09
    2878:	e6 80       	ldd	r14, Z+6	; 0x06
    287a:	f7 80       	ldd	r15, Z+7	; 0x07
    287c:	00 85       	ldd	r16, Z+8	; 0x08
    287e:	11 85       	ldd	r17, Z+9	; 0x09
    2880:	e8 85       	ldd	r30, Y+8	; 0x08
    2882:	f9 85       	ldd	r31, Y+9	; 0x09
    2884:	82 81       	ldd	r24, Z+2	; 0x02
    2886:	88 2f       	mov	r24, r24
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	01 96       	adiw	r24, 0x01	; 1
    288c:	9c 01       	movw	r18, r24
    288e:	44 27       	eor	r20, r20
    2890:	37 fd       	sbrc	r19, 7
    2892:	40 95       	com	r20
    2894:	54 2f       	mov	r21, r20
    2896:	80 e1       	ldi	r24, 0x10	; 16
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	a0 e0       	ldi	r26, 0x00	; 0
    289c:	b0 e0       	ldi	r27, 0x00	; 0
    289e:	bc 01       	movw	r22, r24
    28a0:	cd 01       	movw	r24, r26
    28a2:	0e 94 7d 15 	call	0x2afa	; 0x2afa <__udivmodsi4>
    28a6:	da 01       	movw	r26, r20
    28a8:	c9 01       	movw	r24, r18
    28aa:	9c 01       	movw	r18, r24
    28ac:	ad 01       	movw	r20, r26
    28ae:	c8 01       	movw	r24, r16
    28b0:	b7 01       	movw	r22, r14
    28b2:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <__mulsi3>
    28b6:	9b 01       	movw	r18, r22
    28b8:	ac 01       	movw	r20, r24
    28ba:	80 e0       	ldi	r24, 0x00	; 0
    28bc:	94 e2       	ldi	r25, 0x24	; 36
    28be:	a4 ef       	ldi	r26, 0xF4	; 244
    28c0:	b0 e0       	ldi	r27, 0x00	; 0
    28c2:	bc 01       	movw	r22, r24
    28c4:	cd 01       	movw	r24, r26
    28c6:	0e 94 7d 15 	call	0x2afa	; 0x2afa <__udivmodsi4>
    28ca:	da 01       	movw	r26, r20
    28cc:	c9 01       	movw	r24, r18
    28ce:	01 97       	sbiw	r24, 0x01	; 1
    28d0:	a1 09       	sbc	r26, r1
    28d2:	b1 09       	sbc	r27, r1
    28d4:	89 2f       	mov	r24, r25
    28d6:	9a 2f       	mov	r25, r26
    28d8:	ab 2f       	mov	r26, r27
    28da:	bb 27       	eor	r27, r27
    28dc:	f6 01       	movw	r30, r12
    28de:	80 83       	st	Z, r24
	UART_BRRL = GET_UBRR_VALUE(pUART_cfg_s->u32_BaudRate,pUART_cfg_s->u8_DoubleSpeed);
    28e0:	0f 2e       	mov	r0, r31
    28e2:	f9 e2       	ldi	r31, 0x29	; 41
    28e4:	cf 2e       	mov	r12, r31
    28e6:	dd 24       	eor	r13, r13
    28e8:	f0 2d       	mov	r31, r0
    28ea:	e8 85       	ldd	r30, Y+8	; 0x08
    28ec:	f9 85       	ldd	r31, Y+9	; 0x09
    28ee:	e6 80       	ldd	r14, Z+6	; 0x06
    28f0:	f7 80       	ldd	r15, Z+7	; 0x07
    28f2:	00 85       	ldd	r16, Z+8	; 0x08
    28f4:	11 85       	ldd	r17, Z+9	; 0x09
    28f6:	e8 85       	ldd	r30, Y+8	; 0x08
    28f8:	f9 85       	ldd	r31, Y+9	; 0x09
    28fa:	82 81       	ldd	r24, Z+2	; 0x02
    28fc:	88 2f       	mov	r24, r24
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	01 96       	adiw	r24, 0x01	; 1
    2902:	9c 01       	movw	r18, r24
    2904:	44 27       	eor	r20, r20
    2906:	37 fd       	sbrc	r19, 7
    2908:	40 95       	com	r20
    290a:	54 2f       	mov	r21, r20
    290c:	80 e1       	ldi	r24, 0x10	; 16
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	a0 e0       	ldi	r26, 0x00	; 0
    2912:	b0 e0       	ldi	r27, 0x00	; 0
    2914:	bc 01       	movw	r22, r24
    2916:	cd 01       	movw	r24, r26
    2918:	0e 94 7d 15 	call	0x2afa	; 0x2afa <__udivmodsi4>
    291c:	da 01       	movw	r26, r20
    291e:	c9 01       	movw	r24, r18
    2920:	9c 01       	movw	r18, r24
    2922:	ad 01       	movw	r20, r26
    2924:	c8 01       	movw	r24, r16
    2926:	b7 01       	movw	r22, r14
    2928:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <__mulsi3>
    292c:	9b 01       	movw	r18, r22
    292e:	ac 01       	movw	r20, r24
    2930:	80 e0       	ldi	r24, 0x00	; 0
    2932:	94 e2       	ldi	r25, 0x24	; 36
    2934:	a4 ef       	ldi	r26, 0xF4	; 244
    2936:	b0 e0       	ldi	r27, 0x00	; 0
    2938:	bc 01       	movw	r22, r24
    293a:	cd 01       	movw	r24, r26
    293c:	0e 94 7d 15 	call	0x2afa	; 0x2afa <__udivmodsi4>
    2940:	da 01       	movw	r26, r20
    2942:	c9 01       	movw	r24, r18
    2944:	81 50       	subi	r24, 0x01	; 1
    2946:	d6 01       	movw	r26, r12
    2948:	8c 93       	st	X, r24
	/*  StopBit   specify one or two bit
		ParityBit {even , odd , disable}
	    DataSize  {5,6,7,8,9 } */
	/*set value in UCSRC on buffer first because it share virtual address with UBRR*/
	u8_UCSRC_Buffer |= (pUART_cfg_s->u8_StopBit << STOP_BITS_OFFSET) | (pUART_cfg_s->u8_ParityBit<<PARITY_BITS_OFFSET);
    294a:	e8 85       	ldd	r30, Y+8	; 0x08
    294c:	f9 85       	ldd	r31, Y+9	; 0x09
    294e:	83 81       	ldd	r24, Z+3	; 0x03
    2950:	88 2f       	mov	r24, r24
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	88 0f       	add	r24, r24
    2956:	99 1f       	adc	r25, r25
    2958:	88 0f       	add	r24, r24
    295a:	99 1f       	adc	r25, r25
    295c:	88 0f       	add	r24, r24
    295e:	99 1f       	adc	r25, r25
    2960:	28 2f       	mov	r18, r24
    2962:	e8 85       	ldd	r30, Y+8	; 0x08
    2964:	f9 85       	ldd	r31, Y+9	; 0x09
    2966:	84 81       	ldd	r24, Z+4	; 0x04
    2968:	88 2f       	mov	r24, r24
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	82 95       	swap	r24
    296e:	92 95       	swap	r25
    2970:	90 7f       	andi	r25, 0xF0	; 240
    2972:	98 27       	eor	r25, r24
    2974:	80 7f       	andi	r24, 0xF0	; 240
    2976:	98 27       	eor	r25, r24
    2978:	92 2f       	mov	r25, r18
    297a:	98 2b       	or	r25, r24
    297c:	89 81       	ldd	r24, Y+1	; 0x01
    297e:	89 2b       	or	r24, r25
    2980:	89 83       	std	Y+1, r24	; 0x01
	u8_UCSRC_Buffer |= ((NUM_OF_BITS_MASK & pUART_cfg_s->u8_DataSize)<<BITS_PER_FRAME_OFFSET);
    2982:	e8 85       	ldd	r30, Y+8	; 0x08
    2984:	f9 85       	ldd	r31, Y+9	; 0x09
    2986:	85 81       	ldd	r24, Z+5	; 0x05
    2988:	88 2f       	mov	r24, r24
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	8c 7f       	andi	r24, 0xFC	; 252
    298e:	90 70       	andi	r25, 0x00	; 0
    2990:	88 0f       	add	r24, r24
    2992:	99 1f       	adc	r25, r25
    2994:	98 2f       	mov	r25, r24
    2996:	89 81       	ldd	r24, Y+1	; 0x01
    2998:	89 2b       	or	r24, r25
    299a:	89 83       	std	Y+1, r24	; 0x01
	/* only at 9 bits frame the third bit should be set*/
	if(pUART_cfg_s->u8_DataSize == UART_9_BIT)
    299c:	e8 85       	ldd	r30, Y+8	; 0x08
    299e:	f9 85       	ldd	r31, Y+9	; 0x09
    29a0:	85 81       	ldd	r24, Z+5	; 0x05
    29a2:	87 30       	cpi	r24, 0x07	; 7
    29a4:	41 f4       	brne	.+16     	; 0x29b6 <UART_Init+0x342>
	{
		SET_BIT(UART_CSRB,UART_CSZ2);
    29a6:	aa e2       	ldi	r26, 0x2A	; 42
    29a8:	b0 e0       	ldi	r27, 0x00	; 0
    29aa:	ea e2       	ldi	r30, 0x2A	; 42
    29ac:	f0 e0       	ldi	r31, 0x00	; 0
    29ae:	80 81       	ld	r24, Z
    29b0:	84 60       	ori	r24, 0x04	; 4
    29b2:	8c 93       	st	X, r24
    29b4:	07 c0       	rjmp	.+14     	; 0x29c4 <UART_Init+0x350>
	}
	else
	{
		CLR_BIT(UART_CSRB,UART_CSZ2);
    29b6:	aa e2       	ldi	r26, 0x2A	; 42
    29b8:	b0 e0       	ldi	r27, 0x00	; 0
    29ba:	ea e2       	ldi	r30, 0x2A	; 42
    29bc:	f0 e0       	ldi	r31, 0x00	; 0
    29be:	80 81       	ld	r24, Z
    29c0:	8b 7f       	andi	r24, 0xFB	; 251
    29c2:	8c 93       	st	X, r24
	}

	/*Check if interrupt in Empty UDR register CBF is assigned to function address*/
	if(pUART_cfg_s->DataRegisterEmpty_Cbk_ptr != NULL)
    29c4:	e8 85       	ldd	r30, Y+8	; 0x08
    29c6:	f9 85       	ldd	r31, Y+9	; 0x09
    29c8:	86 85       	ldd	r24, Z+14	; 0x0e
    29ca:	97 85       	ldd	r25, Z+15	; 0x0f
    29cc:	00 97       	sbiw	r24, 0x00	; 0
    29ce:	79 f0       	breq	.+30     	; 0x29ee <UART_Init+0x37a>
	{
		SET_BIT(UART_CSRB,UART_DRIE);
    29d0:	aa e2       	ldi	r26, 0x2A	; 42
    29d2:	b0 e0       	ldi	r27, 0x00	; 0
    29d4:	ea e2       	ldi	r30, 0x2A	; 42
    29d6:	f0 e0       	ldi	r31, 0x00	; 0
    29d8:	80 81       	ld	r24, Z
    29da:	80 62       	ori	r24, 0x20	; 32
    29dc:	8c 93       	st	X, r24
		gaptr_uartInterrupt_CBF[2] = pUART_cfg_s->DataRegisterEmpty_Cbk_ptr;
    29de:	e8 85       	ldd	r30, Y+8	; 0x08
    29e0:	f9 85       	ldd	r31, Y+9	; 0x09
    29e2:	86 85       	ldd	r24, Z+14	; 0x0e
    29e4:	97 85       	ldd	r25, Z+15	; 0x0f
    29e6:	90 93 bd 00 	sts	0x00BD, r25
    29ea:	80 93 bc 00 	sts	0x00BC, r24
	else
	{

	}

return E_OK;
    29ee:	1c 86       	std	Y+12, r1	; 0x0c
    29f0:	8c 85       	ldd	r24, Y+12	; 0x0c

}
    29f2:	2c 96       	adiw	r28, 0x0c	; 12
    29f4:	0f b6       	in	r0, 0x3f	; 63
    29f6:	f8 94       	cli
    29f8:	de bf       	out	0x3e, r29	; 62
    29fa:	0f be       	out	0x3f, r0	; 63
    29fc:	cd bf       	out	0x3d, r28	; 61
    29fe:	cf 91       	pop	r28
    2a00:	df 91       	pop	r29
    2a02:	1f 91       	pop	r17
    2a04:	0f 91       	pop	r16
    2a06:	ff 90       	pop	r15
    2a08:	ef 90       	pop	r14
    2a0a:	df 90       	pop	r13
    2a0c:	cf 90       	pop	r12
    2a0e:	08 95       	ret

00002a10 <UART_SendByte>:
 * \param u8_Data : The byte the user wants to send
 * \return ERROR_STATUS : Indication to the function execution
 *
 **/
ERROR_STATUS UART_SendByte(uint8 u8_Data)
{
    2a10:	df 93       	push	r29
    2a12:	cf 93       	push	r28
    2a14:	0f 92       	push	r0
    2a16:	cd b7       	in	r28, 0x3d	; 61
    2a18:	de b7       	in	r29, 0x3e	; 62
    2a1a:	89 83       	std	Y+1, r24	; 0x01
	/*	poll on the UDR register empty flag
	 *  wait until it available to write data on it */

	while(!GET_BIT(UART_CSRA,UART_DRE)){}
    2a1c:	eb e2       	ldi	r30, 0x2B	; 43
    2a1e:	f0 e0       	ldi	r31, 0x00	; 0
    2a20:	80 81       	ld	r24, Z
    2a22:	88 2f       	mov	r24, r24
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	80 72       	andi	r24, 0x20	; 32
    2a28:	90 70       	andi	r25, 0x00	; 0
    2a2a:	4f 96       	adiw	r24, 0x1f	; 31
    2a2c:	8f 33       	cpi	r24, 0x3F	; 63
    2a2e:	91 05       	cpc	r25, r1
    2a30:	a8 f3       	brcs	.-22     	; 0x2a1c <UART_SendByte+0xc>
	UART_DR = u8_Data;
    2a32:	ec e2       	ldi	r30, 0x2C	; 44
    2a34:	f0 e0       	ldi	r31, 0x00	; 0
    2a36:	89 81       	ldd	r24, Y+1	; 0x01
    2a38:	80 83       	st	Z, r24
	return E_OK;
    2a3a:	80 e0       	ldi	r24, 0x00	; 0
}
    2a3c:	0f 90       	pop	r0
    2a3e:	cf 91       	pop	r28
    2a40:	df 91       	pop	r29
    2a42:	08 95       	ret

00002a44 <UART_ReceiveByte>:
 * \param pu8_ReceivedData : The sent byte will be stored in the passed pointer
 * \return ERROR_STATUS : Indication to the function execution
 *
 **/
ERROR_STATUS UART_ReceiveByte(uint8 *pu8_ReceivedData)
{
    2a44:	df 93       	push	r29
    2a46:	cf 93       	push	r28
    2a48:	00 d0       	rcall	.+0      	; 0x2a4a <UART_ReceiveByte+0x6>
    2a4a:	0f 92       	push	r0
    2a4c:	cd b7       	in	r28, 0x3d	; 61
    2a4e:	de b7       	in	r29, 0x3e	; 62
    2a50:	9a 83       	std	Y+2, r25	; 0x02
    2a52:	89 83       	std	Y+1, r24	; 0x01
    if (pu8_ReceivedData == NULL)
    2a54:	89 81       	ldd	r24, Y+1	; 0x01
    2a56:	9a 81       	ldd	r25, Y+2	; 0x02
    2a58:	00 97       	sbiw	r24, 0x00	; 0
    2a5a:	19 f4       	brne	.+6      	; 0x2a62 <UART_ReceiveByte+0x1e>
    {
        return E_NOK;
    2a5c:	81 e0       	ldi	r24, 0x01	; 1
    2a5e:	8b 83       	std	Y+3, r24	; 0x03
    2a60:	13 c0       	rjmp	.+38     	; 0x2a88 <UART_ReceiveByte+0x44>
    }
	/*	poll on the UDR register receive flag -> receive complete
	 *  wait until it available to read data from it */
	while(!GET_BIT(UART_CSRA,UART_RXC)){}
    2a62:	eb e2       	ldi	r30, 0x2B	; 43
    2a64:	f0 e0       	ldi	r31, 0x00	; 0
    2a66:	80 81       	ld	r24, Z
    2a68:	88 2f       	mov	r24, r24
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	80 78       	andi	r24, 0x80	; 128
    2a6e:	90 70       	andi	r25, 0x00	; 0
    2a70:	81 58       	subi	r24, 0x81	; 129
    2a72:	9f 4f       	sbci	r25, 0xFF	; 255
    2a74:	8f 3f       	cpi	r24, 0xFF	; 255
    2a76:	91 05       	cpc	r25, r1
    2a78:	a0 f3       	brcs	.-24     	; 0x2a62 <UART_ReceiveByte+0x1e>
	*pu8_ReceivedData = UART_DR;
    2a7a:	ec e2       	ldi	r30, 0x2C	; 44
    2a7c:	f0 e0       	ldi	r31, 0x00	; 0
    2a7e:	80 81       	ld	r24, Z
    2a80:	e9 81       	ldd	r30, Y+1	; 0x01
    2a82:	fa 81       	ldd	r31, Y+2	; 0x02
    2a84:	80 83       	st	Z, r24
	return E_OK;
    2a86:	1b 82       	std	Y+3, r1	; 0x03
    2a88:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2a8a:	0f 90       	pop	r0
    2a8c:	0f 90       	pop	r0
    2a8e:	0f 90       	pop	r0
    2a90:	cf 91       	pop	r28
    2a92:	df 91       	pop	r29
    2a94:	08 95       	ret

00002a96 <__mulsi3>:
    2a96:	62 9f       	mul	r22, r18
    2a98:	d0 01       	movw	r26, r0
    2a9a:	73 9f       	mul	r23, r19
    2a9c:	f0 01       	movw	r30, r0
    2a9e:	82 9f       	mul	r24, r18
    2aa0:	e0 0d       	add	r30, r0
    2aa2:	f1 1d       	adc	r31, r1
    2aa4:	64 9f       	mul	r22, r20
    2aa6:	e0 0d       	add	r30, r0
    2aa8:	f1 1d       	adc	r31, r1
    2aaa:	92 9f       	mul	r25, r18
    2aac:	f0 0d       	add	r31, r0
    2aae:	83 9f       	mul	r24, r19
    2ab0:	f0 0d       	add	r31, r0
    2ab2:	74 9f       	mul	r23, r20
    2ab4:	f0 0d       	add	r31, r0
    2ab6:	65 9f       	mul	r22, r21
    2ab8:	f0 0d       	add	r31, r0
    2aba:	99 27       	eor	r25, r25
    2abc:	72 9f       	mul	r23, r18
    2abe:	b0 0d       	add	r27, r0
    2ac0:	e1 1d       	adc	r30, r1
    2ac2:	f9 1f       	adc	r31, r25
    2ac4:	63 9f       	mul	r22, r19
    2ac6:	b0 0d       	add	r27, r0
    2ac8:	e1 1d       	adc	r30, r1
    2aca:	f9 1f       	adc	r31, r25
    2acc:	bd 01       	movw	r22, r26
    2ace:	cf 01       	movw	r24, r30
    2ad0:	11 24       	eor	r1, r1
    2ad2:	08 95       	ret

00002ad4 <__divmodhi4>:
    2ad4:	97 fb       	bst	r25, 7
    2ad6:	09 2e       	mov	r0, r25
    2ad8:	07 26       	eor	r0, r23
    2ada:	0a d0       	rcall	.+20     	; 0x2af0 <__divmodhi4_neg1>
    2adc:	77 fd       	sbrc	r23, 7
    2ade:	04 d0       	rcall	.+8      	; 0x2ae8 <__divmodhi4_neg2>
    2ae0:	2e d0       	rcall	.+92     	; 0x2b3e <__udivmodhi4>
    2ae2:	06 d0       	rcall	.+12     	; 0x2af0 <__divmodhi4_neg1>
    2ae4:	00 20       	and	r0, r0
    2ae6:	1a f4       	brpl	.+6      	; 0x2aee <__divmodhi4_exit>

00002ae8 <__divmodhi4_neg2>:
    2ae8:	70 95       	com	r23
    2aea:	61 95       	neg	r22
    2aec:	7f 4f       	sbci	r23, 0xFF	; 255

00002aee <__divmodhi4_exit>:
    2aee:	08 95       	ret

00002af0 <__divmodhi4_neg1>:
    2af0:	f6 f7       	brtc	.-4      	; 0x2aee <__divmodhi4_exit>
    2af2:	90 95       	com	r25
    2af4:	81 95       	neg	r24
    2af6:	9f 4f       	sbci	r25, 0xFF	; 255
    2af8:	08 95       	ret

00002afa <__udivmodsi4>:
    2afa:	a1 e2       	ldi	r26, 0x21	; 33
    2afc:	1a 2e       	mov	r1, r26
    2afe:	aa 1b       	sub	r26, r26
    2b00:	bb 1b       	sub	r27, r27
    2b02:	fd 01       	movw	r30, r26
    2b04:	0d c0       	rjmp	.+26     	; 0x2b20 <__udivmodsi4_ep>

00002b06 <__udivmodsi4_loop>:
    2b06:	aa 1f       	adc	r26, r26
    2b08:	bb 1f       	adc	r27, r27
    2b0a:	ee 1f       	adc	r30, r30
    2b0c:	ff 1f       	adc	r31, r31
    2b0e:	a2 17       	cp	r26, r18
    2b10:	b3 07       	cpc	r27, r19
    2b12:	e4 07       	cpc	r30, r20
    2b14:	f5 07       	cpc	r31, r21
    2b16:	20 f0       	brcs	.+8      	; 0x2b20 <__udivmodsi4_ep>
    2b18:	a2 1b       	sub	r26, r18
    2b1a:	b3 0b       	sbc	r27, r19
    2b1c:	e4 0b       	sbc	r30, r20
    2b1e:	f5 0b       	sbc	r31, r21

00002b20 <__udivmodsi4_ep>:
    2b20:	66 1f       	adc	r22, r22
    2b22:	77 1f       	adc	r23, r23
    2b24:	88 1f       	adc	r24, r24
    2b26:	99 1f       	adc	r25, r25
    2b28:	1a 94       	dec	r1
    2b2a:	69 f7       	brne	.-38     	; 0x2b06 <__udivmodsi4_loop>
    2b2c:	60 95       	com	r22
    2b2e:	70 95       	com	r23
    2b30:	80 95       	com	r24
    2b32:	90 95       	com	r25
    2b34:	9b 01       	movw	r18, r22
    2b36:	ac 01       	movw	r20, r24
    2b38:	bd 01       	movw	r22, r26
    2b3a:	cf 01       	movw	r24, r30
    2b3c:	08 95       	ret

00002b3e <__udivmodhi4>:
    2b3e:	aa 1b       	sub	r26, r26
    2b40:	bb 1b       	sub	r27, r27
    2b42:	51 e1       	ldi	r21, 0x11	; 17
    2b44:	07 c0       	rjmp	.+14     	; 0x2b54 <__udivmodhi4_ep>

00002b46 <__udivmodhi4_loop>:
    2b46:	aa 1f       	adc	r26, r26
    2b48:	bb 1f       	adc	r27, r27
    2b4a:	a6 17       	cp	r26, r22
    2b4c:	b7 07       	cpc	r27, r23
    2b4e:	10 f0       	brcs	.+4      	; 0x2b54 <__udivmodhi4_ep>
    2b50:	a6 1b       	sub	r26, r22
    2b52:	b7 0b       	sbc	r27, r23

00002b54 <__udivmodhi4_ep>:
    2b54:	88 1f       	adc	r24, r24
    2b56:	99 1f       	adc	r25, r25
    2b58:	5a 95       	dec	r21
    2b5a:	a9 f7       	brne	.-22     	; 0x2b46 <__udivmodhi4_loop>
    2b5c:	80 95       	com	r24
    2b5e:	90 95       	com	r25
    2b60:	bc 01       	movw	r22, r24
    2b62:	cd 01       	movw	r24, r26
    2b64:	08 95       	ret

00002b66 <_exit>:
    2b66:	f8 94       	cli

00002b68 <__stop_program>:
    2b68:	ff cf       	rjmp	.-2      	; 0x2b68 <__stop_program>
